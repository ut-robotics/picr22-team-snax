
snax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a690  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a868  0800a868  0001a868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c0  0800a8c0  000201ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8c0  0800a8c0  000201ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8c0  0800a8c0  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8c0  0800a8c0  0001a8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  0800a8c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f8  200001ac  0800aa74  000201ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015a4  0800aa74  000215a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001728c  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003748  00000000  00000000  00037468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e1d  00000000  00000000  0003d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017409  00000000  00000000  0005dff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6798  00000000  00000000  000753fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bb96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005240  00000000  00000000  0013bbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001ac 	.word	0x200001ac
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a850 	.word	0x0800a850

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b0 	.word	0x200001b0
 8000214:	0800a850 	.word	0x0800a850

08000218 <CDC_On_Receive>:


Command command = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .throwerSpeed = 0, .delimiter = 0}; // (4) Instance of received data.
volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) { // (7) Check if received data has the same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f00a faf8 	bl	800a824 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200003dc 	.word	0x200003dc
 8000254:	200003e6 	.word	0x200003e6

08000258 <clampValue>:


int32_t clampValue(int32_t value, int32_t minValue, int32_t maxValue) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (value < minValue) {
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	429a      	cmp	r2, r3
 800026a:	da01      	bge.n	8000270 <clampValue+0x18>
		return minValue;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	e006      	b.n	800027e <clampValue+0x26>
	}
	if (value > maxValue) {
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	dd01      	ble.n	800027c <clampValue+0x24>
		return maxValue;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	e000      	b.n	800027e <clampValue+0x26>
	}

	return value;
 800027c:	68fb      	ldr	r3, [r7, #12]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
	...

0800028c <controlMotor>:


int32_t controlMotor(MotorControl* motorControl, int16_t position, int16_t setpoint) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
 8000298:	4613      	mov	r3, r2
 800029a:	803b      	strh	r3, [r7, #0]
	motorControl->positionChange = position - motorControl->position;
 800029c:	887a      	ldrh	r2, [r7, #2]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	b29b      	uxth	r3, r3
 80002aa:	b21a      	sxth	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	801a      	strh	r2, [r3, #0]
	motorControl->position = position;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	887a      	ldrh	r2, [r7, #2]
 80002b4:	805a      	strh	r2, [r3, #2]
	int32_t error = setpoint - motorControl->positionChange;
 80002b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80002c0:	1a9b      	subs	r3, r3, r2
 80002c2:	60fb      	str	r3, [r7, #12]
	motorControl->integral += error;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	689a      	ldr	r2, [r3, #8]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	441a      	add	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	609a      	str	r2, [r3, #8]
	clampValue(motorControl->integral, -70000 / motorControl->gainI, 70000 / motorControl->gainI);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	6898      	ldr	r0, [r3, #8]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <controlMotor+0x94>)
 80002de:	fb93 f1f2 	sdiv	r1, r3, r2
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <controlMotor+0x98>)
 80002ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80002f0:	461a      	mov	r2, r3
 80002f2:	f7ff ffb1 	bl	8000258 <clampValue>

	return error * motorControl->gainP + motorControl->gainI * motorControl->integral;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80002fc:	461a      	mov	r2, r3
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	fb03 f202 	mul.w	r2, r3, r2
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800030a:	4619      	mov	r1, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	fb01 f303 	mul.w	r3, r1, r3
 8000314:	4413      	add	r3, r2

}
 8000316:	4618      	mov	r0, r3
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	fffeee90 	.word	0xfffeee90
 8000324:	00011170 	.word	0x00011170

08000328 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  // Motor control calculations can be called from here
	int32_t motorPwm_1 = clampValue(controlMotor(&motorControl_1, (int16_t)TIM4->CNT, command.speed1), -65535, 65535);
 8000330:	4b42      	ldr	r3, [pc, #264]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000334:	b21b      	sxth	r3, r3
 8000336:	4a42      	ldr	r2, [pc, #264]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000338:	f9b2 2000 	ldrsh.w	r2, [r2]
 800033c:	4619      	mov	r1, r3
 800033e:	4841      	ldr	r0, [pc, #260]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000340:	f7ff ffa4 	bl	800028c <controlMotor>
 8000344:	4603      	mov	r3, r0
 8000346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800034a:	493f      	ldr	r1, [pc, #252]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff83 	bl	8000258 <clampValue>
 8000352:	6178      	str	r0, [r7, #20]
	int32_t motorPwm_2 = clampValue(controlMotor(&motorControl_2, (int16_t)TIM3->CNT, command.speed2), -65535, 65535);
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000358:	b21b      	sxth	r3, r3
 800035a:	4a39      	ldr	r2, [pc, #228]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800035c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000360:	4619      	mov	r1, r3
 8000362:	483b      	ldr	r0, [pc, #236]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000364:	f7ff ff92 	bl	800028c <controlMotor>
 8000368:	4603      	mov	r3, r0
 800036a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800036e:	4936      	ldr	r1, [pc, #216]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff71 	bl	8000258 <clampValue>
 8000376:	6138      	str	r0, [r7, #16]
	int32_t motorPwm_3 = clampValue(controlMotor(&motorControl_3, (int16_t)TIM1->CNT, command.speed3), -65535, 65535);
 8000378:	4b36      	ldr	r3, [pc, #216]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800037a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037c:	b21b      	sxth	r3, r3
 800037e:	4a30      	ldr	r2, [pc, #192]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000380:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000384:	4619      	mov	r1, r3
 8000386:	4834      	ldr	r0, [pc, #208]	; (8000458 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000388:	f7ff ff80 	bl	800028c <controlMotor>
 800038c:	4603      	mov	r3, r0
 800038e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000392:	492d      	ldr	r1, [pc, #180]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ff5f 	bl	8000258 <clampValue>
 800039a:	60f8      	str	r0, [r7, #12]

	if (motorPwm_1 < 0) {
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	da0c      	bge.n	80003bc <HAL_TIM_PeriodElapsedCallback+0x94>
		TIM2->CCR2 = -motorPwm_1;
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	425a      	negs	r2, r3
 80003a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003aa:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f001 faf1 	bl	800199c <HAL_GPIO_WritePin>
 80003ba:	e00a      	b.n	80003d2 <HAL_TIM_PeriodElapsedCallback+0xaa>
	} else {
		TIM2->CCR2 = motorPwm_1;
 80003bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ce:	f001 fae5 	bl	800199c <HAL_GPIO_WritePin>
	}

	if (motorPwm_2 < 0) {
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	da0a      	bge.n	80003ee <HAL_TIM_PeriodElapsedCallback+0xc6>
		TIM2->CCR4 = -motorPwm_2;
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	425a      	negs	r2, r3
 80003dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2101      	movs	r1, #1
 80003e6:	481d      	ldr	r0, [pc, #116]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003e8:	f001 fad8 	bl	800199c <HAL_GPIO_WritePin>
 80003ec:	e008      	b.n	8000400 <HAL_TIM_PeriodElapsedCallback+0xd8>
	} else {
		TIM2->CCR4 = motorPwm_2;
 80003ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2101      	movs	r1, #1
 80003fa:	4818      	ldr	r0, [pc, #96]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003fc:	f001 face 	bl	800199c <HAL_GPIO_WritePin>
	}

	if (motorPwm_3 < 0) {
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2b00      	cmp	r3, #0
 8000404:	da0b      	bge.n	800041e <HAL_TIM_PeriodElapsedCallback+0xf6>
		TIM2->CCR1 = -motorPwm_3;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	425a      	negs	r2, r3
 800040a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800040e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	2104      	movs	r1, #4
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f001 fac0 	bl	800199c <HAL_GPIO_WritePin>
	} else {
		TIM2->CCR1 = motorPwm_3;
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
	}
}
 800041c:	e009      	b.n	8000432 <HAL_TIM_PeriodElapsedCallback+0x10a>
		TIM2->CCR1 = motorPwm_3;
 800041e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 8000426:	2201      	movs	r2, #1
 8000428:	2104      	movs	r1, #4
 800042a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042e:	f001 fab5 	bl	800199c <HAL_GPIO_WritePin>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40000800 	.word	0x40000800
 8000440:	200003dc 	.word	0x200003dc
 8000444:	20000000 	.word	0x20000000
 8000448:	ffff0001 	.word	0xffff0001
 800044c:	40000400 	.word	0x40000400
 8000450:	2000000c 	.word	0x2000000c
 8000454:	40012c00 	.word	0x40012c00
 8000458:	20000018 	.word	0x20000018
 800045c:	48000400 	.word	0x48000400

08000460 <enableMotorDrivers>:

void enableMotorDrivers(){
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, nsleepPwmValues, 2);
 8000464:	2302      	movs	r3, #2
 8000466:	4a03      	ldr	r2, [pc, #12]	; (8000474 <enableMotorDrivers+0x14>)
 8000468:	2100      	movs	r1, #0
 800046a:	4803      	ldr	r0, [pc, #12]	; (8000478 <enableMotorDrivers+0x18>)
 800046c:	f004 f98c 	bl	8004788 <HAL_TIM_PWM_Start_DMA>

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000024 	.word	0x20000024
 8000478:	20000344 	.word	0x20000344

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000482:	f000 fed0 	bl	8001226 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000486:	f000 f87b 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048a:	f000 fbc5 	bl	8000c18 <MX_GPIO_Init>
  MX_DMA_Init();
 800048e:	f000 fb99 	bl	8000bc4 <MX_DMA_Init>
  MX_USB_Device_Init();
 8000492:	f009 fc93 	bl	8009dbc <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000496:	f000 f8db 	bl	8000650 <MX_TIM1_Init>
  MX_TIM3_Init();
 800049a:	f000 f9a3 	bl	80007e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800049e:	f000 f9f7 	bl	8000890 <MX_TIM4_Init>
  MX_TIM2_Init();
 80004a2:	f000 f92f 	bl	8000704 <MX_TIM2_Init>
  MX_TIM16_Init();
 80004a6:	f000 fb13 	bl	8000ad0 <MX_TIM16_Init>
  MX_TIM6_Init();
 80004aa:	f000 fa47 	bl	800093c <MX_TIM6_Init>
  MX_TIM8_Init();
 80004ae:	f000 fa7b 	bl	80009a8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = { // (1)
 80004b2:	2300      	movs	r3, #0
 80004b4:	803b      	strh	r3, [r7, #0]
 80004b6:	2300      	movs	r3, #0
 80004b8:	807b      	strh	r3, [r7, #2]
 80004ba:	2300      	movs	r3, #0
 80004bc:	80bb      	strh	r3, [r7, #4]
 80004be:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80004c2:	80fb      	strh	r3, [r7, #6]
        .speed3 = 0,
        .delimiter = 0xAAAA
    };

// TIMER
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004c4:	2104      	movs	r1, #4
 80004c6:	4822      	ldr	r0, [pc, #136]	; (8000550 <main+0xd4>)
 80004c8:	f004 fc1c 	bl	8004d04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004cc:	2104      	movs	r1, #4
 80004ce:	4821      	ldr	r0, [pc, #132]	; (8000554 <main+0xd8>)
 80004d0:	f004 fc18 	bl	8004d04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004d4:	2104      	movs	r1, #4
 80004d6:	4820      	ldr	r0, [pc, #128]	; (8000558 <main+0xdc>)
 80004d8:	f004 fc14 	bl	8004d04 <HAL_TIM_Encoder_Start>

// PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004dc:	2100      	movs	r1, #0
 80004de:	481f      	ldr	r0, [pc, #124]	; (800055c <main+0xe0>)
 80004e0:	f004 f852 	bl	8004588 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004e4:	2104      	movs	r1, #4
 80004e6:	481d      	ldr	r0, [pc, #116]	; (800055c <main+0xe0>)
 80004e8:	f004 f84e 	bl	8004588 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80004ec:	210c      	movs	r1, #12
 80004ee:	481b      	ldr	r0, [pc, #108]	; (800055c <main+0xe0>)
 80004f0:	f004 f84a 	bl	8004588 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80004f4:	2100      	movs	r1, #0
 80004f6:	481a      	ldr	r0, [pc, #104]	; (8000560 <main+0xe4>)
 80004f8:	f004 f846 	bl	8004588 <HAL_TIM_PWM_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 80004fc:	4819      	ldr	r0, [pc, #100]	; (8000564 <main+0xe8>)
 80004fe:	f003 ff81 	bl	8004404 <HAL_TIM_Base_Start_IT>
  enableMotorDrivers();
 8000502:	f7ff ffad 	bl	8000460 <enableMotorDrivers>

  TIM16->CCR1 = 1800;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <main+0xec>)
 8000508:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isCommandReceived) { // (2)
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <main+0xf0>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0fa      	beq.n	800050e <main+0x92>
	        isCommandReceived = 0;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <main+0xf0>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]

	        enableMotorDrivers();
 800051e:	f7ff ff9f 	bl	8000460 <enableMotorDrivers>

	        feedback.speed1 = motorControl_1.positionChange; // (4)
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <main+0xf4>)
 8000524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000528:	803b      	strh	r3, [r7, #0]
			feedback.speed2 = motorControl_2.positionChange;
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <main+0xf8>)
 800052c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000530:	807b      	strh	r3, [r7, #2]
			feedback.speed3 = motorControl_3.positionChange;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <main+0xfc>)
 8000534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000538:	80bb      	strh	r3, [r7, #4]

			TIM16->CCR1 = command.throwerSpeed;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <main+0x100>)
 800053c:	88da      	ldrh	r2, [r3, #6]
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <main+0xec>)
 8000540:	635a      	str	r2, [r3, #52]	; 0x34

	        CDC_Transmit_FS((uint8_t*)&feedback, (uint16_t)sizeof(feedback)); // (5)
 8000542:	463b      	mov	r3, r7
 8000544:	2108      	movs	r1, #8
 8000546:	4618      	mov	r0, r3
 8000548:	f009 fcfa 	bl	8009f40 <CDC_Transmit_FS>
	  if (isCommandReceived) { // (2)
 800054c:	e7df      	b.n	800050e <main+0x92>
 800054e:	bf00      	nop
 8000550:	200001c8 	.word	0x200001c8
 8000554:	20000260 	.word	0x20000260
 8000558:	200002ac 	.word	0x200002ac
 800055c:	20000214 	.word	0x20000214
 8000560:	20000390 	.word	0x20000390
 8000564:	200002f8 	.word	0x200002f8
 8000568:	40014400 	.word	0x40014400
 800056c:	200003e6 	.word	0x200003e6
 8000570:	20000000 	.word	0x20000000
 8000574:	2000000c 	.word	0x2000000c
 8000578:	20000018 	.word	0x20000018
 800057c:	200003dc 	.word	0x200003dc

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0a4      	sub	sp, #144	; 0x90
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800058a:	2238      	movs	r2, #56	; 0x38
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f00a f956 	bl	800a840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a4:	463b      	mov	r3, r7
 80005a6:	2244      	movs	r2, #68	; 0x44
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f00a f948 	bl	800a840 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f002 ff3f 	bl	8003434 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005b6:	2322      	movs	r3, #34	; 0x22
 80005b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2340      	movs	r3, #64	; 0x40
 80005c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005d4:	2314      	movs	r3, #20
 80005d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 ffc3 	bl	800357c <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005fc:	f000 fb4c 	bl	8000c98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000614:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000618:	2104      	movs	r1, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fac6 	bl	8003bac <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000626:	f000 fb37 	bl	8000c98 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800062a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000630:	2300      	movs	r3, #0
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fc9c 	bl	8003f74 <HAL_RCCEx_PeriphCLKConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000642:	f000 fb29 	bl	8000c98 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3790      	adds	r7, #144	; 0x90
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2224      	movs	r2, #36	; 0x24
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00a f8ee 	bl	800a840 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800066e:	4b23      	ldr	r3, [pc, #140]	; (80006fc <MX_TIM1_Init+0xac>)
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <MX_TIM1_Init+0xb0>)
 8000672:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_TIM1_Init+0xac>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <MX_TIM1_Init+0xac>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_TIM1_Init+0xac>)
 8000682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000686:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_TIM1_Init+0xac>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_TIM1_Init+0xac>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_TIM1_Init+0xac>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800069a:	2303      	movs	r3, #3
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006b2:	2301      	movs	r3, #1
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4619      	mov	r1, r3
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <MX_TIM1_Init+0xac>)
 80006c6:	f004 fa77 	bl	8004bb8 <HAL_TIM_Encoder_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80006d0:	f000 fae2 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_TIM1_Init+0xac>)
 80006e6:	f005 fae9 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006f0:	f000 fad2 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3730      	adds	r7, #48	; 0x30
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200001c8 	.word	0x200001c8
 8000700:	40012c00 	.word	0x40012c00

08000704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
 8000726:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000728:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_TIM2_Init+0xdc>)
 800072a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_TIM2_Init+0xdc>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_TIM2_Init+0xdc>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_TIM2_Init+0xdc>)
 800073e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_TIM2_Init+0xdc>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_TIM2_Init+0xdc>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000750:	4823      	ldr	r0, [pc, #140]	; (80007e0 <MX_TIM2_Init+0xdc>)
 8000752:	f003 fec1 	bl	80044d8 <HAL_TIM_PWM_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800075c:	f000 fa9c 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	481c      	ldr	r0, [pc, #112]	; (80007e0 <MX_TIM2_Init+0xdc>)
 8000770:	f005 faa4 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800077a:	f000 fa8d 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077e:	2360      	movs	r3, #96	; 0x60
 8000780:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MX_TIM2_Init+0xdc>)
 8000796:	f004 fcc3 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80007a0:	f000 fa7a 	bl	8000c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	2204      	movs	r2, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_TIM2_Init+0xdc>)
 80007ac:	f004 fcb8 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80007b6:	f000 fa6f 	bl	8000c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	220c      	movs	r2, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_TIM2_Init+0xdc>)
 80007c2:	f004 fcad 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80007cc:	f000 fa64 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <MX_TIM2_Init+0xdc>)
 80007d2:	f000 fbe1 	bl	8000f98 <HAL_TIM_MspPostInit>

}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000214 	.word	0x20000214

080007e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2224      	movs	r2, #36	; 0x24
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00a f824 	bl	800a840 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_TIM3_Init+0xa4>)
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <MX_TIM3_Init+0xa8>)
 8000806:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_TIM3_Init+0xa4>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_TIM3_Init+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_TIM3_Init+0xa4>)
 8000816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_TIM3_Init+0xa4>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_TIM3_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000828:	2303      	movs	r3, #3
 800082a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000840:	2301      	movs	r3, #1
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_TIM3_Init+0xa4>)
 8000854:	f004 f9b0 	bl	8004bb8 <HAL_TIM_Encoder_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800085e:	f000 fa1b 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_TIM3_Init+0xa4>)
 8000870:	f005 fa24 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800087a:	f000 fa0d 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	; 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000260 	.word	0x20000260
 800088c:	40000400 	.word	0x40000400

08000890 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2224      	movs	r2, #36	; 0x24
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f009 ffce 	bl	800a840 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <MX_TIM4_Init+0xa8>)
 80008b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ec:	2301      	movs	r3, #1
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_TIM4_Init+0xa4>)
 8000900:	f004 f95a 	bl	8004bb8 <HAL_TIM_Encoder_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800090a:	f000 f9c5 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_TIM4_Init+0xa4>)
 800091c:	f005 f9ce 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000926:	f000 f9b7 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200002ac 	.word	0x200002ac
 8000938:	40000800 	.word	0x40000800

0800093c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_TIM6_Init+0x64>)
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_TIM6_Init+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_TIM6_Init+0x64>)
 8000954:	2218      	movs	r2, #24
 8000956:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_TIM6_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_TIM6_Init+0x64>)
 8000960:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000964:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_TIM6_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_TIM6_Init+0x64>)
 800096e:	f003 fcf1 	bl	8004354 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000978:	f000 f98e 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_TIM6_Init+0x64>)
 800098a:	f005 f997 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 f980 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200002f8 	.word	0x200002f8
 80009a4:	40001000 	.word	0x40001000

080009a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b098      	sub	sp, #96	; 0x60
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2234      	movs	r2, #52	; 0x34
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f009 ff33 	bl	800a840 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009da:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <MX_TIM8_Init+0x120>)
 80009dc:	4a3b      	ldr	r2, [pc, #236]	; (8000acc <MX_TIM8_Init+0x124>)
 80009de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009e0:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <MX_TIM8_Init+0x120>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <MX_TIM8_Init+0x120>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 15999;
 80009ec:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <MX_TIM8_Init+0x120>)
 80009ee:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80009f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <MX_TIM8_Init+0x120>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <MX_TIM8_Init+0x120>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <MX_TIM8_Init+0x120>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a06:	4830      	ldr	r0, [pc, #192]	; (8000ac8 <MX_TIM8_Init+0x120>)
 8000a08:	f003 fd66 	bl	80044d8 <HAL_TIM_PWM_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f000 f941 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a26:	4619      	mov	r1, r3
 8000a28:	4827      	ldr	r0, [pc, #156]	; (8000ac8 <MX_TIM8_Init+0x120>)
 8000a2a:	f005 f947 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000a34:	f000 f930 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a38:	2360      	movs	r3, #96	; 0x60
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a40:	2302      	movs	r3, #2
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a44:	2300      	movs	r3, #0
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481a      	ldr	r0, [pc, #104]	; (8000ac8 <MX_TIM8_Init+0x120>)
 8000a60:	f004 fb5e 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000a6a:	f000 f915 	bl	8000c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM8_Init+0x120>)
 8000aac:	f005 f988 	bl	8005dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8000ab6:	f000 f8ef 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM8_Init+0x120>)
 8000abc:	f000 fa6c 	bl	8000f98 <HAL_TIM_MspPostInit>

}
 8000ac0:	bf00      	nop
 8000ac2:	3760      	adds	r7, #96	; 0x60
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000344 	.word	0x20000344
 8000acc:	40013400 	.word	0x40013400

08000ad0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	615a      	str	r2, [r3, #20]
 8000ae8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aea:	463b      	mov	r3, r7
 8000aec:	2234      	movs	r2, #52	; 0x34
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f009 fea5 	bl	800a840 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000af8:	4a31      	ldr	r2, [pc, #196]	; (8000bc0 <MX_TIM16_Init+0xf0>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000afe:	224f      	movs	r2, #79	; 0x4f
 8000b00:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 39999;
 8000b08:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b0a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000b0e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b22:	4826      	ldr	r0, [pc, #152]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b24:	f003 fc16 	bl	8004354 <HAL_TIM_Base_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b2e:	f000 f8b3 	bl	8000c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b32:	4822      	ldr	r0, [pc, #136]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b34:	f003 fcd0 	bl	80044d8 <HAL_TIM_PWM_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b3e:	f000 f8ab 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b42:	2360      	movs	r3, #96	; 0x60
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b62:	2200      	movs	r2, #0
 8000b64:	4619      	mov	r1, r3
 8000b66:	4815      	ldr	r0, [pc, #84]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b68:	f004 fada 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b72:	f000 f891 	bl	8000c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b9e:	f005 f90f 	bl	8005dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000ba8:	f000 f876 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000bae:	f000 f9f3 	bl	8000f98 <HAL_TIM_MspPostInit>

}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	; 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000390 	.word	0x20000390
 8000bc0:	40014400 	.word	0x40014400

08000bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_DMA_Init+0x50>)
 8000bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <MX_DMA_Init+0x50>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6493      	str	r3, [r2, #72]	; 0x48
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_DMA_Init+0x50>)
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_DMA_Init+0x50>)
 8000be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <MX_DMA_Init+0x50>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6493      	str	r3, [r2, #72]	; 0x48
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_DMA_Init+0x50>)
 8000bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	200b      	movs	r0, #11
 8000c00:	f000 fc5d 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c04:	200b      	movs	r0, #11
 8000c06:	f000 fc74 	bl	80014f2 <HAL_NVIC_EnableIRQ>

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_GPIO_Init+0x7c>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <MX_GPIO_Init+0x7c>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_GPIO_Init+0x7c>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_GPIO_Init+0x7c>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <MX_GPIO_Init+0x7c>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_GPIO_Init+0x7c>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M2_DIR_Pin|M3_DIR_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f240 4105 	movw	r1, #1029	; 0x405
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f000 fe98 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M2_DIR_Pin M3_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|M3_DIR_Pin;
 8000c6c:	f240 4305 	movw	r3, #1029	; 0x405
 8000c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f000 fd06 	bl	8001698 <HAL_GPIO_Init>

}
 8000c8c:	bf00      	nop
 8000c8e:	3720      	adds	r7, #32
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40021000 	.word	0x40021000

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>
	...

08000ca4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <HAL_TIM_PWM_MspInit+0x80>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10c      	bne.n	8000d18 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_TIM_PWM_MspInit+0x84>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <HAL_TIM_PWM_MspInit+0x84>)
 8000d04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d08:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_TIM_PWM_MspInit+0x84>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000d16:	e022      	b.n	8000d5e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <HAL_TIM_PWM_MspInit+0x88>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10c      	bne.n	8000d3c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_TIM_PWM_MspInit+0x84>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <HAL_TIM_PWM_MspInit+0x84>)
 8000d28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_TIM_PWM_MspInit+0x84>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
}
 8000d3a:	e010      	b.n	8000d5e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10b      	bne.n	8000d5e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_TIM_PWM_MspInit+0x84>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <HAL_TIM_PWM_MspInit+0x84>)
 8000d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d50:	6613      	str	r3, [r2, #96]	; 0x60
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_TIM_PWM_MspInit+0x84>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
}
 8000d5e:	bf00      	nop
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40012c00 	.word	0x40012c00
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40013400 	.word	0x40013400
 8000d78:	40014000 	.word	0x40014000

08000d7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d9c:	d146      	bne.n	8000e2c <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a52      	ldr	r2, [pc, #328]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b50      	ldr	r3, [pc, #320]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	623b      	str	r3, [r7, #32]
 8000db4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b4d      	ldr	r3, [pc, #308]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b4a      	ldr	r3, [pc, #296]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b47      	ldr	r3, [pc, #284]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a46      	ldr	r2, [pc, #280]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b44      	ldr	r3, [pc, #272]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC1_M1_Pin;
 8000de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC1_M1_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e06:	f000 fc47 	bl	8001698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC2_M1_Pin;
 8000e0a:	2308      	movs	r3, #8
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC2_M1_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4832      	ldr	r0, [pc, #200]	; (8000ef0 <HAL_TIM_Encoder_MspInit+0x174>)
 8000e26:	f000 fc37 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e2a:	e05a      	b.n	8000ee2 <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a30      	ldr	r2, [pc, #192]	; (8000ef4 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d128      	bne.n	8000e88 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	4a2c      	ldr	r2, [pc, #176]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6593      	str	r3, [r2, #88]	; 0x58
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b27      	ldr	r3, [pc, #156]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a26      	ldr	r2, [pc, #152]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1_M2_Pin|ENC2_M2_Pin;
 8000e66:	2330      	movs	r3, #48	; 0x30
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e76:	2302      	movs	r3, #2
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <HAL_TIM_Encoder_MspInit+0x174>)
 8000e82:	f000 fc09 	bl	8001698 <HAL_GPIO_Init>
}
 8000e86:	e02c      	b.n	8000ee2 <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM4)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d127      	bne.n	8000ee2 <HAL_TIM_Encoder_MspInit+0x166>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_TIM_Encoder_MspInit+0x170>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_M3_Pin|ENC2_M3_Pin;
 8000ec2:	23c0      	movs	r3, #192	; 0xc0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <HAL_TIM_Encoder_MspInit+0x174>)
 8000ede:	f000 fbdb 	bl	8001698 <HAL_GPIO_Init>
}
 8000ee2:	bf00      	nop
 8000ee4:	3738      	adds	r7, #56	; 0x38
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400
 8000ef4:	40000400 	.word	0x40000400
 8000ef8:	40000800 	.word	0x40000800

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <HAL_TIM_Base_MspInit+0x8c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d114      	bne.n	8000f38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <HAL_TIM_Base_MspInit+0x90>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <HAL_TIM_Base_MspInit+0x90>)
 8000f14:	f043 0310 	orr.w	r3, r3, #16
 8000f18:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_TIM_Base_MspInit+0x90>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2036      	movs	r0, #54	; 0x36
 8000f2c:	f000 fac7 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f30:	2036      	movs	r0, #54	; 0x36
 8000f32:	f000 fade 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f36:	e022      	b.n	8000f7e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <HAL_TIM_Base_MspInit+0x94>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d10c      	bne.n	8000f5c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_TIM_Base_MspInit+0x90>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_TIM_Base_MspInit+0x90>)
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_TIM_Base_MspInit+0x90>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
}
 8000f5a:	e010      	b.n	8000f7e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <HAL_TIM_Base_MspInit+0x98>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d10b      	bne.n	8000f7e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_TIM_Base_MspInit+0x90>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_TIM_Base_MspInit+0x90>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	6613      	str	r3, [r2, #96]	; 0x60
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_TIM_Base_MspInit+0x90>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40001000 	.word	0x40001000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40014400 	.word	0x40014400
 8000f94:	40014800 	.word	0x40014800

08000f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a58      	ldr	r2, [pc, #352]	; (8001118 <HAL_TIM_MspPostInit+0x180>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d11e      	bne.n	8000ff8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b58      	ldr	r3, [pc, #352]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a57      	ldr	r2, [pc, #348]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b55      	ldr	r3, [pc, #340]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M2_PWM_Pin|M1_PWM_Pin;
 8000fd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f000 fb51 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000ff6:	e08a      	b.n	800110e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM8)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_TIM_MspPostInit+0x188>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d11d      	bne.n	800103e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b46      	ldr	r3, [pc, #280]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a45      	ldr	r2, [pc, #276]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b43      	ldr	r3, [pc, #268]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 800101a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800102c:	230a      	movs	r3, #10
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	483b      	ldr	r0, [pc, #236]	; (8001124 <HAL_TIM_MspPostInit+0x18c>)
 8001038:	f000 fb2e 	bl	8001698 <HAL_GPIO_Init>
}
 800103c:	e067      	b.n	800110e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM15)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a39      	ldr	r2, [pc, #228]	; (8001128 <HAL_TIM_MspPostInit+0x190>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d11d      	bne.n	8001084 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b34      	ldr	r3, [pc, #208]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 800104a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104c:	4a33      	ldr	r2, [pc, #204]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = THRW_PWM_Pin;
 8001060:	2308      	movs	r3, #8
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001070:	2309      	movs	r3, #9
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THRW_PWM_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f000 fb0b 	bl	8001698 <HAL_GPIO_Init>
}
 8001082:	e044      	b.n	800110e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM16)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <HAL_TIM_MspPostInit+0x194>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d11d      	bne.n	80010ca <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a22      	ldr	r2, [pc, #136]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 80010a6:	2340      	movs	r3, #64	; 0x40
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80010b6:	2301      	movs	r3, #1
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f000 fae8 	bl	8001698 <HAL_GPIO_Init>
}
 80010c8:	e021      	b.n	800110e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM17)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a18      	ldr	r2, [pc, #96]	; (8001130 <HAL_TIM_MspPostInit+0x198>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d11c      	bne.n	800110e <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a10      	ldr	r2, [pc, #64]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_TIM_MspPostInit+0x184>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3_PWM_Pin;
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 fac5 	bl	8001698 <HAL_GPIO_Init>
}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	; 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012c00 	.word	0x40012c00
 800111c:	40021000 	.word	0x40021000
 8001120:	40013400 	.word	0x40013400
 8001124:	48000400 	.word	0x48000400
 8001128:	40014000 	.word	0x40014000
 800112c:	40014400 	.word	0x40014400
 8001130:	40014800 	.word	0x40014800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f8a4 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <USB_LP_IRQHandler+0x10>)
 800118e:	f000 fd24 	bl	8001bda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20001090 	.word	0x20001090

0800119c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM6_DAC_IRQHandler+0x10>)
 80011a2:	f003 fe3d 	bl	8004e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200002f8 	.word	0x200002f8

080011b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopForever+0x6>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopForever+0xe>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopForever+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011fe:	f7ff ffd7 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f009 faeb 	bl	800a7dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001206:	f7ff f939 	bl	800047c <main>

0800120a <LoopForever>:

LoopForever:
    b LoopForever
 800120a:	e7fe      	b.n	800120a <LoopForever>
  ldr   r0, =_estack
 800120c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 8001218:	0800a8c8 	.word	0x0800a8c8
  ldr r2, =_sbss
 800121c:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001220:	200015a4 	.word	0x200015a4

08001224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC1_2_IRQHandler>

08001226 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f939 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001236:	200f      	movs	r0, #15
 8001238:	f000 f80e 	bl	8001258 <HAL_InitTick>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	e001      	b.n	800124c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001248:	f7ff fd2c 	bl	8000ca4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124c:	79fb      	ldrb	r3, [r7, #7]

}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_InitTick+0x68>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d022      	beq.n	80012b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_InitTick+0x6c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <HAL_InitTick+0x68>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001278:	fbb1 f3f3 	udiv	r3, r1, r3
 800127c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f944 	bl	800150e <HAL_SYSTICK_Config>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10f      	bne.n	80012ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	d809      	bhi.n	80012a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001292:	2200      	movs	r2, #0
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	f04f 30ff 	mov.w	r0, #4294967295
 800129a:	f000 f910 	bl	80014be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_InitTick+0x70>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e004      	b.n	80012b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e001      	b.n	80012b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000030 	.word	0x20000030
 80012c4:	20000028 	.word	0x20000028
 80012c8:	2000002c 	.word	0x2000002c

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_IncTick+0x1c>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_IncTick+0x20>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <HAL_IncTick+0x1c>)
 80012dc:	6013      	str	r3, [r2, #0]
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	200003e8 	.word	0x200003e8
 80012ec:	20000030 	.word	0x20000030

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200003e8 	.word	0x200003e8

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff29 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff40 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff90 	bl	80013fc <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5f 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff33 	bl	800136c <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa4 	bl	8001464 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_DMA_Start_IT+0x20>
 8001542:	2302      	movs	r3, #2
 8001544:	e066      	b.n	8001614 <HAL_DMA_Start_IT+0xee>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d155      	bne.n	8001606 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 f84c 	bl	800161c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 020e 	orr.w	r2, r2, #14
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e00f      	b.n	80015be <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0204 	bic.w	r2, r2, #4
 80015ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 020a 	orr.w	r2, r2, #10
 80015bc:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015da:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015f2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	e005      	b.n	8001612 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800160e:	2302      	movs	r3, #2
 8001610:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001612:	7dfb      	ldrb	r3, [r7, #23]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001632:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001644:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 021f 	and.w	r2, r3, #31
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d108      	bne.n	800167c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800167a:	e007      	b.n	800168c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	60da      	str	r2, [r3, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016a6:	e15a      	b.n	800195e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 814c 	beq.w	8001958 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d005      	beq.n	80016d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d130      	bne.n	800173a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800170e:	2201      	movs	r2, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	f003 0201 	and.w	r2, r3, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b03      	cmp	r3, #3
 8001744:	d017      	beq.n	8001776 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d123      	bne.n	80017ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	6939      	ldr	r1, [r7, #16]
 80017c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0203 	and.w	r2, r3, #3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80a6 	beq.w	8001958 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180c:	4b5b      	ldr	r3, [pc, #364]	; (800197c <HAL_GPIO_Init+0x2e4>)
 800180e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001810:	4a5a      	ldr	r2, [pc, #360]	; (800197c <HAL_GPIO_Init+0x2e4>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6613      	str	r3, [r2, #96]	; 0x60
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_GPIO_Init+0x2e4>)
 800181a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001824:	4a56      	ldr	r2, [pc, #344]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800184e:	d01f      	beq.n	8001890 <HAL_GPIO_Init+0x1f8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <HAL_GPIO_Init+0x2ec>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d019      	beq.n	800188c <HAL_GPIO_Init+0x1f4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a4b      	ldr	r2, [pc, #300]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d013      	beq.n	8001888 <HAL_GPIO_Init+0x1f0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a4a      	ldr	r2, [pc, #296]	; (800198c <HAL_GPIO_Init+0x2f4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1ec>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a49      	ldr	r2, [pc, #292]	; (8001990 <HAL_GPIO_Init+0x2f8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1e8>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a48      	ldr	r2, [pc, #288]	; (8001994 <HAL_GPIO_Init+0x2fc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1e4>
 8001878:	2305      	movs	r3, #5
 800187a:	e00a      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 800187c:	2306      	movs	r3, #6
 800187e:	e008      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001880:	2304      	movs	r3, #4
 8001882:	e006      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001884:	2303      	movs	r3, #3
 8001886:	e004      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001888:	2302      	movs	r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001890:	2300      	movs	r3, #0
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	f002 0203 	and.w	r2, r2, #3
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	4093      	lsls	r3, r2
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a2:	4937      	ldr	r1, [pc, #220]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b0:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_GPIO_Init+0x300>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d4:	4a30      	ldr	r2, [pc, #192]	; (8001998 <HAL_GPIO_Init+0x300>)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_GPIO_Init+0x300>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018fe:	4a26      	ldr	r2, [pc, #152]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_GPIO_Init+0x300>)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001952:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	f47f ae9d 	bne.w	80016a8 <HAL_GPIO_Init+0x10>
  }
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40021000 	.word	0x40021000
 8001980:	40010000 	.word	0x40010000
 8001984:	48000400 	.word	0x48000400
 8001988:	48000800 	.word	0x48000800
 800198c:	48000c00 	.word	0x48000c00
 8001990:	48001000 	.word	0x48001000
 8001994:	48001400 	.word	0x48001400
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b8:	e002      	b.n	80019c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	b08b      	sub	sp, #44	; 0x2c
 80019d0:	af06      	add	r7, sp, #24
 80019d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0d7      	b.n	8001b8e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f008 fbec 	bl	800a1d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2203      	movs	r2, #3
 80019fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 fad8 	bl	8005fba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	e04c      	b.n	8001aaa <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	3301      	adds	r3, #1
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	b298      	uxth	r0, r3
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3336      	adds	r3, #54	; 0x36
 8001a4e:	4602      	mov	r2, r0
 8001a50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	3303      	adds	r3, #3
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	3338      	adds	r3, #56	; 0x38
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	333c      	adds	r3, #60	; 0x3c
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3340      	adds	r3, #64	; 0x40
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3ad      	bcc.n	8001a10 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	e044      	b.n	8001b44 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	3301      	adds	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d3b5      	bcc.n	8001aba <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	687e      	ldr	r6, [r7, #4]
 8001b56:	466d      	mov	r5, sp
 8001b58:	f106 0410 	add.w	r4, r6, #16
 8001b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	602b      	str	r3, [r5, #0]
 8001b64:	1d33      	adds	r3, r6, #4
 8001b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b68:	6838      	ldr	r0, [r7, #0]
 8001b6a:	f004 fa41 	bl	8005ff0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f001 fc29 	bl	80033de <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_PCD_Start+0x16>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e012      	b.n	8001bd2 <HAL_PCD_Start+0x3c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 f9e7 	bl	8005f8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 fc00 	bl	80083c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f006 fc05 	bl	80083f6 <USB_ReadInterrupts>
 8001bec:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fb26 	bl	800224a <PCD_EP_ISR_Handler>

    return;
 8001bfe:	e110      	b.n	8001e22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d013      	beq.n	8001c32 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f008 fb65 	bl	800a2f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c28:	2100      	movs	r1, #0
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8fc 	bl	8001e28 <HAL_PCD_SetAddress>

    return;
 8001c30:	e0f7      	b.n	8001e22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00c      	beq.n	8001c56 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c54:	e0e5      	b.n	8001e22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00c      	beq.n	8001c7a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c72:	b292      	uxth	r2, r2
 8001c74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c78:	e0d3      	b.n	8001e22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d034      	beq.n	8001cee <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0204 	bic.w	r2, r2, #4
 8001c96:	b292      	uxth	r2, r2
 8001c98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0208 	bic.w	r2, r2, #8
 8001cae:	b292      	uxth	r2, r2
 8001cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f008 fd07 	bl	800a6dc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f008 fb48 	bl	800a364 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ce6:	b292      	uxth	r2, r2
 8001ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001cec:	e099      	b.n	8001e22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d027      	beq.n	8001d48 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0208 	orr.w	r2, r2, #8
 8001d0a:	b292      	uxth	r2, r2
 8001d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d22:	b292      	uxth	r2, r2
 8001d24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0204 	orr.w	r2, r2, #4
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f008 faf5 	bl	800a330 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d46:	e06c      	b.n	8001e22 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d040      	beq.n	8001dd4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d64:	b292      	uxth	r2, r2
 8001d66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d12b      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0204 	orr.w	r2, r2, #4
 8001d86:	b292      	uxth	r2, r2
 8001d88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0208 	orr.w	r2, r2, #8
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f008 fc89 	bl	800a6dc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001dca:	e02a      	b.n	8001e22 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f008 faaf 	bl	800a330 <HAL_PCD_SuspendCallback>
    return;
 8001dd2:	e026      	b.n	8001e22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00f      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001df0:	b292      	uxth	r2, r2
 8001df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f008 fa6d 	bl	800a2d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001dfc:	e011      	b.n	8001e22 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00c      	beq.n	8001e22 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e20:	bf00      	nop
  }
}
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_PCD_SetAddress+0x1a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e013      	b.n	8001e6a <HAL_PCD_SetAddress+0x42>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f006 faa0 	bl	80083a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	4608      	mov	r0, r1
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4603      	mov	r3, r0
 8001e82:	70fb      	strb	r3, [r7, #3]
 8001e84:	460b      	mov	r3, r1
 8001e86:	803b      	strh	r3, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da0e      	bge.n	8001eb6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	705a      	strb	r2, [r3, #1]
 8001eb4:	e00e      	b.n	8001ed4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f003 0207 	and.w	r2, r3, #7
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ee0:	883a      	ldrh	r2, [r7, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	78ba      	ldrb	r2, [r7, #2]
 8001eea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	785b      	ldrb	r3, [r3, #1]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001efe:	78bb      	ldrb	r3, [r7, #2]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d102      	bne.n	8001f0a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_PCD_EP_Open+0xa6>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e00e      	b.n	8001f36 <HAL_PCD_EP_Open+0xc4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 f884 	bl	8006034 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f34:	7afb      	ldrb	r3, [r7, #11]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da0e      	bge.n	8001f70 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	705a      	strb	r2, [r3, #1]
 8001f6e:	e00e      	b.n	8001f8e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 0207 	and.w	r2, r3, #7
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_PCD_EP_Close+0x6a>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e00e      	b.n	8001fc6 <HAL_PCD_EP_Close+0x88>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 fbd0 	bl	800675c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	f003 0207 	and.w	r2, r3, #7
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2200      	movs	r2, #0
 800200c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	b2da      	uxtb	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800201a:	7afb      	ldrb	r3, [r7, #11]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	2b00      	cmp	r3, #0
 8002022:	d106      	bne.n	8002032 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6979      	ldr	r1, [r7, #20]
 800202a:	4618      	mov	r0, r3
 800202c:	f004 fd83 	bl	8006b36 <USB_EPStartXfer>
 8002030:	e005      	b.n	800203e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6979      	ldr	r1, [r7, #20]
 8002038:	4618      	mov	r0, r3
 800203a:	f004 fd7c 	bl	8006b36 <USB_EPStartXfer>
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 0207 	and.w	r2, r3, #7
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	460b      	mov	r3, r1
 8002086:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2201      	movs	r2, #1
 80020c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c4:	7afb      	ldrb	r3, [r7, #11]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020d0:	7afb      	ldrb	r3, [r7, #11]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6979      	ldr	r1, [r7, #20]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 fd28 	bl	8006b36 <USB_EPStartXfer>
 80020e6:	e005      	b.n	80020f4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6979      	ldr	r1, [r7, #20]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f004 fd21 	bl	8006b36 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 0207 	and.w	r2, r3, #7
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	d901      	bls.n	800211c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e03e      	b.n	800219a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800211c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002120:	2b00      	cmp	r3, #0
 8002122:	da0e      	bge.n	8002142 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	705a      	strb	r2, [r3, #1]
 8002140:	e00c      	b.n	800215c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_PCD_EP_SetStall+0x7e>
 8002178:	2302      	movs	r3, #2
 800217a:	e00e      	b.n	800219a <HAL_PCD_EP_SetStall+0x9c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68f9      	ldr	r1, [r7, #12]
 800218a:	4618      	mov	r0, r3
 800218c:	f006 f809 	bl	80081a2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d901      	bls.n	80021c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e040      	b.n	8002242 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da0e      	bge.n	80021e6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	705a      	strb	r2, [r3, #1]
 80021e4:	e00e      	b.n	8002204 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 0207 	and.w	r2, r3, #7
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_PCD_EP_ClrStall+0x82>
 8002220:	2302      	movs	r3, #2
 8002222:	e00e      	b.n	8002242 <HAL_PCD_EP_ClrStall+0xa0>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68f9      	ldr	r1, [r7, #12]
 8002232:	4618      	mov	r0, r3
 8002234:	f006 f806 	bl	8008244 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b096      	sub	sp, #88	; 0x58
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002252:	e39c      	b.n	800298e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800225c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002260:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800226e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 815e 	bne.w	8002534 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002278:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	d150      	bne.n	8002326 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002294:	81fb      	strh	r3, [r7, #14]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	89fb      	ldrh	r3, [r7, #14]
 800229c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3328      	adds	r3, #40	; 0x28
 80022ac:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	441a      	add	r2, r3
 80022e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022e4:	2100      	movs	r1, #0
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f007 ffdb 	bl	800a2a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 834a 	beq.w	800298e <PCD_EP_ISR_Handler+0x744>
 80022fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 8345 	bne.w	800298e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002310:	b2da      	uxtb	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b292      	uxth	r2, r2
 8002318:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002324:	e333      	b.n	800298e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800232c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002338:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800233c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002340:	2b00      	cmp	r3, #0
 8002342:	d032      	beq.n	80023aa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800234c:	b29b      	uxth	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	4413      	add	r3, r2
 800235e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002378:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800237a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800237c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800237e:	b29b      	uxth	r3, r3
 8002380:	f006 f88b 	bl	800849a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b29a      	uxth	r2, r3
 800238c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002390:	4013      	ands	r3, r2
 8002392:	823b      	strh	r3, [r7, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	8a3a      	ldrh	r2, [r7, #16]
 800239a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800239e:	b292      	uxth	r2, r2
 80023a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f007 ff50 	bl	800a248 <HAL_PCD_SetupStageCallback>
 80023a8:	e2f1      	b.n	800298e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023aa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f280 82ed 	bge.w	800298e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023c0:	4013      	ands	r3, r2
 80023c2:	83fb      	strh	r3, [r7, #30]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	8bfa      	ldrh	r2, [r7, #30]
 80023ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ce:	b292      	uxth	r2, r2
 80023d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d019      	beq.n	8002436 <PCD_EP_ISR_Handler+0x1ec>
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002410:	6959      	ldr	r1, [r3, #20]
 8002412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002414:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002418:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800241a:	b29b      	uxth	r3, r3
 800241c:	f006 f83d 	bl	800849a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	441a      	add	r2, r3
 800242a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800242e:	2100      	movs	r1, #0
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f007 ff1b 	bl	800a26c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 82a3 	bne.w	800298e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4413      	add	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b3e      	cmp	r3, #62	; 0x3e
 800246e:	d918      	bls.n	80024a2 <PCD_EP_ISR_Handler+0x258>
 8002470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	647b      	str	r3, [r7, #68]	; 0x44
 8002478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <PCD_EP_ISR_Handler+0x240>
 8002484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002486:	3b01      	subs	r3, #1
 8002488:	647b      	str	r3, [r7, #68]	; 0x44
 800248a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248c:	b29b      	uxth	r3, r3
 800248e:	029b      	lsls	r3, r3, #10
 8002490:	b29b      	uxth	r3, r3
 8002492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249a:	b29a      	uxth	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	801a      	strh	r2, [r3, #0]
 80024a0:	e029      	b.n	80024f6 <PCD_EP_ISR_Handler+0x2ac>
 80024a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d112      	bne.n	80024d0 <PCD_EP_ISR_Handler+0x286>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	e012      	b.n	80024f6 <PCD_EP_ISR_Handler+0x2ac>
 80024d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	647b      	str	r3, [r7, #68]	; 0x44
 80024d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <PCD_EP_ISR_Handler+0x2a0>
 80024e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e6:	3301      	adds	r3, #1
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	029b      	lsls	r3, r3, #10
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	827b      	strh	r3, [r7, #18]
 8002508:	8a7b      	ldrh	r3, [r7, #18]
 800250a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800250e:	827b      	strh	r3, [r7, #18]
 8002510:	8a7b      	ldrh	r3, [r7, #18]
 8002512:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002516:	827b      	strh	r3, [r7, #18]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	8a7b      	ldrh	r3, [r7, #18]
 800251e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800252a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252e:	b29b      	uxth	r3, r3
 8002530:	8013      	strh	r3, [r2, #0]
 8002532:	e22c      	b.n	800298e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002548:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800254c:	2b00      	cmp	r3, #0
 800254e:	f280 80f6 	bge.w	800273e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29a      	uxth	r2, r3
 8002564:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002568:	4013      	ands	r3, r2
 800256a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002580:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002584:	b292      	uxth	r2, r2
 8002586:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002588:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800259e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a0:	7b1b      	ldrb	r3, [r3, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d123      	bne.n	80025ee <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80025ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 808e 	beq.w	80026f4 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025de:	6959      	ldr	r1, [r3, #20]
 80025e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e2:	88da      	ldrh	r2, [r3, #6]
 80025e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025e8:	f005 ff57 	bl	800849a <USB_ReadPMA>
 80025ec:	e082      	b.n	80026f4 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f0:	78db      	ldrb	r3, [r3, #3]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d10a      	bne.n	800260c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025fa:	461a      	mov	r2, r3
 80025fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f9d3 	bl	80029aa <HAL_PCD_EP_DB_Receive>
 8002604:	4603      	mov	r3, r0
 8002606:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800260a:	e073      	b.n	80026f4 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002626:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	441a      	add	r2, r3
 8002638:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800263c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002648:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800264c:	b29b      	uxth	r3, r3
 800264e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d022      	beq.n	80026b0 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	4413      	add	r3, r2
 8002684:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002692:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02c      	beq.n	80026f4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a0:	6959      	ldr	r1, [r3, #20]
 80026a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a4:	891a      	ldrh	r2, [r3, #8]
 80026a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026aa:	f005 fef6 	bl	800849a <USB_ReadPMA>
 80026ae:	e021      	b.n	80026f4 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80026d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d009      	beq.n	80026f4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e6:	6959      	ldr	r1, [r3, #20]
 80026e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ea:	895a      	ldrh	r2, [r3, #10]
 80026ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026f0:	f005 fed3 	bl	800849a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026fc:	441a      	add	r2, r3
 80026fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002700:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800270a:	441a      	add	r2, r3
 800270c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <PCD_EP_ISR_Handler+0x4da>
 8002718:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800271c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d206      	bcs.n	8002732 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f007 fd9e 	bl	800a26c <HAL_PCD_DataOutStageCallback>
 8002730:	e005      	b.n	800273e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002738:	4618      	mov	r0, r3
 800273a:	f004 f9fc 	bl	8006b36 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800273e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8121 	beq.w	800298e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800274c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	441a      	add	r2, r3
 800278c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002798:	b29b      	uxth	r3, r3
 800279a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800279c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279e:	78db      	ldrb	r3, [r3, #3]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	f000 80a2 	beq.w	80028ea <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80027a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80027ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ae:	7b1b      	ldrb	r3, [r3, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8093 	beq.w	80028dc <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d046      	beq.n	8002850 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d126      	bne.n	8002818 <PCD_EP_ISR_Handler+0x5ce>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	4413      	add	r3, r2
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
 80027e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	00da      	lsls	r2, r3, #3
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	4413      	add	r3, r2
 80027ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	801a      	strh	r2, [r3, #0]
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800280c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002810:	b29a      	uxth	r2, r3
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	e061      	b.n	80028dc <PCD_EP_ISR_Handler+0x692>
 8002818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281a:	785b      	ldrb	r3, [r3, #1]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d15d      	bne.n	80028dc <PCD_EP_ISR_Handler+0x692>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282e:	b29b      	uxth	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	4413      	add	r3, r2
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	00da      	lsls	r2, r3, #3
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	4413      	add	r3, r2
 8002842:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	2200      	movs	r2, #0
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	e045      	b.n	80028dc <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d126      	bne.n	80028ac <PCD_EP_ISR_Handler+0x662>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286c:	b29b      	uxth	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	4413      	add	r3, r2
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
 8002876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	00da      	lsls	r2, r3, #3
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287e:	4413      	add	r3, r2
 8002880:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002884:	633b      	str	r3, [r7, #48]	; 0x30
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002890:	b29a      	uxth	r2, r3
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	801a      	strh	r2, [r3, #0]
 8002896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	e017      	b.n	80028dc <PCD_EP_ISR_Handler+0x692>
 80028ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d113      	bne.n	80028dc <PCD_EP_ISR_Handler+0x692>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c2:	4413      	add	r3, r2
 80028c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	00da      	lsls	r2, r3, #3
 80028cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	2200      	movs	r2, #0
 80028da:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f007 fcdd 	bl	800a2a2 <HAL_PCD_DataInStageCallback>
 80028e8:	e051      	b.n	800298e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80028ea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d144      	bne.n	8002980 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fe:	b29b      	uxth	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	4413      	add	r3, r2
 8002910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800291e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002926:	429a      	cmp	r2, r3
 8002928:	d907      	bls.n	800293a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800292a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002936:	619a      	str	r2, [r3, #24]
 8002938:	e002      	b.n	8002940 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800293a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f007 fca7 	bl	800a2a2 <HAL_PCD_DataInStageCallback>
 8002954:	e01b      	b.n	800298e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800295e:	441a      	add	r2, r3
 8002960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002962:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800296c:	441a      	add	r2, r3
 800296e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002970:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002978:	4618      	mov	r0, r3
 800297a:	f004 f8dc 	bl	8006b36 <USB_EPStartXfer>
 800297e:	e006      	b.n	800298e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002980:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002984:	461a      	mov	r2, r3
 8002986:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f917 	bl	8002bbc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002996:	b29b      	uxth	r3, r3
 8002998:	b21b      	sxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	f6ff ac5a 	blt.w	8002254 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3758      	adds	r7, #88	; 0x58
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b088      	sub	sp, #32
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	4613      	mov	r3, r2
 80029b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d07c      	beq.n	8002abc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	8b7b      	ldrh	r3, [r7, #26]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d306      	bcc.n	8002a00 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	8b7b      	ldrh	r3, [r7, #26]
 80029f8:	1ad2      	subs	r2, r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	619a      	str	r2, [r3, #24]
 80029fe:	e002      	b.n	8002a06 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d123      	bne.n	8002a56 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a28:	833b      	strh	r3, [r7, #24]
 8002a2a:	8b3b      	ldrh	r3, [r7, #24]
 8002a2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a30:	833b      	strh	r3, [r7, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	441a      	add	r2, r3
 8002a40:	8b3b      	ldrh	r3, [r7, #24]
 8002a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01f      	beq.n	8002aa0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	82fb      	strh	r3, [r7, #22]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	441a      	add	r2, r3
 8002a8a:	8afb      	ldrh	r3, [r7, #22]
 8002a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002aa0:	8b7b      	ldrh	r3, [r7, #26]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8085 	beq.w	8002bb2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6959      	ldr	r1, [r3, #20]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	891a      	ldrh	r2, [r3, #8]
 8002ab4:	8b7b      	ldrh	r3, [r7, #26]
 8002ab6:	f005 fcf0 	bl	800849a <USB_ReadPMA>
 8002aba:	e07a      	b.n	8002bb2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	8b7b      	ldrh	r3, [r7, #26]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d306      	bcc.n	8002afa <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	8b7b      	ldrh	r3, [r7, #26]
 8002af2:	1ad2      	subs	r2, r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	619a      	str	r2, [r3, #24]
 8002af8:	e002      	b.n	8002b00 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d123      	bne.n	8002b50 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	83fb      	strh	r3, [r7, #30]
 8002b24:	8bfb      	ldrh	r3, [r7, #30]
 8002b26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b2a:	83fb      	strh	r3, [r7, #30]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	8bfb      	ldrh	r3, [r7, #30]
 8002b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d11f      	bne.n	8002b9a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b74:	83bb      	strh	r3, [r7, #28]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	441a      	add	r2, r3
 8002b84:	8bbb      	ldrh	r3, [r7, #28]
 8002b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b9a:	8b7b      	ldrh	r3, [r7, #26]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6959      	ldr	r1, [r3, #20]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	895a      	ldrh	r2, [r3, #10]
 8002bac:	8b7b      	ldrh	r3, [r7, #26]
 8002bae:	f005 fc74 	bl	800849a <USB_ReadPMA>
    }
  }

  return count;
 8002bb2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b0a2      	sub	sp, #136	; 0x88
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 81c5 	beq.w	8002f60 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bfa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d907      	bls.n	8002c1a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c12:	1ad2      	subs	r2, r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	619a      	str	r2, [r3, #24]
 8002c18:	e002      	b.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f040 80b9 	bne.w	8002d9c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	785b      	ldrb	r3, [r3, #1]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d126      	bne.n	8002c80 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	4413      	add	r3, r2
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	00da      	lsls	r2, r3, #3
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	4413      	add	r3, r2
 8002c54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	801a      	strh	r2, [r3, #0]
 8002c7e:	e01a      	b.n	8002cb6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	785b      	ldrb	r3, [r3, #1]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d116      	bne.n	8002cb6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	4413      	add	r3, r2
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	00da      	lsls	r2, r3, #3
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	4413      	add	r3, r2
 8002caa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d126      	bne.n	8002d12 <HAL_PCD_EP_DB_Transmit+0x156>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4413      	add	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	00da      	lsls	r2, r3, #3
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	801a      	strh	r2, [r3, #0]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	801a      	strh	r2, [r3, #0]
 8002d10:	e017      	b.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x186>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d113      	bne.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x186>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	4413      	add	r3, r2
 8002d2a:	623b      	str	r3, [r7, #32]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	00da      	lsls	r2, r3, #3
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	4413      	add	r3, r2
 8002d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f007 faaa 	bl	800a2a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 82d2 	beq.w	80032fe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d74:	827b      	strh	r3, [r7, #18]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	441a      	add	r2, r3
 8002d84:	8a7b      	ldrh	r3, [r7, #18]
 8002d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	8013      	strh	r3, [r2, #0]
 8002d9a:	e2b0      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d021      	beq.n	8002dea <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	441a      	add	r2, r3
 8002dd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	f040 8284 	bne.w	80032fe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dfe:	441a      	add	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d309      	bcc.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2a:	1ad2      	subs	r2, r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	621a      	str	r2, [r3, #32]
 8002e30:	e015      	b.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d107      	bne.n	8002e4a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002e3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e3e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e48:	e009      	b.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d155      	bne.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x356>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7a:	4413      	add	r3, r2
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	00da      	lsls	r2, r3, #3
 8002e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e86:	4413      	add	r3, r2
 8002e88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e90:	2b3e      	cmp	r3, #62	; 0x3e
 8002e92:	d916      	bls.n	8002ec2 <HAL_PCD_EP_DB_Transmit+0x306>
 8002e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	029b      	lsls	r3, r3, #10
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebe:	801a      	strh	r2, [r3, #0]
 8002ec0:	e043      	b.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d112      	bne.n	8002eee <HAL_PCD_EP_DB_Transmit+0x332>
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	801a      	strh	r2, [r3, #0]
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	e02d      	b.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x348>
 8002efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f00:	3301      	adds	r3, #1
 8002f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	029b      	lsls	r3, r3, #10
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0e:	801a      	strh	r2, [r3, #0]
 8002f10:	e01b      	b.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d117      	bne.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2e:	4413      	add	r3, r2
 8002f30:	643b      	str	r3, [r7, #64]	; 0x40
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	00da      	lsls	r2, r3, #3
 8002f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f48:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6959      	ldr	r1, [r3, #20]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	891a      	ldrh	r2, [r3, #8]
 8002f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f005 fa5c 	bl	8008416 <USB_WritePMA>
 8002f5e:	e1ce      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	699a      	ldr	r2, [r3, #24]
 8002f8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d307      	bcc.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f9c:	1ad2      	subs	r2, r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	619a      	str	r2, [r3, #24]
 8002fa2:	e002      	b.n	8002faa <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 80c4 	bne.w	800313c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d126      	bne.n	800300a <HAL_PCD_EP_DB_Transmit+0x44e>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fd0:	4413      	add	r3, r2
 8002fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	00da      	lsls	r2, r3, #3
 8002fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fdc:	4413      	add	r3, r2
 8002fde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fe2:	667b      	str	r3, [r7, #100]	; 0x64
 8002fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003002:	b29a      	uxth	r2, r3
 8003004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003006:	801a      	strh	r2, [r3, #0]
 8003008:	e01a      	b.n	8003040 <HAL_PCD_EP_DB_Transmit+0x484>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	785b      	ldrb	r3, [r3, #1]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d116      	bne.n	8003040 <HAL_PCD_EP_DB_Transmit+0x484>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	673b      	str	r3, [r7, #112]	; 0x70
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003020:	b29b      	uxth	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003026:	4413      	add	r3, r2
 8003028:	673b      	str	r3, [r7, #112]	; 0x70
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	00da      	lsls	r2, r3, #3
 8003030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003032:	4413      	add	r3, r2
 8003034:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003038:	66fb      	str	r3, [r7, #108]	; 0x6c
 800303a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303c:	2200      	movs	r2, #0
 800303e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	785b      	ldrb	r3, [r3, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d12f      	bne.n	80030ae <HAL_PCD_EP_DB_Transmit+0x4f2>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305e:	b29b      	uxth	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003066:	4413      	add	r3, r2
 8003068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	00da      	lsls	r2, r3, #3
 8003072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003076:	4413      	add	r3, r2
 8003078:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800307c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800308c:	b29a      	uxth	r2, r3
 800308e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003092:	801a      	strh	r2, [r3, #0]
 8003094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030aa:	801a      	strh	r2, [r3, #0]
 80030ac:	e017      	b.n	80030de <HAL_PCD_EP_DB_Transmit+0x522>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	785b      	ldrb	r3, [r3, #1]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d113      	bne.n	80030de <HAL_PCD_EP_DB_Transmit+0x522>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030be:	b29b      	uxth	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030c4:	4413      	add	r3, r2
 80030c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	00da      	lsls	r2, r3, #3
 80030ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030d0:	4413      	add	r3, r2
 80030d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80030d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030da:	2200      	movs	r2, #0
 80030dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	4619      	mov	r1, r3
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f007 f8dc 	bl	800a2a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 8104 	bne.w	80032fe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003110:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	441a      	add	r2, r3
 8003122:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800312e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003136:	b29b      	uxth	r3, r3
 8003138:	8013      	strh	r3, [r2, #0]
 800313a:	e0e0      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d121      	bne.n	800318a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	441a      	add	r2, r3
 8003172:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800317e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003186:	b29b      	uxth	r3, r3
 8003188:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 80b4 	bne.w	80032fe <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800319e:	441a      	add	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031ac:	441a      	add	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	6a1a      	ldr	r2, [r3, #32]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d309      	bcc.n	80031d2 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	6a1a      	ldr	r2, [r3, #32]
 80031c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ca:	1ad2      	subs	r2, r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	621a      	str	r2, [r3, #32]
 80031d0:	e015      	b.n	80031fe <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d107      	bne.n	80031ea <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80031da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031e8:	e009      	b.n	80031fe <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2200      	movs	r2, #0
 80031f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	663b      	str	r3, [r7, #96]	; 0x60
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	785b      	ldrb	r3, [r3, #1]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d155      	bne.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	65bb      	str	r3, [r7, #88]	; 0x58
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003220:	4413      	add	r3, r2
 8003222:	65bb      	str	r3, [r7, #88]	; 0x58
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	00da      	lsls	r2, r3, #3
 800322a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800322c:	4413      	add	r3, r2
 800322e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003232:	657b      	str	r3, [r7, #84]	; 0x54
 8003234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003236:	2b3e      	cmp	r3, #62	; 0x3e
 8003238:	d916      	bls.n	8003268 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800323a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	677b      	str	r3, [r7, #116]	; 0x74
 8003240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_PCD_EP_DB_Transmit+0x694>
 800324a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800324c:	3b01      	subs	r3, #1
 800324e:	677b      	str	r3, [r7, #116]	; 0x74
 8003250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003252:	b29b      	uxth	r3, r3
 8003254:	029b      	lsls	r3, r3, #10
 8003256:	b29b      	uxth	r3, r3
 8003258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800325c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003260:	b29a      	uxth	r2, r3
 8003262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003264:	801a      	strh	r2, [r3, #0]
 8003266:	e040      	b.n	80032ea <HAL_PCD_EP_DB_Transmit+0x72e>
 8003268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326a:	2b00      	cmp	r3, #0
 800326c:	d112      	bne.n	8003294 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800326e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003278:	b29a      	uxth	r2, r3
 800327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327c:	801a      	strh	r2, [r3, #0]
 800327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800328c:	b29a      	uxth	r2, r3
 800328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003290:	801a      	strh	r2, [r3, #0]
 8003292:	e02a      	b.n	80032ea <HAL_PCD_EP_DB_Transmit+0x72e>
 8003294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	677b      	str	r3, [r7, #116]	; 0x74
 800329a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_PCD_EP_DB_Transmit+0x6ee>
 80032a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a6:	3301      	adds	r3, #1
 80032a8:	677b      	str	r3, [r7, #116]	; 0x74
 80032aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	029b      	lsls	r3, r3, #10
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	e018      	b.n	80032ea <HAL_PCD_EP_DB_Transmit+0x72e>
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d114      	bne.n	80032ea <HAL_PCD_EP_DB_Transmit+0x72e>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032ce:	4413      	add	r3, r2
 80032d0:	663b      	str	r3, [r7, #96]	; 0x60
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	00da      	lsls	r2, r3, #3
 80032d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032da:	4413      	add	r3, r2
 80032dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	6959      	ldr	r1, [r3, #20]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	895a      	ldrh	r2, [r3, #10]
 80032f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f005 f88c 	bl	8008416 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003318:	823b      	strh	r3, [r7, #16]
 800331a:	8a3b      	ldrh	r3, [r7, #16]
 800331c:	f083 0310 	eor.w	r3, r3, #16
 8003320:	823b      	strh	r3, [r7, #16]
 8003322:	8a3b      	ldrh	r3, [r7, #16]
 8003324:	f083 0320 	eor.w	r3, r3, #32
 8003328:	823b      	strh	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	441a      	add	r2, r3
 8003338:	8a3b      	ldrh	r3, [r7, #16]
 800333a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334a:	b29b      	uxth	r3, r3
 800334c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3788      	adds	r7, #136	; 0x88
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	4613      	mov	r3, r2
 8003368:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e009      	b.n	80033a2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800338e:	897a      	ldrh	r2, [r7, #10]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033a2:	893b      	ldrh	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2200      	movs	r2, #0
 80033ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	80da      	strh	r2, [r3, #6]
 80033b6:	e00b      	b.n	80033d0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2201      	movs	r2, #1
 80033bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003402:	b29b      	uxth	r3, r3
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003416:	b29b      	uxth	r3, r3
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d141      	bne.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003442:	4b4b      	ldr	r3, [pc, #300]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d131      	bne.n	80034b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003450:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003456:	4a46      	ldr	r2, [pc, #280]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800345c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003468:	4a41      	ldr	r2, [pc, #260]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800346e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003470:	4b40      	ldr	r3, [pc, #256]	; (8003574 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2232      	movs	r2, #50	; 0x32
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	4a3f      	ldr	r2, [pc, #252]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	0c9b      	lsrs	r3, r3, #18
 8003482:	3301      	adds	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003486:	e002      	b.n	800348e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3b01      	subs	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800348e:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349a:	d102      	bne.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f2      	bne.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d158      	bne.n	8003562 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e057      	b.n	8003564 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034b4:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ba:	4a2d      	ldr	r2, [pc, #180]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034c4:	e04d      	b.n	8003562 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034cc:	d141      	bne.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ce:	4b28      	ldr	r3, [pc, #160]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d131      	bne.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034e2:	4a23      	ldr	r2, [pc, #140]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ec:	4b20      	ldr	r3, [pc, #128]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034f4:	4a1e      	ldr	r2, [pc, #120]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2232      	movs	r2, #50	; 0x32
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	0c9b      	lsrs	r3, r3, #18
 800350e:	3301      	adds	r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003512:	e002      	b.n	800351a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3b01      	subs	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003526:	d102      	bne.n	800352e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f2      	bne.n	8003514 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d112      	bne.n	8003562 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e011      	b.n	8003564 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003550:	e007      	b.n	8003562 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003560:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40007000 	.word	0x40007000
 8003574:	20000028 	.word	0x20000028
 8003578:	431bde83 	.word	0x431bde83

0800357c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e306      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d075      	beq.n	8003686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359a:	4b97      	ldr	r3, [pc, #604]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a4:	4b94      	ldr	r3, [pc, #592]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d102      	bne.n	80035ba <HAL_RCC_OscConfig+0x3e>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d002      	beq.n	80035c0 <HAL_RCC_OscConfig+0x44>
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d10b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	4b8d      	ldr	r3, [pc, #564]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05b      	beq.n	8003684 <HAL_RCC_OscConfig+0x108>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d157      	bne.n	8003684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e2e1      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x74>
 80035e2:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a84      	ldr	r2, [pc, #528]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x98>
 80035fa:	4b7f      	ldr	r3, [pc, #508]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7e      	ldr	r2, [pc, #504]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b7c      	ldr	r3, [pc, #496]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a7b      	ldr	r2, [pc, #492]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 8003614:	4b78      	ldr	r3, [pc, #480]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a77      	ldr	r2, [pc, #476]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b75      	ldr	r3, [pc, #468]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a74      	ldr	r2, [pc, #464]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd fe5c 	bl	80012f0 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fe58 	bl	80012f0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e2a6      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xc0>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fd fe48 	bl	80012f0 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fd fe44 	bl	80012f0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e292      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003676:	4b60      	ldr	r3, [pc, #384]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0xe8>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d075      	beq.n	800377e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003692:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800369c:	4b56      	ldr	r3, [pc, #344]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	d102      	bne.n	80036b2 <HAL_RCC_OscConfig+0x136>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_OscConfig+0x13c>
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d11f      	bne.n	80036f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b8:	4b4f      	ldr	r3, [pc, #316]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_OscConfig+0x154>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e265      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b49      	ldr	r3, [pc, #292]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	4946      	ldr	r1, [pc, #280]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036e4:	4b45      	ldr	r3, [pc, #276]	; (80037fc <HAL_RCC_OscConfig+0x280>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fdb5 	bl	8001258 <HAL_InitTick>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d043      	beq.n	800377c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e251      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d023      	beq.n	8003748 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003700:	4b3d      	ldr	r3, [pc, #244]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a3c      	ldr	r2, [pc, #240]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fd fdf0 	bl	80012f0 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003714:	f7fd fdec 	bl	80012f0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e23a      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003726:	4b34      	ldr	r3, [pc, #208]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003732:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	061b      	lsls	r3, r3, #24
 8003740:	492d      	ldr	r1, [pc, #180]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
 8003746:	e01a      	b.n	800377e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003748:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2a      	ldr	r2, [pc, #168]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800374e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fd fdcc 	bl	80012f0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375c:	f7fd fdc8 	bl	80012f0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e216      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800376e:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x1e0>
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800377c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d041      	beq.n	800380e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01c      	beq.n	80037cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003798:	4a17      	ldr	r2, [pc, #92]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fd fda5 	bl	80012f0 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037aa:	f7fd fda1 	bl	80012f0 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e1ef      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80037be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ef      	beq.n	80037aa <HAL_RCC_OscConfig+0x22e>
 80037ca:	e020      	b.n	800380e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <HAL_RCC_OscConfig+0x27c>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fd fd88 	bl	80012f0 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037e2:	e00d      	b.n	8003800 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fd fd84 	bl	80012f0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d906      	bls.n	8003800 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1d2      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003800:	4b8c      	ldr	r3, [pc, #560]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1ea      	bne.n	80037e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80a6 	beq.w	8003968 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003820:	4b84      	ldr	r3, [pc, #528]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_OscConfig+0x2b4>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x2b6>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	4b7f      	ldr	r3, [pc, #508]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383a:	4a7e      	ldr	r2, [pc, #504]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003840:	6593      	str	r3, [r2, #88]	; 0x58
 8003842:	4b7c      	ldr	r3, [pc, #496]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800384e:	2301      	movs	r3, #1
 8003850:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003852:	4b79      	ldr	r3, [pc, #484]	; (8003a38 <HAL_RCC_OscConfig+0x4bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d118      	bne.n	8003890 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800385e:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <HAL_RCC_OscConfig+0x4bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a75      	ldr	r2, [pc, #468]	; (8003a38 <HAL_RCC_OscConfig+0x4bc>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7fd fd41 	bl	80012f0 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003872:	f7fd fd3d 	bl	80012f0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e18b      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003884:	4b6c      	ldr	r3, [pc, #432]	; (8003a38 <HAL_RCC_OscConfig+0x4bc>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d108      	bne.n	80038aa <HAL_RCC_OscConfig+0x32e>
 8003898:	4b66      	ldr	r3, [pc, #408]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	4a65      	ldr	r2, [pc, #404]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a8:	e024      	b.n	80038f4 <HAL_RCC_OscConfig+0x378>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d110      	bne.n	80038d4 <HAL_RCC_OscConfig+0x358>
 80038b2:	4b60      	ldr	r3, [pc, #384]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	4a5e      	ldr	r2, [pc, #376]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038ba:	f043 0304 	orr.w	r3, r3, #4
 80038be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c2:	4b5c      	ldr	r3, [pc, #368]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	4a5a      	ldr	r2, [pc, #360]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d2:	e00f      	b.n	80038f4 <HAL_RCC_OscConfig+0x378>
 80038d4:	4b57      	ldr	r3, [pc, #348]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	4a56      	ldr	r2, [pc, #344]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e4:	4b53      	ldr	r3, [pc, #332]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	4a52      	ldr	r2, [pc, #328]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d016      	beq.n	800392a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fd fcf8 	bl	80012f0 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fd fcf4 	bl	80012f0 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e140      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391a:	4b46      	ldr	r3, [pc, #280]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ed      	beq.n	8003904 <HAL_RCC_OscConfig+0x388>
 8003928:	e015      	b.n	8003956 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fd fce1 	bl	80012f0 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fd fcdd 	bl	80012f0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e129      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003948:	4b3a      	ldr	r3, [pc, #232]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ed      	bne.n	8003932 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003956:	7ffb      	ldrb	r3, [r7, #31]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	4b35      	ldr	r3, [pc, #212]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d03c      	beq.n	80039ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 800397e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003982:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd fcb0 	bl	80012f0 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003994:	f7fd fcac 	bl	80012f0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e0fa      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039a6:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80039a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ef      	beq.n	8003994 <HAL_RCC_OscConfig+0x418>
 80039b4:	e01b      	b.n	80039ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039b6:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80039b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7fd fc93 	bl	80012f0 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ce:	f7fd fc8f 	bl	80012f0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e0dd      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039e0:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80039e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1ef      	bne.n	80039ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80d1 	beq.w	8003b9a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039f8:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	f000 808b 	beq.w	8003b1c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d15e      	bne.n	8003acc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <HAL_RCC_OscConfig+0x4b8>)
 8003a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7fd fc69 	bl	80012f0 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a20:	e00c      	b.n	8003a3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fd fc65 	bl	80012f0 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d905      	bls.n	8003a3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0b3      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ec      	bne.n	8003a22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a48:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <HAL_RCC_OscConfig+0x62c>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6a11      	ldr	r1, [r2, #32]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	0112      	lsls	r2, r2, #4
 8003a5c:	4311      	orrs	r1, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a62:	0212      	lsls	r2, r2, #8
 8003a64:	4311      	orrs	r1, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a6a:	0852      	lsrs	r2, r2, #1
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	0552      	lsls	r2, r2, #21
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a76:	0852      	lsrs	r2, r2, #1
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	0652      	lsls	r2, r2, #25
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a82:	06d2      	lsls	r2, r2, #27
 8003a84:	430a      	orrs	r2, r1
 8003a86:	4947      	ldr	r1, [pc, #284]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8c:	4b45      	ldr	r3, [pc, #276]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a44      	ldr	r2, [pc, #272]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a98:	4b42      	ldr	r3, [pc, #264]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a41      	ldr	r2, [pc, #260]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fd fc24 	bl	80012f0 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fd fc20 	bl	80012f0 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e06e      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abe:	4b39      	ldr	r3, [pc, #228]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x530>
 8003aca:	e066      	b.n	8003b9a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003acc:	4b35      	ldr	r3, [pc, #212]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a34      	ldr	r2, [pc, #208]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a31      	ldr	r2, [pc, #196]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ae4:	4b2f      	ldr	r3, [pc, #188]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a2e      	ldr	r2, [pc, #184]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003aea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fd fbfc 	bl	80012f0 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fd fbf8 	bl	80012f0 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e046      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0e:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x580>
 8003b1a:	e03e      	b.n	8003b9a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e039      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b28:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <HAL_RCC_OscConfig+0x628>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0203 	and.w	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d12c      	bne.n	8003b96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	3b01      	subs	r3, #1
 8003b48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d123      	bne.n	8003b96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d11b      	bne.n	8003b96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d113      	bne.n	8003b96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d109      	bne.n	8003b96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	019f800c 	.word	0x019f800c

08003bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e11e      	b.n	8003e02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b91      	ldr	r3, [pc, #580]	; (8003e0c <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d910      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b8e      	ldr	r3, [pc, #568]	; (8003e0c <HAL_RCC_ClockConfig+0x260>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 020f 	bic.w	r2, r3, #15
 8003bda:	498c      	ldr	r1, [pc, #560]	; (8003e0c <HAL_RCC_ClockConfig+0x260>)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b8a      	ldr	r3, [pc, #552]	; (8003e0c <HAL_RCC_ClockConfig+0x260>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e106      	b.n	8003e02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d073      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d129      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c08:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0f4      	b.n	8003e02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c18:	f000 f966 	bl	8003ee8 <RCC_GetSysClockFreqFromPLLSource>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4a7c      	ldr	r2, [pc, #496]	; (8003e14 <HAL_RCC_ClockConfig+0x268>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d93f      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c26:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d033      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d12f      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c46:	4b72      	ldr	r3, [pc, #456]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4e:	4a70      	ldr	r2, [pc, #448]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e024      	b.n	8003ca6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c64:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0c6      	b.n	8003e02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c74:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0be      	b.n	8003e02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c84:	f000 f8ce 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4a61      	ldr	r2, [pc, #388]	; (8003e14 <HAL_RCC_ClockConfig+0x268>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d909      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c92:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c9a:	4a5d      	ldr	r2, [pc, #372]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	4b5a      	ldr	r3, [pc, #360]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4957      	ldr	r1, [pc, #348]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb8:	f7fd fb1a 	bl	80012f0 <HAL_GetTick>
 8003cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f7fd fb16 	bl	80012f0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e095      	b.n	8003e02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	4b4e      	ldr	r3, [pc, #312]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 020c 	and.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d1eb      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d023      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d00:	4b43      	ldr	r3, [pc, #268]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a42      	ldr	r2, [pc, #264]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003d06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d18:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d20:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003d22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4936      	ldr	r1, [pc, #216]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d105      	bne.n	8003d4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d42:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	4a32      	ldr	r2, [pc, #200]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <HAL_RCC_ClockConfig+0x260>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d21d      	bcs.n	8003d98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f023 020f 	bic.w	r2, r3, #15
 8003d64:	4929      	ldr	r1, [pc, #164]	; (8003e0c <HAL_RCC_ClockConfig+0x260>)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d6c:	f7fd fac0 	bl	80012f0 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d74:	f7fd fabc 	bl	80012f0 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e03b      	b.n	8003e02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <HAL_RCC_ClockConfig+0x260>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1ed      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da4:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4917      	ldr	r1, [pc, #92]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	490f      	ldr	r1, [pc, #60]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dd6:	f000 f825 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_RCC_ClockConfig+0x264>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	490c      	ldr	r1, [pc, #48]	; (8003e18 <HAL_RCC_ClockConfig+0x26c>)
 8003de8:	5ccb      	ldrb	r3, [r1, r3]
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	fa22 f303 	lsr.w	r3, r2, r3
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <HAL_RCC_ClockConfig+0x270>)
 8003df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <HAL_RCC_ClockConfig+0x274>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fd fa2c 	bl	8001258 <HAL_InitTick>
 8003e00:	4603      	mov	r3, r0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40022000 	.word	0x40022000
 8003e10:	40021000 	.word	0x40021000
 8003e14:	04c4b400 	.word	0x04c4b400
 8003e18:	0800a8b0 	.word	0x0800a8b0
 8003e1c:	20000028 	.word	0x20000028
 8003e20:	2000002c 	.word	0x2000002c

08003e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d102      	bne.n	8003e3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	e047      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d102      	bne.n	8003e4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e48:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	e03e      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e4e:	4b23      	ldr	r3, [pc, #140]	; (8003edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b0c      	cmp	r3, #12
 8003e58:	d136      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e64:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	3301      	adds	r3, #1
 8003e70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d10c      	bne.n	8003e92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e78:	4a1a      	ldr	r2, [pc, #104]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	4a16      	ldr	r2, [pc, #88]	; (8003edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e82:	68d2      	ldr	r2, [r2, #12]
 8003e84:	0a12      	lsrs	r2, r2, #8
 8003e86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	617b      	str	r3, [r7, #20]
      break;
 8003e90:	e00c      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e92:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e9c:	68d2      	ldr	r2, [r2, #12]
 8003e9e:	0a12      	lsrs	r2, r2, #8
 8003ea0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ea4:	fb02 f303 	mul.w	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
      break;
 8003eaa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	0e5b      	lsrs	r3, r3, #25
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e001      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ecc:	693b      	ldr	r3, [r7, #16]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	00f42400 	.word	0x00f42400
 8003ee4:	007a1200 	.word	0x007a1200

08003ee8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eee:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3301      	adds	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d10c      	bne.n	8003f26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f0c:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f16:	68d2      	ldr	r2, [r2, #12]
 8003f18:	0a12      	lsrs	r2, r2, #8
 8003f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	617b      	str	r3, [r7, #20]
    break;
 8003f24:	e00c      	b.n	8003f40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f26:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	4a0e      	ldr	r2, [pc, #56]	; (8003f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f30:	68d2      	ldr	r2, [r2, #12]
 8003f32:	0a12      	lsrs	r2, r2, #8
 8003f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]
    break;
 8003f3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	0e5b      	lsrs	r3, r3, #25
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f5a:	687b      	ldr	r3, [r7, #4]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	007a1200 	.word	0x007a1200
 8003f70:	00f42400 	.word	0x00f42400

08003f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f80:	2300      	movs	r3, #0
 8003f82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8098 	beq.w	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f96:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10d      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	4a3f      	ldr	r2, [pc, #252]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6593      	str	r3, [r2, #88]	; 0x58
 8003fae:	4b3d      	ldr	r3, [pc, #244]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fbe:	4b3a      	ldr	r3, [pc, #232]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a39      	ldr	r2, [pc, #228]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fca:	f7fd f991 	bl	80012f0 <HAL_GetTick>
 8003fce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd0:	e009      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fd f98d 	bl	80012f0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d902      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	74fb      	strb	r3, [r7, #19]
        break;
 8003fe4:	e005      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fe6:	4b30      	ldr	r3, [pc, #192]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ef      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d159      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ff8:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004002:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01e      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	429a      	cmp	r2, r3
 8004012:	d019      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d016      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fd f94d 	bl	80012f0 <HAL_GetTick>
 8004056:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004058:	e00b      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405a:	f7fd f949 	bl	80012f0 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f241 3288 	movw	r2, #5000	; 0x1388
 8004068:	4293      	cmp	r3, r2
 800406a:	d902      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	74fb      	strb	r3, [r7, #19]
            break;
 8004070:	e006      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ec      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	4903      	ldr	r1, [pc, #12]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800409c:	e008      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	74bb      	strb	r3, [r7, #18]
 80040a2:	e005      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b0:	7c7b      	ldrb	r3, [r7, #17]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b6:	4ba6      	ldr	r3, [pc, #664]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	4aa5      	ldr	r2, [pc, #660]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ce:	4ba0      	ldr	r3, [pc, #640]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f023 0203 	bic.w	r2, r3, #3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	499c      	ldr	r1, [pc, #624]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040f0:	4b97      	ldr	r3, [pc, #604]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f023 020c 	bic.w	r2, r3, #12
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	4994      	ldr	r1, [pc, #592]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004112:	4b8f      	ldr	r3, [pc, #572]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	498b      	ldr	r1, [pc, #556]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004134:	4b86      	ldr	r3, [pc, #536]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	4983      	ldr	r1, [pc, #524]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004156:	4b7e      	ldr	r3, [pc, #504]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	497a      	ldr	r1, [pc, #488]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004178:	4b75      	ldr	r3, [pc, #468]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	4972      	ldr	r1, [pc, #456]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800419a:	4b6d      	ldr	r3, [pc, #436]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	4969      	ldr	r1, [pc, #420]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041bc:	4b64      	ldr	r3, [pc, #400]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4961      	ldr	r1, [pc, #388]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041de:	4b5c      	ldr	r3, [pc, #368]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	4958      	ldr	r1, [pc, #352]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d015      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	4950      	ldr	r1, [pc, #320]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421e:	d105      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004220:	4b4b      	ldr	r3, [pc, #300]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a4a      	ldr	r2, [pc, #296]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800422a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004234:	2b00      	cmp	r3, #0
 8004236:	d015      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004238:	4b45      	ldr	r3, [pc, #276]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	4942      	ldr	r1, [pc, #264]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004256:	d105      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004258:	4b3d      	ldr	r3, [pc, #244]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a3c      	ldr	r2, [pc, #240]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004262:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004270:	4b37      	ldr	r3, [pc, #220]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	4934      	ldr	r1, [pc, #208]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800428e:	d105      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004290:	4b2f      	ldr	r3, [pc, #188]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a2e      	ldr	r2, [pc, #184]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800429a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042a8:	4b29      	ldr	r3, [pc, #164]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	4926      	ldr	r1, [pc, #152]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042c6:	d105      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c8:	4b21      	ldr	r3, [pc, #132]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a20      	ldr	r2, [pc, #128]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	4918      	ldr	r1, [pc, #96]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fe:	d105      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004300:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a12      	ldr	r2, [pc, #72]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800430a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d015      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004318:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	490a      	ldr	r1, [pc, #40]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004336:	d105      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4a04      	ldr	r2, [pc, #16]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004342:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004344:	7cbb      	ldrb	r3, [r7, #18]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000

08004354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e049      	b.n	80043fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fdbe 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f001 f8e6 	bl	8005564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d001      	beq.n	800441c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e04a      	b.n	80044b2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a21      	ldr	r2, [pc, #132]	; (80044c0 <HAL_TIM_Base_Start_IT+0xbc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d018      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x6c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d013      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x6c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x6c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x6c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_TIM_Base_Start_IT+0xc8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x6c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d115      	bne.n	800449c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004478:	4013      	ands	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b06      	cmp	r3, #6
 8004480:	d015      	beq.n	80044ae <HAL_TIM_Base_Start_IT+0xaa>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004488:	d011      	beq.n	80044ae <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449a:	e008      	b.n	80044ae <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e000      	b.n	80044b0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	40013400 	.word	0x40013400
 80044d0:	40014000 	.word	0x40014000
 80044d4:	00010007 	.word	0x00010007

080044d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e049      	b.n	800457e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc fbf4 	bl	8000cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	4619      	mov	r1, r3
 8004516:	4610      	mov	r0, r2
 8004518:	f001 f824 	bl	8005564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_TIM_PWM_Start+0x24>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e03c      	b.n	8004626 <HAL_TIM_PWM_Start+0x9e>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d109      	bne.n	80045c6 <HAL_TIM_PWM_Start+0x3e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	e02f      	b.n	8004626 <HAL_TIM_PWM_Start+0x9e>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d109      	bne.n	80045e0 <HAL_TIM_PWM_Start+0x58>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e022      	b.n	8004626 <HAL_TIM_PWM_Start+0x9e>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d109      	bne.n	80045fa <HAL_TIM_PWM_Start+0x72>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e015      	b.n	8004626 <HAL_TIM_PWM_Start+0x9e>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_PWM_Start+0x8c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e008      	b.n	8004626 <HAL_TIM_PWM_Start+0x9e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e097      	b.n	800475e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_TIM_PWM_Start+0xb6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463c:	e023      	b.n	8004686 <HAL_TIM_PWM_Start+0xfe>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d104      	bne.n	800464e <HAL_TIM_PWM_Start+0xc6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464c:	e01b      	b.n	8004686 <HAL_TIM_PWM_Start+0xfe>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d104      	bne.n	800465e <HAL_TIM_PWM_Start+0xd6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800465c:	e013      	b.n	8004686 <HAL_TIM_PWM_Start+0xfe>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0xe6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800466c:	e00b      	b.n	8004686 <HAL_TIM_PWM_Start+0xfe>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b10      	cmp	r3, #16
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start+0xf6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800467c:	e003      	b.n	8004686 <HAL_TIM_PWM_Start+0xfe>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2201      	movs	r2, #1
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f001 faee 	bl	8005c70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a33      	ldr	r2, [pc, #204]	; (8004768 <HAL_TIM_PWM_Start+0x1e0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x13e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a32      	ldr	r2, [pc, #200]	; (800476c <HAL_TIM_PWM_Start+0x1e4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x13e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a30      	ldr	r2, [pc, #192]	; (8004770 <HAL_TIM_PWM_Start+0x1e8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x13e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2f      	ldr	r2, [pc, #188]	; (8004774 <HAL_TIM_PWM_Start+0x1ec>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x13e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2d      	ldr	r2, [pc, #180]	; (8004778 <HAL_TIM_PWM_Start+0x1f0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_PWM_Start+0x142>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_TIM_PWM_Start+0x144>
 80046ca:	2300      	movs	r3, #0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a20      	ldr	r2, [pc, #128]	; (8004768 <HAL_TIM_PWM_Start+0x1e0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d018      	beq.n	800471c <HAL_TIM_PWM_Start+0x194>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f2:	d013      	beq.n	800471c <HAL_TIM_PWM_Start+0x194>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a20      	ldr	r2, [pc, #128]	; (800477c <HAL_TIM_PWM_Start+0x1f4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00e      	beq.n	800471c <HAL_TIM_PWM_Start+0x194>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1f      	ldr	r2, [pc, #124]	; (8004780 <HAL_TIM_PWM_Start+0x1f8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_TIM_PWM_Start+0x194>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a17      	ldr	r2, [pc, #92]	; (800476c <HAL_TIM_PWM_Start+0x1e4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIM_PWM_Start+0x194>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a16      	ldr	r2, [pc, #88]	; (8004770 <HAL_TIM_PWM_Start+0x1e8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d115      	bne.n	8004748 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	4b18      	ldr	r3, [pc, #96]	; (8004784 <HAL_TIM_PWM_Start+0x1fc>)
 8004724:	4013      	ands	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b06      	cmp	r3, #6
 800472c:	d015      	beq.n	800475a <HAL_TIM_PWM_Start+0x1d2>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004734:	d011      	beq.n	800475a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	e008      	b.n	800475a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e000      	b.n	800475c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40013400 	.word	0x40013400
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	00010007 	.word	0x00010007

08004788 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e03c      	b.n	800482e <HAL_TIM_PWM_Start_DMA+0xa6>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d109      	bne.n	80047ce <HAL_TIM_PWM_Start_DMA+0x46>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e02f      	b.n	800482e <HAL_TIM_PWM_Start_DMA+0xa6>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d109      	bne.n	80047e8 <HAL_TIM_PWM_Start_DMA+0x60>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e022      	b.n	800482e <HAL_TIM_PWM_Start_DMA+0xa6>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d109      	bne.n	8004802 <HAL_TIM_PWM_Start_DMA+0x7a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	e015      	b.n	800482e <HAL_TIM_PWM_Start_DMA+0xa6>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b10      	cmp	r3, #16
 8004806:	d109      	bne.n	800481c <HAL_TIM_PWM_Start_DMA+0x94>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e008      	b.n	800482e <HAL_TIM_PWM_Start_DMA+0xa6>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004832:	2302      	movs	r3, #2
 8004834:	e1a6      	b.n	8004b84 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <HAL_TIM_PWM_Start_DMA+0xc8>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	bf0c      	ite	eq
 8004848:	2301      	moveq	r3, #1
 800484a:	2300      	movne	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e03c      	b.n	80048ca <HAL_TIM_PWM_Start_DMA+0x142>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b04      	cmp	r3, #4
 8004854:	d109      	bne.n	800486a <HAL_TIM_PWM_Start_DMA+0xe2>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	e02f      	b.n	80048ca <HAL_TIM_PWM_Start_DMA+0x142>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d109      	bne.n	8004884 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e022      	b.n	80048ca <HAL_TIM_PWM_Start_DMA+0x142>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b0c      	cmp	r3, #12
 8004888:	d109      	bne.n	800489e <HAL_TIM_PWM_Start_DMA+0x116>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	bf0c      	ite	eq
 8004896:	2301      	moveq	r3, #1
 8004898:	2300      	movne	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	e015      	b.n	80048ca <HAL_TIM_PWM_Start_DMA+0x142>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d109      	bne.n	80048b8 <HAL_TIM_PWM_Start_DMA+0x130>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e008      	b.n	80048ca <HAL_TIM_PWM_Start_DMA+0x142>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d034      	beq.n	8004938 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start_DMA+0x156>
 80048d4:	887b      	ldrh	r3, [r7, #2]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e152      	b.n	8004b84 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <HAL_TIM_PWM_Start_DMA+0x166>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ec:	e026      	b.n	800493c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d104      	bne.n	80048fe <HAL_TIM_PWM_Start_DMA+0x176>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fc:	e01e      	b.n	800493c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d104      	bne.n	800490e <HAL_TIM_PWM_Start_DMA+0x186>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800490c:	e016      	b.n	800493c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b0c      	cmp	r3, #12
 8004912:	d104      	bne.n	800491e <HAL_TIM_PWM_Start_DMA+0x196>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800491c:	e00e      	b.n	800493c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b10      	cmp	r3, #16
 8004922:	d104      	bne.n	800492e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800492c:	e006      	b.n	800493c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004936:	e001      	b.n	800493c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e123      	b.n	8004b84 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b0c      	cmp	r3, #12
 8004940:	f200 80ae 	bhi.w	8004aa0 <HAL_TIM_PWM_Start_DMA+0x318>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	08004981 	.word	0x08004981
 8004950:	08004aa1 	.word	0x08004aa1
 8004954:	08004aa1 	.word	0x08004aa1
 8004958:	08004aa1 	.word	0x08004aa1
 800495c:	080049c9 	.word	0x080049c9
 8004960:	08004aa1 	.word	0x08004aa1
 8004964:	08004aa1 	.word	0x08004aa1
 8004968:	08004aa1 	.word	0x08004aa1
 800496c:	08004a11 	.word	0x08004a11
 8004970:	08004aa1 	.word	0x08004aa1
 8004974:	08004aa1 	.word	0x08004aa1
 8004978:	08004aa1 	.word	0x08004aa1
 800497c:	08004a59 	.word	0x08004a59
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	4a81      	ldr	r2, [pc, #516]	; (8004b8c <HAL_TIM_PWM_Start_DMA+0x404>)
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	4a80      	ldr	r2, [pc, #512]	; (8004b90 <HAL_TIM_PWM_Start_DMA+0x408>)
 800498e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	4a7f      	ldr	r2, [pc, #508]	; (8004b94 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004996:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3334      	adds	r3, #52	; 0x34
 80049a4:	461a      	mov	r2, r3
 80049a6:	887b      	ldrh	r3, [r7, #2]
 80049a8:	f7fc fdbd 	bl	8001526 <HAL_DMA_Start_IT>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e0e6      	b.n	8004b84 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c4:	60da      	str	r2, [r3, #12]
      break;
 80049c6:	e06e      	b.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	4a6f      	ldr	r2, [pc, #444]	; (8004b8c <HAL_TIM_PWM_Start_DMA+0x404>)
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	4a6e      	ldr	r2, [pc, #440]	; (8004b90 <HAL_TIM_PWM_Start_DMA+0x408>)
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	4a6d      	ldr	r2, [pc, #436]	; (8004b94 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80049de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3338      	adds	r3, #56	; 0x38
 80049ec:	461a      	mov	r2, r3
 80049ee:	887b      	ldrh	r3, [r7, #2]
 80049f0:	f7fc fd99 	bl	8001526 <HAL_DMA_Start_IT>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0c2      	b.n	8004b84 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a0c:	60da      	str	r2, [r3, #12]
      break;
 8004a0e:	e04a      	b.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	4a5d      	ldr	r2, [pc, #372]	; (8004b8c <HAL_TIM_PWM_Start_DMA+0x404>)
 8004a16:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	4a5c      	ldr	r2, [pc, #368]	; (8004b90 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	4a5b      	ldr	r2, [pc, #364]	; (8004b94 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004a26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	333c      	adds	r3, #60	; 0x3c
 8004a34:	461a      	mov	r2, r3
 8004a36:	887b      	ldrh	r3, [r7, #2]
 8004a38:	f7fc fd75 	bl	8001526 <HAL_DMA_Start_IT>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e09e      	b.n	8004b84 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a54:	60da      	str	r2, [r3, #12]
      break;
 8004a56:	e026      	b.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	4a4b      	ldr	r2, [pc, #300]	; (8004b8c <HAL_TIM_PWM_Start_DMA+0x404>)
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	4a4a      	ldr	r2, [pc, #296]	; (8004b90 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	4a49      	ldr	r2, [pc, #292]	; (8004b94 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004a6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3340      	adds	r3, #64	; 0x40
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	887b      	ldrh	r3, [r7, #2]
 8004a80:	f7fc fd51 	bl	8001526 <HAL_DMA_Start_IT>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e07a      	b.n	8004b84 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a9c:	60da      	str	r2, [r3, #12]
      break;
 8004a9e:	e002      	b.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004aa6:	7dfb      	ldrb	r3, [r7, #23]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d16a      	bne.n	8004b82 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f001 f8db 	bl	8005c70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a36      	ldr	r2, [pc, #216]	; (8004b98 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <HAL_TIM_PWM_Start_DMA+0x364>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a34      	ldr	r2, [pc, #208]	; (8004b9c <HAL_TIM_PWM_Start_DMA+0x414>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <HAL_TIM_PWM_Start_DMA+0x364>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a33      	ldr	r2, [pc, #204]	; (8004ba0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_TIM_PWM_Start_DMA+0x364>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a31      	ldr	r2, [pc, #196]	; (8004ba4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIM_PWM_Start_DMA+0x364>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a30      	ldr	r2, [pc, #192]	; (8004ba8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <HAL_TIM_PWM_Start_DMA+0x368>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <HAL_TIM_PWM_Start_DMA+0x36a>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d007      	beq.n	8004b06 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b18:	d013      	beq.n	8004b42 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a23      	ldr	r2, [pc, #140]	; (8004bac <HAL_TIM_PWM_Start_DMA+0x424>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1a      	ldr	r2, [pc, #104]	; (8004b9c <HAL_TIM_PWM_Start_DMA+0x414>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d115      	bne.n	8004b6e <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b06      	cmp	r3, #6
 8004b52:	d015      	beq.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5a:	d011      	beq.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6c:	e008      	b.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0201 	orr.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e000      	b.n	8004b82 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b80:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	08005453 	.word	0x08005453
 8004b90:	080054fb 	.word	0x080054fb
 8004b94:	080053c1 	.word	0x080053c1
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40013400 	.word	0x40013400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	00010007 	.word	0x00010007

08004bb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e097      	b.n	8004cfc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d106      	bne.n	8004be6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fc f8cb 	bl	8000d7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004bfc:	f023 0307 	bic.w	r3, r3, #7
 8004c00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f000 fca9 	bl	8005564 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c58:	f023 030c 	bic.w	r3, r3, #12
 8004c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	4313      	orrs	r3, r2
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	011a      	lsls	r2, r3, #4
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	031b      	lsls	r3, r3, #12
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	4313      	orrs	r3, r2
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d110      	bne.n	8004d56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d102      	bne.n	8004d40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d3a:	7b7b      	ldrb	r3, [r7, #13]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d001      	beq.n	8004d44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e069      	b.n	8004e18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d54:	e031      	b.n	8004dba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d110      	bne.n	8004d7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d5c:	7bbb      	ldrb	r3, [r7, #14]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d102      	bne.n	8004d68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d62:	7b3b      	ldrb	r3, [r7, #12]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d001      	beq.n	8004d6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e055      	b.n	8004e18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d7c:	e01d      	b.n	8004dba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d108      	bne.n	8004d96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d84:	7bbb      	ldrb	r3, [r7, #14]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d105      	bne.n	8004d96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d8a:	7b7b      	ldrb	r3, [r7, #13]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d102      	bne.n	8004d96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d90:	7b3b      	ldrb	r3, [r7, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d001      	beq.n	8004d9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e03e      	b.n	8004e18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_TIM_Encoder_Start+0xc4>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d008      	beq.n	8004dd8 <HAL_TIM_Encoder_Start+0xd4>
 8004dc6:	e00f      	b.n	8004de8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 ff4d 	bl	8005c70 <TIM_CCxChannelCmd>
      break;
 8004dd6:	e016      	b.n	8004e06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	2104      	movs	r1, #4
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 ff45 	bl	8005c70 <TIM_CCxChannelCmd>
      break;
 8004de6:	e00e      	b.n	8004e06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2201      	movs	r2, #1
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 ff3d 	bl	8005c70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 ff36 	bl	8005c70 <TIM_CCxChannelCmd>
      break;
 8004e04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0201 	orr.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d122      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d11b      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0202 	mvn.w	r2, #2
 8004e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa7a 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa6c 	bl	8005348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fa7d 	bl	8005370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d122      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d11b      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0204 	mvn.w	r2, #4
 8004ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa50 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa42 	bl	8005348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fa53 	bl	8005370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d122      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d11b      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0208 	mvn.w	r2, #8
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa26 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa18 	bl	8005348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fa29 	bl	8005370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d122      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d11b      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0210 	mvn.w	r2, #16
 8004f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f9fc 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9ee 	bl	8005348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f9ff 	bl	8005370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d10e      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d107      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0201 	mvn.w	r2, #1
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fb f9c2 	bl	8000328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b80      	cmp	r3, #128	; 0x80
 8004fb0:	d10e      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	2b80      	cmp	r3, #128	; 0x80
 8004fbe:	d107      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 ffa2 	bl	8005f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fde:	d10e      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d107      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 ff95 	bl	8005f28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d10e      	bne.n	800502a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005016:	2b40      	cmp	r3, #64	; 0x40
 8005018:	d107      	bne.n	800502a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f9b7 	bl	8005398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b20      	cmp	r3, #32
 8005036:	d10e      	bne.n	8005056 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b20      	cmp	r3, #32
 8005044:	d107      	bne.n	8005056 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f06f 0220 	mvn.w	r2, #32
 800504e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 ff55 	bl	8005f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005064:	d10f      	bne.n	8005086 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005074:	d107      	bne.n	8005086 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 ff5b 	bl	8005f3c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005094:	d10f      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050a4:	d107      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80050ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 ff4d 	bl	8005f50 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c4:	d10f      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d4:	d107      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 ff3f 	bl	8005f64 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050f4:	d10f      	bne.n	8005116 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005104:	d107      	bne.n	8005116 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800510e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 ff31 	bl	8005f78 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800513a:	2302      	movs	r3, #2
 800513c:	e0ff      	b.n	800533e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b14      	cmp	r3, #20
 800514a:	f200 80f0 	bhi.w	800532e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	080051a9 	.word	0x080051a9
 8005158:	0800532f 	.word	0x0800532f
 800515c:	0800532f 	.word	0x0800532f
 8005160:	0800532f 	.word	0x0800532f
 8005164:	080051e9 	.word	0x080051e9
 8005168:	0800532f 	.word	0x0800532f
 800516c:	0800532f 	.word	0x0800532f
 8005170:	0800532f 	.word	0x0800532f
 8005174:	0800522b 	.word	0x0800522b
 8005178:	0800532f 	.word	0x0800532f
 800517c:	0800532f 	.word	0x0800532f
 8005180:	0800532f 	.word	0x0800532f
 8005184:	0800526b 	.word	0x0800526b
 8005188:	0800532f 	.word	0x0800532f
 800518c:	0800532f 	.word	0x0800532f
 8005190:	0800532f 	.word	0x0800532f
 8005194:	080052ad 	.word	0x080052ad
 8005198:	0800532f 	.word	0x0800532f
 800519c:	0800532f 	.word	0x0800532f
 80051a0:	0800532f 	.word	0x0800532f
 80051a4:	080052ed 	.word	0x080052ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fa68 	bl	8005684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0208 	orr.w	r2, r2, #8
 80051c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6999      	ldr	r1, [r3, #24]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	619a      	str	r2, [r3, #24]
      break;
 80051e6:	e0a5      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fad8 	bl	80057a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6999      	ldr	r1, [r3, #24]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	619a      	str	r2, [r3, #24]
      break;
 8005228:	e084      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fb41 	bl	80058b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0208 	orr.w	r2, r2, #8
 8005244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0204 	bic.w	r2, r2, #4
 8005254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69d9      	ldr	r1, [r3, #28]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	61da      	str	r2, [r3, #28]
      break;
 8005268:	e064      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fba9 	bl	80059c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69d9      	ldr	r1, [r3, #28]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	021a      	lsls	r2, r3, #8
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	61da      	str	r2, [r3, #28]
      break;
 80052aa:	e043      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fc12 	bl	8005adc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0208 	orr.w	r2, r2, #8
 80052c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0204 	bic.w	r2, r2, #4
 80052d6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80052ea:	e023      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fc56 	bl	8005ba4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005306:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005316:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	021a      	lsls	r2, r3, #8
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800532c:	e002      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
      break;
 8005332:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop

08005348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d107      	bne.n	80053e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e6:	e02a      	b.n	800543e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d107      	bne.n	8005402 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2202      	movs	r2, #2
 80053f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005400:	e01d      	b.n	800543e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d107      	bne.n	800541c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2204      	movs	r2, #4
 8005410:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800541a:	e010      	b.n	800543e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	429a      	cmp	r2, r3
 8005424:	d107      	bne.n	8005436 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2208      	movs	r2, #8
 800542a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005434:	e003      	b.n	800543e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff ffb4 	bl	80053ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	771a      	strb	r2, [r3, #28]
}
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	429a      	cmp	r2, r3
 8005468:	d10b      	bne.n	8005482 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d136      	bne.n	80054e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005480:	e031      	b.n	80054e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	429a      	cmp	r2, r3
 800548a:	d10b      	bne.n	80054a4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2202      	movs	r2, #2
 8005490:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d125      	bne.n	80054e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a2:	e020      	b.n	80054e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d10b      	bne.n	80054c6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2204      	movs	r2, #4
 80054b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d114      	bne.n	80054e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c4:	e00f      	b.n	80054e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d10a      	bne.n	80054e6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2208      	movs	r2, #8
 80054d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d103      	bne.n	80054e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7ff ff42 	bl	8005370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	771a      	strb	r2, [r3, #28]
}
 80054f2:	bf00      	nop
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	429a      	cmp	r2, r3
 8005510:	d103      	bne.n	800551a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	771a      	strb	r2, [r3, #28]
 8005518:	e019      	b.n	800554e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d103      	bne.n	800552c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2202      	movs	r2, #2
 8005528:	771a      	strb	r2, [r3, #28]
 800552a:	e010      	b.n	800554e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	429a      	cmp	r2, r3
 8005534:	d103      	bne.n	800553e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2204      	movs	r2, #4
 800553a:	771a      	strb	r2, [r3, #28]
 800553c:	e007      	b.n	800554e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d102      	bne.n	800554e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2208      	movs	r2, #8
 800554c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff ff18 	bl	8005384 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	771a      	strb	r2, [r3, #28]
}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a3c      	ldr	r2, [pc, #240]	; (8005668 <TIM_Base_SetConfig+0x104>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00f      	beq.n	800559c <TIM_Base_SetConfig+0x38>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005582:	d00b      	beq.n	800559c <TIM_Base_SetConfig+0x38>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a39      	ldr	r2, [pc, #228]	; (800566c <TIM_Base_SetConfig+0x108>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_Base_SetConfig+0x38>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a38      	ldr	r2, [pc, #224]	; (8005670 <TIM_Base_SetConfig+0x10c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0x38>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a37      	ldr	r2, [pc, #220]	; (8005674 <TIM_Base_SetConfig+0x110>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d108      	bne.n	80055ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a2d      	ldr	r2, [pc, #180]	; (8005668 <TIM_Base_SetConfig+0x104>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01b      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d017      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2a      	ldr	r2, [pc, #168]	; (800566c <TIM_Base_SetConfig+0x108>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a29      	ldr	r2, [pc, #164]	; (8005670 <TIM_Base_SetConfig+0x10c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00f      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a28      	ldr	r2, [pc, #160]	; (8005674 <TIM_Base_SetConfig+0x110>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00b      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a27      	ldr	r2, [pc, #156]	; (8005678 <TIM_Base_SetConfig+0x114>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d007      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a26      	ldr	r2, [pc, #152]	; (800567c <TIM_Base_SetConfig+0x118>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_Base_SetConfig+0x8a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a25      	ldr	r2, [pc, #148]	; (8005680 <TIM_Base_SetConfig+0x11c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d108      	bne.n	8005600 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a10      	ldr	r2, [pc, #64]	; (8005668 <TIM_Base_SetConfig+0x104>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00f      	beq.n	800564c <TIM_Base_SetConfig+0xe8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a11      	ldr	r2, [pc, #68]	; (8005674 <TIM_Base_SetConfig+0x110>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00b      	beq.n	800564c <TIM_Base_SetConfig+0xe8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a10      	ldr	r2, [pc, #64]	; (8005678 <TIM_Base_SetConfig+0x114>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <TIM_Base_SetConfig+0xe8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a0f      	ldr	r2, [pc, #60]	; (800567c <TIM_Base_SetConfig+0x118>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_Base_SetConfig+0xe8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a0e      	ldr	r2, [pc, #56]	; (8005680 <TIM_Base_SetConfig+0x11c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d103      	bne.n	8005654 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	615a      	str	r2, [r3, #20]
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40013400 	.word	0x40013400
 8005678:	40014000 	.word	0x40014000
 800567c:	40014400 	.word	0x40014400
 8005680:	40014800 	.word	0x40014800

08005684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f023 0201 	bic.w	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0303 	bic.w	r3, r3, #3
 80056be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f023 0302 	bic.w	r3, r3, #2
 80056d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a2c      	ldr	r2, [pc, #176]	; (8005790 <TIM_OC1_SetConfig+0x10c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00f      	beq.n	8005704 <TIM_OC1_SetConfig+0x80>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a2b      	ldr	r2, [pc, #172]	; (8005794 <TIM_OC1_SetConfig+0x110>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00b      	beq.n	8005704 <TIM_OC1_SetConfig+0x80>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a2a      	ldr	r2, [pc, #168]	; (8005798 <TIM_OC1_SetConfig+0x114>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d007      	beq.n	8005704 <TIM_OC1_SetConfig+0x80>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a29      	ldr	r2, [pc, #164]	; (800579c <TIM_OC1_SetConfig+0x118>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_OC1_SetConfig+0x80>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a28      	ldr	r2, [pc, #160]	; (80057a0 <TIM_OC1_SetConfig+0x11c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d10c      	bne.n	800571e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f023 0308 	bic.w	r3, r3, #8
 800570a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 0304 	bic.w	r3, r3, #4
 800571c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1b      	ldr	r2, [pc, #108]	; (8005790 <TIM_OC1_SetConfig+0x10c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00f      	beq.n	8005746 <TIM_OC1_SetConfig+0xc2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <TIM_OC1_SetConfig+0x110>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00b      	beq.n	8005746 <TIM_OC1_SetConfig+0xc2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a19      	ldr	r2, [pc, #100]	; (8005798 <TIM_OC1_SetConfig+0x114>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_OC1_SetConfig+0xc2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a18      	ldr	r2, [pc, #96]	; (800579c <TIM_OC1_SetConfig+0x118>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_OC1_SetConfig+0xc2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a17      	ldr	r2, [pc, #92]	; (80057a0 <TIM_OC1_SetConfig+0x11c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d111      	bne.n	800576a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800574c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	621a      	str	r2, [r3, #32]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40013400 	.word	0x40013400
 8005798:	40014000 	.word	0x40014000
 800579c:	40014400 	.word	0x40014400
 80057a0:	40014800 	.word	0x40014800

080057a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0210 	bic.w	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0320 	bic.w	r3, r3, #32
 80057f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a28      	ldr	r2, [pc, #160]	; (80058a4 <TIM_OC2_SetConfig+0x100>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_OC2_SetConfig+0x6c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a27      	ldr	r2, [pc, #156]	; (80058a8 <TIM_OC2_SetConfig+0x104>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d10d      	bne.n	800582c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <TIM_OC2_SetConfig+0x100>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00f      	beq.n	8005854 <TIM_OC2_SetConfig+0xb0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <TIM_OC2_SetConfig+0x104>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00b      	beq.n	8005854 <TIM_OC2_SetConfig+0xb0>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a1b      	ldr	r2, [pc, #108]	; (80058ac <TIM_OC2_SetConfig+0x108>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_OC2_SetConfig+0xb0>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a1a      	ldr	r2, [pc, #104]	; (80058b0 <TIM_OC2_SetConfig+0x10c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC2_SetConfig+0xb0>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <TIM_OC2_SetConfig+0x110>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d113      	bne.n	800587c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800585a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40013400 	.word	0x40013400
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40014400 	.word	0x40014400
 80058b4:	40014800 	.word	0x40014800

080058b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a27      	ldr	r2, [pc, #156]	; (80059b4 <TIM_OC3_SetConfig+0xfc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC3_SetConfig+0x6a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a26      	ldr	r2, [pc, #152]	; (80059b8 <TIM_OC3_SetConfig+0x100>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d10d      	bne.n	800593e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800593c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1c      	ldr	r2, [pc, #112]	; (80059b4 <TIM_OC3_SetConfig+0xfc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00f      	beq.n	8005966 <TIM_OC3_SetConfig+0xae>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1b      	ldr	r2, [pc, #108]	; (80059b8 <TIM_OC3_SetConfig+0x100>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00b      	beq.n	8005966 <TIM_OC3_SetConfig+0xae>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <TIM_OC3_SetConfig+0x104>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d007      	beq.n	8005966 <TIM_OC3_SetConfig+0xae>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <TIM_OC3_SetConfig+0x108>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_OC3_SetConfig+0xae>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a18      	ldr	r2, [pc, #96]	; (80059c4 <TIM_OC3_SetConfig+0x10c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d113      	bne.n	800598e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40013400 	.word	0x40013400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40014400 	.word	0x40014400
 80059c4:	40014800 	.word	0x40014800

080059c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	031b      	lsls	r3, r3, #12
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a28      	ldr	r2, [pc, #160]	; (8005ac8 <TIM_OC4_SetConfig+0x100>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC4_SetConfig+0x6c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a27      	ldr	r2, [pc, #156]	; (8005acc <TIM_OC4_SetConfig+0x104>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10d      	bne.n	8005a50 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	031b      	lsls	r3, r3, #12
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <TIM_OC4_SetConfig+0x100>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00f      	beq.n	8005a78 <TIM_OC4_SetConfig+0xb0>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <TIM_OC4_SetConfig+0x104>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <TIM_OC4_SetConfig+0xb0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <TIM_OC4_SetConfig+0x108>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_OC4_SetConfig+0xb0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <TIM_OC4_SetConfig+0x10c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC4_SetConfig+0xb0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a19      	ldr	r2, [pc, #100]	; (8005ad8 <TIM_OC4_SetConfig+0x110>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d113      	bne.n	8005aa0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a7e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a86:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	019b      	lsls	r3, r3, #6
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	019b      	lsls	r3, r3, #6
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	40013400 	.word	0x40013400
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800

08005adc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <TIM_OC5_SetConfig+0xb4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00f      	beq.n	8005b56 <TIM_OC5_SetConfig+0x7a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <TIM_OC5_SetConfig+0xb8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_OC5_SetConfig+0x7a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <TIM_OC5_SetConfig+0xbc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <TIM_OC5_SetConfig+0x7a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <TIM_OC5_SetConfig+0xc0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_OC5_SetConfig+0x7a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <TIM_OC5_SetConfig+0xc4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d109      	bne.n	8005b6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	621a      	str	r2, [r3, #32]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	40012c00 	.word	0x40012c00
 8005b94:	40013400 	.word	0x40013400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800

08005ba4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	051b      	lsls	r3, r3, #20
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a18      	ldr	r2, [pc, #96]	; (8005c5c <TIM_OC6_SetConfig+0xb8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00f      	beq.n	8005c20 <TIM_OC6_SetConfig+0x7c>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a17      	ldr	r2, [pc, #92]	; (8005c60 <TIM_OC6_SetConfig+0xbc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00b      	beq.n	8005c20 <TIM_OC6_SetConfig+0x7c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a16      	ldr	r2, [pc, #88]	; (8005c64 <TIM_OC6_SetConfig+0xc0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d007      	beq.n	8005c20 <TIM_OC6_SetConfig+0x7c>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <TIM_OC6_SetConfig+0xc4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC6_SetConfig+0x7c>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a14      	ldr	r2, [pc, #80]	; (8005c6c <TIM_OC6_SetConfig+0xc8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d109      	bne.n	8005c34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800

08005c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	2201      	movs	r2, #1
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1a      	ldr	r2, [r3, #32]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	401a      	ands	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a1a      	ldr	r2, [r3, #32]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e065      	b.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2c      	ldr	r2, [pc, #176]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2b      	ldr	r2, [pc, #172]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d108      	bne.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4a:	d013      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a12      	ldr	r2, [pc, #72]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10c      	bne.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40013400 	.word	0x40013400
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40014000 	.word	0x40014000

08005dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e087      	b.n	8005eec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a25      	ldr	r2, [pc, #148]	; (8005efc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d106      	bne.n	8005e78 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d126      	bne.n	8005eda <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	051b      	lsls	r3, r3, #20
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a0e      	ldr	r2, [pc, #56]	; (8005ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a0d      	ldr	r2, [pc, #52]	; (8005efc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d106      	bne.n	8005eda <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	40012c00 	.word	0x40012c00
 8005efc:	40013400 	.word	0x40013400

08005f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f9c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005fa0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fc2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005fc6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	4013      	ands	r3, r2
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	f107 0014 	add.w	r0, r7, #20
 8005ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	b004      	add	sp, #16
 8006030:	4770      	bx	lr
	...

08006034 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006034:	b480      	push	{r7}
 8006036:	b09d      	sub	sp, #116	; 0x74
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	78db      	ldrb	r3, [r3, #3]
 8006062:	2b03      	cmp	r3, #3
 8006064:	d81f      	bhi.n	80060a6 <USB_ActivateEndpoint+0x72>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <USB_ActivateEndpoint+0x38>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	0800607d 	.word	0x0800607d
 8006070:	08006099 	.word	0x08006099
 8006074:	080060af 	.word	0x080060af
 8006078:	0800608b 	.word	0x0800608b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800607c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006080:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006084:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006088:	e012      	b.n	80060b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800608a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800608e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006092:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006096:	e00b      	b.n	80060b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006098:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800609c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80060a4:	e004      	b.n	80060b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80060ac:	e000      	b.n	80060b0 <USB_ActivateEndpoint+0x7c>
      break;
 80060ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	b21b      	sxth	r3, r3
 80060e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ea:	b21a      	sxth	r2, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	4313      	orrs	r3, r2
 80060f4:	b21b      	sxth	r3, r3
 80060f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	441a      	add	r2, r3
 8006104:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006118:	b29b      	uxth	r3, r3
 800611a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	7b1b      	ldrb	r3, [r3, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f040 8149 	bne.w	80063b8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 8084 	beq.w	8006238 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800613a:	b29b      	uxth	r3, r3
 800613c:	461a      	mov	r2, r3
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	4413      	add	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	00da      	lsls	r2, r3, #3
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	88db      	ldrh	r3, [r3, #6]
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	b29b      	uxth	r3, r3
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	827b      	strh	r3, [r7, #18]
 8006172:	8a7b      	ldrh	r3, [r7, #18]
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01b      	beq.n	80061b4 <USB_ActivateEndpoint+0x180>
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006192:	823b      	strh	r3, [r7, #16]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	8a3b      	ldrh	r3, [r7, #16]
 80061a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	78db      	ldrb	r3, [r3, #3]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d020      	beq.n	80061fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d2:	81bb      	strh	r3, [r7, #12]
 80061d4:	89bb      	ldrh	r3, [r7, #12]
 80061d6:	f083 0320 	eor.w	r3, r3, #32
 80061da:	81bb      	strh	r3, [r7, #12]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	441a      	add	r2, r3
 80061e6:	89bb      	ldrh	r3, [r7, #12]
 80061e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	8013      	strh	r3, [r2, #0]
 80061fc:	e2a6      	b.n	800674c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006214:	81fb      	strh	r3, [r7, #14]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	441a      	add	r2, r3
 8006220:	89fb      	ldrh	r3, [r7, #14]
 8006222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006232:	b29b      	uxth	r3, r3
 8006234:	8013      	strh	r3, [r2, #0]
 8006236:	e289      	b.n	800674c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	633b      	str	r3, [r7, #48]	; 0x30
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006242:	b29b      	uxth	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	4413      	add	r3, r2
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	00da      	lsls	r2, r3, #3
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	4413      	add	r3, r2
 8006256:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	88db      	ldrh	r3, [r3, #6]
 8006260:	085b      	lsrs	r3, r3, #1
 8006262:	b29b      	uxth	r3, r3
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006276:	b29b      	uxth	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	4413      	add	r3, r2
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	00da      	lsls	r2, r3, #3
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	4413      	add	r3, r2
 800628a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2b3e      	cmp	r3, #62	; 0x3e
 8006296:	d918      	bls.n	80062ca <USB_ActivateEndpoint+0x296>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	66bb      	str	r3, [r7, #104]	; 0x68
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d102      	bne.n	80062b2 <USB_ActivateEndpoint+0x27e>
 80062ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062ae:	3b01      	subs	r3, #1
 80062b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80062b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	029b      	lsls	r3, r3, #10
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	e029      	b.n	800631e <USB_ActivateEndpoint+0x2ea>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d112      	bne.n	80062f8 <USB_ActivateEndpoint+0x2c4>
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062dc:	b29a      	uxth	r2, r3
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	e012      	b.n	800631e <USB_ActivateEndpoint+0x2ea>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <USB_ActivateEndpoint+0x2de>
 800630c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800630e:	3301      	adds	r3, #1
 8006310:	66bb      	str	r3, [r7, #104]	; 0x68
 8006312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006314:	b29b      	uxth	r3, r3
 8006316:	029b      	lsls	r3, r3, #10
 8006318:	b29a      	uxth	r2, r3
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	847b      	strh	r3, [r7, #34]	; 0x22
 800632c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800632e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01b      	beq.n	800636e <USB_ActivateEndpoint+0x33a>
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634c:	843b      	strh	r3, [r7, #32]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	441a      	add	r2, r3
 8006358:	8c3b      	ldrh	r3, [r7, #32]
 800635a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800635e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006362:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636a:	b29b      	uxth	r3, r3
 800636c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006384:	83fb      	strh	r3, [r7, #30]
 8006386:	8bfb      	ldrh	r3, [r7, #30]
 8006388:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800638c:	83fb      	strh	r3, [r7, #30]
 800638e:	8bfb      	ldrh	r3, [r7, #30]
 8006390:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006394:	83fb      	strh	r3, [r7, #30]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	441a      	add	r2, r3
 80063a0:	8bfb      	ldrh	r3, [r7, #30]
 80063a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	8013      	strh	r3, [r2, #0]
 80063b6:	e1c9      	b.n	800674c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	78db      	ldrb	r3, [r3, #3]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d11e      	bne.n	80063fe <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	441a      	add	r2, r3
 80063e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80063e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]
 80063fc:	e01d      	b.n	800643a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006414:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	441a      	add	r2, r3
 8006422:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800642a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006436:	b29b      	uxth	r3, r3
 8006438:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006444:	b29b      	uxth	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800644a:	4413      	add	r3, r2
 800644c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	00da      	lsls	r2, r3, #3
 8006454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006456:	4413      	add	r3, r2
 8006458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800645c:	65bb      	str	r3, [r7, #88]	; 0x58
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	891b      	ldrh	r3, [r3, #8]
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	b29b      	uxth	r3, r3
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	b29a      	uxth	r2, r3
 800646a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	657b      	str	r3, [r7, #84]	; 0x54
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006478:	b29b      	uxth	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800647e:	4413      	add	r3, r2
 8006480:	657b      	str	r3, [r7, #84]	; 0x54
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	00da      	lsls	r2, r3, #3
 8006488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800648a:	4413      	add	r3, r2
 800648c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006490:	653b      	str	r3, [r7, #80]	; 0x50
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	895b      	ldrh	r3, [r3, #10]
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	b29b      	uxth	r3, r3
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	785b      	ldrb	r3, [r3, #1]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 8093 	bne.w	80065d2 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80064bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01b      	beq.n	8006500 <USB_ActivateEndpoint+0x4cc>
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	441a      	add	r2, r3
 80064ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80064ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800650e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01b      	beq.n	8006550 <USB_ActivateEndpoint+0x51c>
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800653c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006548:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800654c:	b29b      	uxth	r3, r3
 800654e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	873b      	strh	r3, [r7, #56]	; 0x38
 8006568:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800656a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800656e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006570:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006572:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006576:	873b      	strh	r3, [r7, #56]	; 0x38
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006594:	b29b      	uxth	r3, r3
 8006596:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	441a      	add	r2, r3
 80065ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	8013      	strh	r3, [r2, #0]
 80065d0:	e0bc      	b.n	800674c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80065e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80065e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01d      	beq.n	800662a <USB_ActivateEndpoint+0x5f6>
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006604:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	441a      	add	r2, r3
 8006612:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800661a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006626:	b29b      	uxth	r3, r3
 8006628:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800663a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01d      	beq.n	8006682 <USB_ActivateEndpoint+0x64e>
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	441a      	add	r2, r3
 800666a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800666e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800667e:	b29b      	uxth	r3, r3
 8006680:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	78db      	ldrb	r3, [r3, #3]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d024      	beq.n	80066d4 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80066a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80066a8:	f083 0320 	eor.w	r3, r3, #32
 80066ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	441a      	add	r2, r3
 80066ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
 80066d2:	e01d      	b.n	8006710 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80066fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670c:	b29b      	uxth	r3, r3
 800670e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006748:	b29b      	uxth	r3, r3
 800674a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800674c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006750:	4618      	mov	r0, r3
 8006752:	3774      	adds	r7, #116	; 0x74
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800675c:	b480      	push	{r7}
 800675e:	b08d      	sub	sp, #52	; 0x34
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	7b1b      	ldrb	r3, [r3, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 808e 	bne.w	800688c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d044      	beq.n	8006802 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	81bb      	strh	r3, [r7, #12]
 8006786:	89bb      	ldrh	r3, [r7, #12]
 8006788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01b      	beq.n	80067c8 <USB_DeactivateEndpoint+0x6c>
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	817b      	strh	r3, [r7, #10]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	441a      	add	r2, r3
 80067b2:	897b      	ldrh	r3, [r7, #10]
 80067b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067de:	813b      	strh	r3, [r7, #8]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	893b      	ldrh	r3, [r7, #8]
 80067ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]
 8006800:	e192      	b.n	8006b28 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	827b      	strh	r3, [r7, #18]
 8006810:	8a7b      	ldrh	r3, [r7, #18]
 8006812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01b      	beq.n	8006852 <USB_DeactivateEndpoint+0xf6>
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	823b      	strh	r3, [r7, #16]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	8a3b      	ldrh	r3, [r7, #16]
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006868:	81fb      	strh	r3, [r7, #14]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	441a      	add	r2, r3
 8006874:	89fb      	ldrh	r3, [r7, #14]
 8006876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006886:	b29b      	uxth	r3, r3
 8006888:	8013      	strh	r3, [r2, #0]
 800688a:	e14d      	b.n	8006b28 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f040 80a5 	bne.w	80069e0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	843b      	strh	r3, [r7, #32]
 80068a4:	8c3b      	ldrh	r3, [r7, #32]
 80068a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01b      	beq.n	80068e6 <USB_DeactivateEndpoint+0x18a>
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c4:	83fb      	strh	r3, [r7, #30]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	441a      	add	r2, r3
 80068d0:	8bfb      	ldrh	r3, [r7, #30]
 80068d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	83bb      	strh	r3, [r7, #28]
 80068f4:	8bbb      	ldrh	r3, [r7, #28]
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d01b      	beq.n	8006936 <USB_DeactivateEndpoint+0x1da>
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006914:	837b      	strh	r3, [r7, #26]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	441a      	add	r2, r3
 8006920:	8b7b      	ldrh	r3, [r7, #26]
 8006922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800692a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006932:	b29b      	uxth	r3, r3
 8006934:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694c:	833b      	strh	r3, [r7, #24]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	441a      	add	r2, r3
 8006958:	8b3b      	ldrh	r3, [r7, #24]
 800695a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006966:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800696a:	b29b      	uxth	r3, r3
 800696c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006984:	82fb      	strh	r3, [r7, #22]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	441a      	add	r2, r3
 8006990:	8afb      	ldrh	r3, [r7, #22]
 8006992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069bc:	82bb      	strh	r3, [r7, #20]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	441a      	add	r2, r3
 80069c8:	8abb      	ldrh	r3, [r7, #20]
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]
 80069de:	e0a3      	b.n	8006b28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80069ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01b      	beq.n	8006a30 <USB_DeactivateEndpoint+0x2d4>
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01b      	beq.n	8006a80 <USB_DeactivateEndpoint+0x324>
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	441a      	add	r2, r3
 8006a6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	441a      	add	r2, r3
 8006aa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ace:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	441a      	add	r2, r3
 8006ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b06:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	441a      	add	r2, r3
 8006b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3734      	adds	r7, #52	; 0x34
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b0c2      	sub	sp, #264	; 0x108
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b44:	6018      	str	r0, [r3, #0]
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	f040 867b 	bne.w	8007858 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d908      	bls.n	8006b90 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b8e:	e007      	b.n	8006ba0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	7b1b      	ldrb	r3, [r3, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d13a      	bne.n	8006c26 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6959      	ldr	r1, [r3, #20]
 8006bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	88da      	ldrh	r2, [r3, #6]
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006bd2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006bd6:	6800      	ldr	r0, [r0, #0]
 8006bd8:	f001 fc1d 	bl	8008416 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	00da      	lsls	r2, r3, #3
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4413      	add	r3, r2
 8006c12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	801a      	strh	r2, [r3, #0]
 8006c22:	f000 bde3 	b.w	80077ec <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	78db      	ldrb	r3, [r3, #3]
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	f040 843a 	bne.w	80074ac <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6a1a      	ldr	r2, [r3, #32]
 8006c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	f240 83b7 	bls.w	80073c4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	441a      	add	r2, r3
 8006c9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6a1a      	ldr	r2, [r3, #32]
 8006cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc2:	1ad2      	subs	r2, r2, r3
 8006cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 81b3 	beq.w	800705e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30
 8006d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d16d      	bne.n	8006df0 <USB_EPStartXfer+0x2ba>
 8006d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	4413      	add	r3, r2
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	00da      	lsls	r2, r3, #3
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	4413      	add	r3, r2
 8006d4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d54:	2b3e      	cmp	r3, #62	; 0x3e
 8006d56:	d91c      	bls.n	8006d92 <USB_EPStartXfer+0x25c>
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5c:	095b      	lsrs	r3, r3, #5
 8006d5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d104      	bne.n	8006d78 <USB_EPStartXfer+0x242>
 8006d6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d72:	3b01      	subs	r3, #1
 8006d74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	029b      	lsls	r3, r3, #10
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	e053      	b.n	8006e3a <USB_EPStartXfer+0x304>
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d112      	bne.n	8006dc0 <USB_EPStartXfer+0x28a>
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	e03c      	b.n	8006e3a <USB_EPStartXfer+0x304>
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc4:	085b      	lsrs	r3, r3, #1
 8006dc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d004      	beq.n	8006de0 <USB_EPStartXfer+0x2aa>
 8006dd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006dda:	3301      	adds	r3, #1
 8006ddc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006de0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	029b      	lsls	r3, r3, #10
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	e024      	b.n	8006e3a <USB_EPStartXfer+0x304>
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d11c      	bne.n	8006e3a <USB_EPStartXfer+0x304>
 8006e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	4413      	add	r3, r2
 8006e16:	633b      	str	r3, [r7, #48]	; 0x30
 8006e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	00da      	lsls	r2, r3, #3
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	4413      	add	r3, r2
 8006e2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	895b      	ldrh	r3, [r3, #10]
 8006e46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6959      	ldr	r1, [r3, #20]
 8006e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e64:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e68:	6800      	ldr	r0, [r0, #0]
 8006e6a:	f001 fad4 	bl	8008416 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7e:	441a      	add	r2, r3
 8006e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6a1a      	ldr	r2, [r3, #32]
 8006e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d90f      	bls.n	8006ec8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6a1a      	ldr	r2, [r3, #32]
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb8:	1ad2      	subs	r2, r2, r3
 8006eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	621a      	str	r2, [r3, #32]
 8006ec6:	e00e      	b.n	8006ee6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d16d      	bne.n	8006fd2 <USB_EPStartXfer+0x49c>
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	4413      	add	r3, r2
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	00da      	lsls	r2, r3, #3
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f30:	617b      	str	r3, [r7, #20]
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f36:	2b3e      	cmp	r3, #62	; 0x3e
 8006f38:	d91c      	bls.n	8006f74 <USB_EPStartXfer+0x43e>
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <USB_EPStartXfer+0x424>
 8006f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f54:	3b01      	subs	r3, #1
 8006f56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	029b      	lsls	r3, r3, #10
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	e059      	b.n	8007028 <USB_EPStartXfer+0x4f2>
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d112      	bne.n	8006fa2 <USB_EPStartXfer+0x46c>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	e042      	b.n	8007028 <USB_EPStartXfer+0x4f2>
 8006fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d004      	beq.n	8006fc2 <USB_EPStartXfer+0x48c>
 8006fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	029b      	lsls	r3, r3, #10
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e02a      	b.n	8007028 <USB_EPStartXfer+0x4f2>
 8006fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d122      	bne.n	8007028 <USB_EPStartXfer+0x4f2>
 8006fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	623b      	str	r3, [r7, #32]
 8006fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	4413      	add	r3, r2
 8007004:	623b      	str	r3, [r7, #32]
 8007006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	00da      	lsls	r2, r3, #3
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	4413      	add	r3, r2
 8007018:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800701c:	61fb      	str	r3, [r7, #28]
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007022:	b29a      	uxth	r2, r3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	891b      	ldrh	r3, [r3, #8]
 8007034:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6959      	ldr	r1, [r3, #20]
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007048:	b29b      	uxth	r3, r3
 800704a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800704e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007052:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007056:	6800      	ldr	r0, [r0, #0]
 8007058:	f001 f9dd 	bl	8008416 <USB_WritePMA>
 800705c:	e3c6      	b.n	80077ec <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800705e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	785b      	ldrb	r3, [r3, #1]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d16d      	bne.n	800714a <USB_EPStartXfer+0x614>
 800706e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	64bb      	str	r3, [r7, #72]	; 0x48
 800707a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800708e:	4413      	add	r3, r2
 8007090:	64bb      	str	r3, [r7, #72]	; 0x48
 8007092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	00da      	lsls	r2, r3, #3
 80070a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a2:	4413      	add	r3, r2
 80070a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070a8:	647b      	str	r3, [r7, #68]	; 0x44
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ae:	2b3e      	cmp	r3, #62	; 0x3e
 80070b0:	d91c      	bls.n	80070ec <USB_EPStartXfer+0x5b6>
 80070b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <USB_EPStartXfer+0x59c>
 80070c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070cc:	3b01      	subs	r3, #1
 80070ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	029b      	lsls	r3, r3, #10
 80070da:	b29b      	uxth	r3, r3
 80070dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	e059      	b.n	80071a0 <USB_EPStartXfer+0x66a>
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d112      	bne.n	800711a <USB_EPStartXfer+0x5e4>
 80070f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070fe:	b29a      	uxth	r2, r3
 8007100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007112:	b29a      	uxth	r2, r3
 8007114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007116:	801a      	strh	r2, [r3, #0]
 8007118:	e042      	b.n	80071a0 <USB_EPStartXfer+0x66a>
 800711a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800711e:	085b      	lsrs	r3, r3, #1
 8007120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <USB_EPStartXfer+0x604>
 8007130:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007134:	3301      	adds	r3, #1
 8007136:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800713a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800713e:	b29b      	uxth	r3, r3
 8007140:	029b      	lsls	r3, r3, #10
 8007142:	b29a      	uxth	r2, r3
 8007144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007146:	801a      	strh	r2, [r3, #0]
 8007148:	e02a      	b.n	80071a0 <USB_EPStartXfer+0x66a>
 800714a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	785b      	ldrb	r3, [r3, #1]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d122      	bne.n	80071a0 <USB_EPStartXfer+0x66a>
 800715a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	653b      	str	r3, [r7, #80]	; 0x50
 8007166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007174:	b29b      	uxth	r3, r3
 8007176:	461a      	mov	r2, r3
 8007178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717a:	4413      	add	r3, r2
 800717c:	653b      	str	r3, [r7, #80]	; 0x50
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	00da      	lsls	r2, r3, #3
 800718c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800718e:	4413      	add	r3, r2
 8007190:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719a:	b29a      	uxth	r2, r3
 800719c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800719e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	891b      	ldrh	r3, [r3, #8]
 80071ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6959      	ldr	r1, [r3, #20]
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071ce:	6800      	ldr	r0, [r0, #0]
 80071d0:	f001 f921 	bl	8008416 <USB_WritePMA>
            ep->xfer_buff += len;
 80071d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695a      	ldr	r2, [r3, #20]
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e4:	441a      	add	r2, r3
 80071e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6a1a      	ldr	r2, [r3, #32]
 80071fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	429a      	cmp	r2, r3
 800720c:	d90f      	bls.n	800722e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800720e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6a1a      	ldr	r2, [r3, #32]
 800721a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721e:	1ad2      	subs	r2, r2, r3
 8007220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	621a      	str	r2, [r3, #32]
 800722c:	e00e      	b.n	800724c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800722e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800723e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2200      	movs	r2, #0
 800724a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800724c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	643b      	str	r3, [r7, #64]	; 0x40
 8007258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d16d      	bne.n	8007344 <USB_EPStartXfer+0x80e>
 8007268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	63bb      	str	r3, [r7, #56]	; 0x38
 8007274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	4413      	add	r3, r2
 800728a:	63bb      	str	r3, [r7, #56]	; 0x38
 800728c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	00da      	lsls	r2, r3, #3
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	4413      	add	r3, r2
 800729e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a8:	2b3e      	cmp	r3, #62	; 0x3e
 80072aa:	d91c      	bls.n	80072e6 <USB_EPStartXfer+0x7b0>
 80072ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ba:	f003 031f 	and.w	r3, r3, #31
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d104      	bne.n	80072cc <USB_EPStartXfer+0x796>
 80072c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c6:	3b01      	subs	r3, #1
 80072c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	029b      	lsls	r3, r3, #10
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072de:	b29a      	uxth	r2, r3
 80072e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e2:	801a      	strh	r2, [r3, #0]
 80072e4:	e053      	b.n	800738e <USB_EPStartXfer+0x858>
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d112      	bne.n	8007314 <USB_EPStartXfer+0x7de>
 80072ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fc:	801a      	strh	r2, [r3, #0]
 80072fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730c:	b29a      	uxth	r2, r3
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e03c      	b.n	800738e <USB_EPStartXfer+0x858>
 8007314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007318:	085b      	lsrs	r3, r3, #1
 800731a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d004      	beq.n	8007334 <USB_EPStartXfer+0x7fe>
 800732a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732e:	3301      	adds	r3, #1
 8007330:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007338:	b29b      	uxth	r3, r3
 800733a:	029b      	lsls	r3, r3, #10
 800733c:	b29a      	uxth	r2, r3
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	e024      	b.n	800738e <USB_EPStartXfer+0x858>
 8007344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d11c      	bne.n	800738e <USB_EPStartXfer+0x858>
 8007354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007362:	b29b      	uxth	r3, r3
 8007364:	461a      	mov	r2, r3
 8007366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007368:	4413      	add	r3, r2
 800736a:	643b      	str	r3, [r7, #64]	; 0x40
 800736c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	00da      	lsls	r2, r3, #3
 800737a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800737c:	4413      	add	r3, r2
 800737e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007388:	b29a      	uxth	r2, r3
 800738a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800738e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	895b      	ldrh	r3, [r3, #10]
 800739a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800739e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6959      	ldr	r1, [r3, #20]
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073bc:	6800      	ldr	r0, [r0, #0]
 80073be:	f001 f82a 	bl	8008416 <USB_WritePMA>
 80073c2:	e213      	b.n	80077ec <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80073d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80073f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80073fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	441a      	add	r2, r3
 8007418:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800741c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742c:	b29b      	uxth	r3, r3
 800742e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800744a:	b29b      	uxth	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007450:	4413      	add	r3, r2
 8007452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	00da      	lsls	r2, r3, #3
 8007462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007464:	4413      	add	r3, r2
 8007466:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800746a:	65bb      	str	r3, [r7, #88]	; 0x58
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007470:	b29a      	uxth	r2, r3
 8007472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007474:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	891b      	ldrh	r3, [r3, #8]
 8007482:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6959      	ldr	r1, [r3, #20]
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007496:	b29b      	uxth	r3, r3
 8007498:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800749c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074a0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074a4:	6800      	ldr	r0, [r0, #0]
 80074a6:	f000 ffb6 	bl	8008416 <USB_WritePMA>
 80074aa:	e19f      	b.n	80077ec <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a1a      	ldr	r2, [r3, #32]
 80074b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074bc:	1ad2      	subs	r2, r2, r3
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80074ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 80bc 	beq.w	800766a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	673b      	str	r3, [r7, #112]	; 0x70
 80074fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d16d      	bne.n	80075ea <USB_EPStartXfer+0xab4>
 800750e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	66bb      	str	r3, [r7, #104]	; 0x68
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007528:	b29b      	uxth	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800752e:	4413      	add	r3, r2
 8007530:	66bb      	str	r3, [r7, #104]	; 0x68
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	00da      	lsls	r2, r3, #3
 8007540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007542:	4413      	add	r3, r2
 8007544:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007548:	667b      	str	r3, [r7, #100]	; 0x64
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754e:	2b3e      	cmp	r3, #62	; 0x3e
 8007550:	d91c      	bls.n	800758c <USB_EPStartXfer+0xa56>
 8007552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007556:	095b      	lsrs	r3, r3, #5
 8007558:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800755c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007560:	f003 031f 	and.w	r3, r3, #31
 8007564:	2b00      	cmp	r3, #0
 8007566:	d104      	bne.n	8007572 <USB_EPStartXfer+0xa3c>
 8007568:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800756c:	3b01      	subs	r3, #1
 800756e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007572:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007576:	b29b      	uxth	r3, r3
 8007578:	029b      	lsls	r3, r3, #10
 800757a:	b29b      	uxth	r3, r3
 800757c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007584:	b29a      	uxth	r2, r3
 8007586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007588:	801a      	strh	r2, [r3, #0]
 800758a:	e053      	b.n	8007634 <USB_EPStartXfer+0xafe>
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007590:	2b00      	cmp	r3, #0
 8007592:	d112      	bne.n	80075ba <USB_EPStartXfer+0xa84>
 8007594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800759e:	b29a      	uxth	r2, r3
 80075a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	e03c      	b.n	8007634 <USB_EPStartXfer+0xafe>
 80075ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075be:	085b      	lsrs	r3, r3, #1
 80075c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <USB_EPStartXfer+0xaa4>
 80075d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80075d4:	3301      	adds	r3, #1
 80075d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80075da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80075de:	b29b      	uxth	r3, r3
 80075e0:	029b      	lsls	r3, r3, #10
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075e6:	801a      	strh	r2, [r3, #0]
 80075e8:	e024      	b.n	8007634 <USB_EPStartXfer+0xafe>
 80075ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d11c      	bne.n	8007634 <USB_EPStartXfer+0xafe>
 80075fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007608:	b29b      	uxth	r3, r3
 800760a:	461a      	mov	r2, r3
 800760c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800760e:	4413      	add	r3, r2
 8007610:	673b      	str	r3, [r7, #112]	; 0x70
 8007612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	00da      	lsls	r2, r3, #3
 8007620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007622:	4413      	add	r3, r2
 8007624:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762e:	b29a      	uxth	r2, r3
 8007630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007632:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	895b      	ldrh	r3, [r3, #10]
 8007640:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6959      	ldr	r1, [r3, #20]
 8007650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007654:	b29b      	uxth	r3, r3
 8007656:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800765a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800765e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007662:	6800      	ldr	r0, [r0, #0]
 8007664:	f000 fed7 	bl	8008416 <USB_WritePMA>
 8007668:	e0c0      	b.n	80077ec <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800766a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d16d      	bne.n	8007756 <USB_EPStartXfer+0xc20>
 800767a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007694:	b29b      	uxth	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800769a:	4413      	add	r3, r2
 800769c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800769e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	00da      	lsls	r2, r3, #3
 80076ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076ae:	4413      	add	r3, r2
 80076b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80076b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ba:	2b3e      	cmp	r3, #62	; 0x3e
 80076bc:	d91c      	bls.n	80076f8 <USB_EPStartXfer+0xbc2>
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c2:	095b      	lsrs	r3, r3, #5
 80076c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d104      	bne.n	80076de <USB_EPStartXfer+0xba8>
 80076d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076d8:	3b01      	subs	r3, #1
 80076da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	029b      	lsls	r3, r3, #10
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076f4:	801a      	strh	r2, [r3, #0]
 80076f6:	e05f      	b.n	80077b8 <USB_EPStartXfer+0xc82>
 80076f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d112      	bne.n	8007726 <USB_EPStartXfer+0xbf0>
 8007700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
 8007706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800770a:	b29a      	uxth	r2, r3
 800770c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771e:	b29a      	uxth	r2, r3
 8007720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007722:	801a      	strh	r2, [r3, #0]
 8007724:	e048      	b.n	80077b8 <USB_EPStartXfer+0xc82>
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <USB_EPStartXfer+0xc10>
 800773c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007740:	3301      	adds	r3, #1
 8007742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800774a:	b29b      	uxth	r3, r3
 800774c:	029b      	lsls	r3, r3, #10
 800774e:	b29a      	uxth	r2, r3
 8007750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007752:	801a      	strh	r2, [r3, #0]
 8007754:	e030      	b.n	80077b8 <USB_EPStartXfer+0xc82>
 8007756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d128      	bne.n	80077b8 <USB_EPStartXfer+0xc82>
 8007766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007782:	b29b      	uxth	r3, r3
 8007784:	461a      	mov	r2, r3
 8007786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800778a:	4413      	add	r3, r2
 800778c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	00da      	lsls	r2, r3, #3
 800779e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077a2:	4413      	add	r3, r2
 80077a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	891b      	ldrh	r3, [r3, #8]
 80077c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6959      	ldr	r1, [r3, #20]
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077e6:	6800      	ldr	r0, [r0, #0]
 80077e8:	f000 fe15 	bl	8008416 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800780e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007812:	817b      	strh	r3, [r7, #10]
 8007814:	897b      	ldrh	r3, [r7, #10]
 8007816:	f083 0310 	eor.w	r3, r3, #16
 800781a:	817b      	strh	r3, [r7, #10]
 800781c:	897b      	ldrh	r3, [r7, #10]
 800781e:	f083 0320 	eor.w	r3, r3, #32
 8007822:	817b      	strh	r3, [r7, #10]
 8007824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	441a      	add	r2, r3
 800783e:	897b      	ldrh	r3, [r7, #10]
 8007840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800784c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007850:	b29b      	uxth	r3, r3
 8007852:	8013      	strh	r3, [r2, #0]
 8007854:	f000 bc9f 	b.w	8008196 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	7b1b      	ldrb	r3, [r3, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	f040 80ae 	bne.w	80079c6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	429a      	cmp	r2, r3
 8007884:	d917      	bls.n	80078b6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	699a      	ldr	r2, [r3, #24]
 80078a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a6:	1ad2      	subs	r2, r2, r3
 80078a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	619a      	str	r2, [r3, #24]
 80078b4:	e00e      	b.n	80078d4 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80078b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80078c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2200      	movs	r2, #0
 80078d2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80078d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078f8:	4413      	add	r3, r2
 80078fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	00da      	lsls	r2, r3, #3
 800790c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007910:	4413      	add	r3, r2
 8007912:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791e:	2b3e      	cmp	r3, #62	; 0x3e
 8007920:	d91d      	bls.n	800795e <USB_EPStartXfer+0xe28>
 8007922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800792c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2b00      	cmp	r3, #0
 8007936:	d104      	bne.n	8007942 <USB_EPStartXfer+0xe0c>
 8007938:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800793c:	3b01      	subs	r3, #1
 800793e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007942:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007946:	b29b      	uxth	r3, r3
 8007948:	029b      	lsls	r3, r3, #10
 800794a:	b29b      	uxth	r3, r3
 800794c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007954:	b29a      	uxth	r2, r3
 8007956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800795a:	801a      	strh	r2, [r3, #0]
 800795c:	e3e1      	b.n	8008122 <USB_EPStartXfer+0x15ec>
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007962:	2b00      	cmp	r3, #0
 8007964:	d116      	bne.n	8007994 <USB_EPStartXfer+0xe5e>
 8007966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	b29b      	uxth	r3, r3
 800796e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007972:	b29a      	uxth	r2, r3
 8007974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007978:	801a      	strh	r2, [r3, #0]
 800797a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798a:	b29a      	uxth	r2, r3
 800798c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007990:	801a      	strh	r2, [r3, #0]
 8007992:	e3c6      	b.n	8008122 <USB_EPStartXfer+0x15ec>
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007998:	085b      	lsrs	r3, r3, #1
 800799a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <USB_EPStartXfer+0xe7e>
 80079aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079ae:	3301      	adds	r3, #1
 80079b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	029b      	lsls	r3, r3, #10
 80079bc:	b29a      	uxth	r2, r3
 80079be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079c2:	801a      	strh	r2, [r3, #0]
 80079c4:	e3ad      	b.n	8008122 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80079c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	78db      	ldrb	r3, [r3, #3]
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	f040 8200 	bne.w	8007dd8 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80079d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f040 8091 	bne.w	8007b0c <USB_EPStartXfer+0xfd6>
 80079ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a0e:	4413      	add	r3, r2
 8007a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	00da      	lsls	r2, r3, #3
 8007a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a26:	4413      	add	r3, r2
 8007a28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	2b3e      	cmp	r3, #62	; 0x3e
 8007a3e:	d925      	bls.n	8007a8c <USB_EPStartXfer+0xf56>
 8007a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	095b      	lsrs	r3, r3, #5
 8007a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <USB_EPStartXfer+0xf3a>
 8007a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	029b      	lsls	r3, r3, #10
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a88:	801a      	strh	r2, [r3, #0]
 8007a8a:	e074      	b.n	8007b76 <USB_EPStartXfer+0x1040>
 8007a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d116      	bne.n	8007aca <USB_EPStartXfer+0xf94>
 8007a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aae:	801a      	strh	r2, [r3, #0]
 8007ab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ac6:	801a      	strh	r2, [r3, #0]
 8007ac8:	e055      	b.n	8007b76 <USB_EPStartXfer+0x1040>
 8007aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	085b      	lsrs	r3, r3, #1
 8007ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <USB_EPStartXfer+0xfc4>
 8007af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af4:	3301      	adds	r3, #1
 8007af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	029b      	lsls	r3, r3, #10
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	e034      	b.n	8007b76 <USB_EPStartXfer+0x1040>
 8007b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d12c      	bne.n	8007b76 <USB_EPStartXfer+0x1040>
 8007b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b40:	4413      	add	r3, r2
 8007b42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	00da      	lsls	r2, r3, #3
 8007b54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b58:	4413      	add	r3, r2
 8007b5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b74:	801a      	strh	r2, [r3, #0]
 8007b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	785b      	ldrb	r3, [r3, #1]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 8091 	bne.w	8007cb8 <USB_EPStartXfer+0x1182>
 8007b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bba:	4413      	add	r3, r2
 8007bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	00da      	lsls	r2, r3, #3
 8007bce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	2b3e      	cmp	r3, #62	; 0x3e
 8007bea:	d925      	bls.n	8007c38 <USB_EPStartXfer+0x1102>
 8007bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	095b      	lsrs	r3, r3, #5
 8007bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 031f 	and.w	r3, r3, #31
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d104      	bne.n	8007c1c <USB_EPStartXfer+0x10e6>
 8007c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c16:	3b01      	subs	r3, #1
 8007c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	029b      	lsls	r3, r3, #10
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c34:	801a      	strh	r2, [r3, #0]
 8007c36:	e06d      	b.n	8007d14 <USB_EPStartXfer+0x11de>
 8007c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d116      	bne.n	8007c76 <USB_EPStartXfer+0x1140>
 8007c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c5a:	801a      	strh	r2, [r3, #0]
 8007c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	e04e      	b.n	8007d14 <USB_EPStartXfer+0x11de>
 8007c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d004      	beq.n	8007ca6 <USB_EPStartXfer+0x1170>
 8007c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	029b      	lsls	r3, r3, #10
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cb4:	801a      	strh	r2, [r3, #0]
 8007cb6:	e02d      	b.n	8007d14 <USB_EPStartXfer+0x11de>
 8007cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d125      	bne.n	8007d14 <USB_EPStartXfer+0x11de>
 8007cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	461a      	mov	r2, r3
 8007cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cde:	4413      	add	r3, r2
 8007ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	00da      	lsls	r2, r3, #3
 8007cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d12:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 81fe 	beq.w	8008122 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d46:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <USB_EPStartXfer+0x1228>
 8007d52:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10d      	bne.n	8007d7a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f040 81db 	bne.w	8008122 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d6c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f040 81d4 	bne.w	8008122 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	441a      	add	r2, r3
 8007dbe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	8013      	strh	r3, [r2, #0]
 8007dd6:	e1a4      	b.n	8008122 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	78db      	ldrb	r3, [r3, #3]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	f040 819a 	bne.w	800811e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d917      	bls.n	8007e36 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e26:	1ad2      	subs	r2, r2, r3
 8007e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	619a      	str	r2, [r3, #24]
 8007e34:	e00e      	b.n	8007e54 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2200      	movs	r2, #0
 8007e52:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	785b      	ldrb	r3, [r3, #1]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d178      	bne.n	8007f56 <USB_EPStartXfer+0x1420>
 8007e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	461a      	mov	r2, r3
 8007e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e88:	4413      	add	r3, r2
 8007e8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	00da      	lsls	r2, r3, #3
 8007e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eae:	2b3e      	cmp	r3, #62	; 0x3e
 8007eb0:	d91d      	bls.n	8007eee <USB_EPStartXfer+0x13b8>
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <USB_EPStartXfer+0x139c>
 8007ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	029b      	lsls	r3, r3, #10
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007eea:	801a      	strh	r2, [r3, #0]
 8007eec:	e064      	b.n	8007fb8 <USB_EPStartXfer+0x1482>
 8007eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d116      	bne.n	8007f24 <USB_EPStartXfer+0x13ee>
 8007ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	e049      	b.n	8007fb8 <USB_EPStartXfer+0x1482>
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d004      	beq.n	8007f44 <USB_EPStartXfer+0x140e>
 8007f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f3e:	3301      	adds	r3, #1
 8007f40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	029b      	lsls	r3, r3, #10
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f52:	801a      	strh	r2, [r3, #0]
 8007f54:	e030      	b.n	8007fb8 <USB_EPStartXfer+0x1482>
 8007f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d128      	bne.n	8007fb8 <USB_EPStartXfer+0x1482>
 8007f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	461a      	mov	r2, r3
 8007f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	00da      	lsls	r2, r3, #3
 8007f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	785b      	ldrb	r3, [r3, #1]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d178      	bne.n	80080c8 <USB_EPStartXfer+0x1592>
 8007fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	00da      	lsls	r2, r3, #3
 800800e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008012:	4413      	add	r3, r2
 8008014:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800801c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008020:	2b3e      	cmp	r3, #62	; 0x3e
 8008022:	d91d      	bls.n	8008060 <USB_EPStartXfer+0x152a>
 8008024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800802e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	2b00      	cmp	r3, #0
 8008038:	d104      	bne.n	8008044 <USB_EPStartXfer+0x150e>
 800803a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800803e:	3b01      	subs	r3, #1
 8008040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008048:	b29b      	uxth	r3, r3
 800804a:	029b      	lsls	r3, r3, #10
 800804c:	b29b      	uxth	r3, r3
 800804e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008056:	b29a      	uxth	r2, r3
 8008058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	e060      	b.n	8008122 <USB_EPStartXfer+0x15ec>
 8008060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008064:	2b00      	cmp	r3, #0
 8008066:	d116      	bne.n	8008096 <USB_EPStartXfer+0x1560>
 8008068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008074:	b29a      	uxth	r2, r3
 8008076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800807a:	801a      	strh	r2, [r3, #0]
 800807c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	b29b      	uxth	r3, r3
 8008084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808c:	b29a      	uxth	r2, r3
 800808e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008092:	801a      	strh	r2, [r3, #0]
 8008094:	e045      	b.n	8008122 <USB_EPStartXfer+0x15ec>
 8008096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809a:	085b      	lsrs	r3, r3, #1
 800809c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <USB_EPStartXfer+0x1580>
 80080ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080b0:	3301      	adds	r3, #1
 80080b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	029b      	lsls	r3, r3, #10
 80080be:	b29a      	uxth	r2, r3
 80080c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080c4:	801a      	strh	r2, [r3, #0]
 80080c6:	e02c      	b.n	8008122 <USB_EPStartXfer+0x15ec>
 80080c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d124      	bne.n	8008122 <USB_EPStartXfer+0x15ec>
 80080d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080ee:	4413      	add	r3, r2
 80080f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	00da      	lsls	r2, r3, #3
 8008102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008106:	4413      	add	r3, r2
 8008108:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800810c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008114:	b29a      	uxth	r2, r3
 8008116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	e001      	b.n	8008122 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e03a      	b.n	8008198 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008148:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800814c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008150:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008154:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008158:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800815c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008160:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	441a      	add	r2, r3
 800817e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800818a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800818e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008192:	b29b      	uxth	r3, r3
 8008194:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b085      	sub	sp, #20
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	785b      	ldrb	r3, [r3, #1]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d020      	beq.n	80081f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ca:	81bb      	strh	r3, [r7, #12]
 80081cc:	89bb      	ldrh	r3, [r7, #12]
 80081ce:	f083 0310 	eor.w	r3, r3, #16
 80081d2:	81bb      	strh	r3, [r7, #12]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	441a      	add	r2, r3
 80081de:	89bb      	ldrh	r3, [r7, #12]
 80081e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	8013      	strh	r3, [r2, #0]
 80081f4:	e01f      	b.n	8008236 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820c:	81fb      	strh	r3, [r7, #14]
 800820e:	89fb      	ldrh	r3, [r7, #14]
 8008210:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008214:	81fb      	strh	r3, [r7, #14]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	441a      	add	r2, r3
 8008220:	89fb      	ldrh	r3, [r7, #14]
 8008222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008232:	b29b      	uxth	r3, r3
 8008234:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	7b1b      	ldrb	r3, [r3, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	f040 809d 	bne.w	8008392 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d04c      	beq.n	80082fa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	823b      	strh	r3, [r7, #16]
 800826e:	8a3b      	ldrh	r3, [r7, #16]
 8008270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01b      	beq.n	80082b0 <USB_EPClearStall+0x6c>
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	b29b      	uxth	r3, r3
 8008286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800828a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828e:	81fb      	strh	r3, [r7, #14]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	441a      	add	r2, r3
 800829a:	89fb      	ldrh	r3, [r7, #14]
 800829c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	78db      	ldrb	r3, [r3, #3]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d06c      	beq.n	8008392 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ce:	81bb      	strh	r3, [r7, #12]
 80082d0:	89bb      	ldrh	r3, [r7, #12]
 80082d2:	f083 0320 	eor.w	r3, r3, #32
 80082d6:	81bb      	strh	r3, [r7, #12]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	441a      	add	r2, r3
 80082e2:	89bb      	ldrh	r3, [r7, #12]
 80082e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	8013      	strh	r3, [r2, #0]
 80082f8:	e04b      	b.n	8008392 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	82fb      	strh	r3, [r7, #22]
 8008308:	8afb      	ldrh	r3, [r7, #22]
 800830a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d01b      	beq.n	800834a <USB_EPClearStall+0x106>
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008328:	82bb      	strh	r3, [r7, #20]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	441a      	add	r2, r3
 8008334:	8abb      	ldrh	r3, [r7, #20]
 8008336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800833a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800833e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008346:	b29b      	uxth	r3, r3
 8008348:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800835c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008360:	827b      	strh	r3, [r7, #18]
 8008362:	8a7b      	ldrh	r3, [r7, #18]
 8008364:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008368:	827b      	strh	r3, [r7, #18]
 800836a:	8a7b      	ldrh	r3, [r7, #18]
 800836c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008370:	827b      	strh	r3, [r7, #18]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	441a      	add	r2, r3
 800837c:	8a7b      	ldrh	r3, [r7, #18]
 800837e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800838a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838e:	b29b      	uxth	r3, r3
 8008390:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80083ac:	78fb      	ldrb	r3, [r7, #3]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2280      	movs	r2, #128	; 0x80
 80083b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b085      	sub	sp, #20
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008404:	b29b      	uxth	r3, r3
 8008406:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008408:	68fb      	ldr	r3, [r7, #12]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008416:	b480      	push	{r7}
 8008418:	b08d      	sub	sp, #52	; 0x34
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	4611      	mov	r1, r2
 8008422:	461a      	mov	r2, r3
 8008424:	460b      	mov	r3, r1
 8008426:	80fb      	strh	r3, [r7, #6]
 8008428:	4613      	mov	r3, r2
 800842a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800842c:	88bb      	ldrh	r3, [r7, #4]
 800842e:	3301      	adds	r3, #1
 8008430:	085b      	lsrs	r3, r3, #1
 8008432:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800843c:	88fa      	ldrh	r2, [r7, #6]
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800844c:	e01b      	b.n	8008486 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	3301      	adds	r3, #1
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	b29b      	uxth	r3, r3
 8008464:	461a      	mov	r2, r3
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	b29a      	uxth	r2, r3
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	3302      	adds	r3, #2
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	3301      	adds	r3, #1
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008482:	3b01      	subs	r3, #1
 8008484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e0      	bne.n	800844e <USB_WritePMA+0x38>
  }
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	3734      	adds	r7, #52	; 0x34
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800849a:	b480      	push	{r7}
 800849c:	b08b      	sub	sp, #44	; 0x2c
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	4611      	mov	r1, r2
 80084a6:	461a      	mov	r2, r3
 80084a8:	460b      	mov	r3, r1
 80084aa:	80fb      	strh	r3, [r7, #6]
 80084ac:	4613      	mov	r3, r2
 80084ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80084b0:	88bb      	ldrh	r3, [r7, #4]
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084c0:	88fa      	ldrh	r2, [r7, #6]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ca:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
 80084d0:	e018      	b.n	8008504 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	3302      	adds	r3, #2
 80084de:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	3301      	adds	r3, #1
 80084ec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	0a1b      	lsrs	r3, r3, #8
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	3301      	adds	r3, #1
 80084fc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	3b01      	subs	r3, #1
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e3      	bne.n	80084d2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800850a:	88bb      	ldrh	r3, [r7, #4]
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d007      	beq.n	8008526 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	b29b      	uxth	r3, r3
 800851c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	b2da      	uxtb	r2, r3
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	701a      	strb	r2, [r3, #0]
  }
}
 8008526:	bf00      	nop
 8008528:	372c      	adds	r7, #44	; 0x2c
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	460b      	mov	r3, r1
 800853c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800853e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008542:	f002 f901 	bl	800a748 <USBD_static_malloc>
 8008546:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d105      	bne.n	800855a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008556:	2302      	movs	r3, #2
 8008558:	e066      	b.n	8008628 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	7c1b      	ldrb	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d119      	bne.n	800859e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800856a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800856e:	2202      	movs	r2, #2
 8008570:	2181      	movs	r1, #129	; 0x81
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 ff8d 	bl	800a492 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800857e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008582:	2202      	movs	r2, #2
 8008584:	2101      	movs	r1, #1
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f001 ff83 	bl	800a492 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2210      	movs	r2, #16
 8008598:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800859c:	e016      	b.n	80085cc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800859e:	2340      	movs	r3, #64	; 0x40
 80085a0:	2202      	movs	r2, #2
 80085a2:	2181      	movs	r1, #129	; 0x81
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f001 ff74 	bl	800a492 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	2202      	movs	r2, #2
 80085b4:	2101      	movs	r1, #1
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 ff6b 	bl	800a492 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2210      	movs	r2, #16
 80085c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085cc:	2308      	movs	r3, #8
 80085ce:	2203      	movs	r2, #3
 80085d0:	2182      	movs	r1, #130	; 0x82
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 ff5d 	bl	800a492 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7c1b      	ldrb	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d109      	bne.n	8008616 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800860c:	2101      	movs	r1, #1
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f002 f82f 	bl	800a672 <USBD_LL_PrepareReceive>
 8008614:	e007      	b.n	8008626 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800861c:	2340      	movs	r3, #64	; 0x40
 800861e:	2101      	movs	r1, #1
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f002 f826 	bl	800a672 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800863c:	2181      	movs	r1, #129	; 0x81
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 ff4d 	bl	800a4de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800864a:	2101      	movs	r1, #1
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 ff46 	bl	800a4de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800865a:	2182      	movs	r1, #130	; 0x82
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 ff3e 	bl	800a4de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00e      	beq.n	800869a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800868c:	4618      	mov	r0, r3
 800868e:	f002 f869 	bl	800a764 <USBD_static_free>
    pdev->pClassData = NULL;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e0af      	b.n	800882c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d03f      	beq.n	8008758 <USBD_CDC_Setup+0xb4>
 80086d8:	2b20      	cmp	r3, #32
 80086da:	f040 809f 	bne.w	800881c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	88db      	ldrh	r3, [r3, #6]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d02e      	beq.n	8008744 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	b25b      	sxtb	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da16      	bge.n	800871e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80086fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	88d2      	ldrh	r2, [r2, #6]
 8008702:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	88db      	ldrh	r3, [r3, #6]
 8008708:	2b07      	cmp	r3, #7
 800870a:	bf28      	it	cs
 800870c:	2307      	movcs	r3, #7
 800870e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	89fa      	ldrh	r2, [r7, #14]
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 facf 	bl	8009cba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800871c:	e085      	b.n	800882a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	785a      	ldrb	r2, [r3, #1]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	88db      	ldrh	r3, [r3, #6]
 800872c:	b2da      	uxtb	r2, r3
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008734:	6939      	ldr	r1, [r7, #16]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	88db      	ldrh	r3, [r3, #6]
 800873a:	461a      	mov	r2, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 fae8 	bl	8009d12 <USBD_CtlPrepareRx>
      break;
 8008742:	e072      	b.n	800882a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	7850      	ldrb	r0, [r2, #1]
 8008750:	2200      	movs	r2, #0
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	4798      	blx	r3
      break;
 8008756:	e068      	b.n	800882a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	2b0b      	cmp	r3, #11
 800875e:	d852      	bhi.n	8008806 <USBD_CDC_Setup+0x162>
 8008760:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <USBD_CDC_Setup+0xc4>)
 8008762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008766:	bf00      	nop
 8008768:	08008799 	.word	0x08008799
 800876c:	08008815 	.word	0x08008815
 8008770:	08008807 	.word	0x08008807
 8008774:	08008807 	.word	0x08008807
 8008778:	08008807 	.word	0x08008807
 800877c:	08008807 	.word	0x08008807
 8008780:	08008807 	.word	0x08008807
 8008784:	08008807 	.word	0x08008807
 8008788:	08008807 	.word	0x08008807
 800878c:	08008807 	.word	0x08008807
 8008790:	080087c3 	.word	0x080087c3
 8008794:	080087ed 	.word	0x080087ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d107      	bne.n	80087b4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80087a4:	f107 030a 	add.w	r3, r7, #10
 80087a8:	2202      	movs	r2, #2
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f001 fa84 	bl	8009cba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087b2:	e032      	b.n	800881a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 fa0e 	bl	8009bd8 <USBD_CtlError>
            ret = USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	75fb      	strb	r3, [r7, #23]
          break;
 80087c0:	e02b      	b.n	800881a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d107      	bne.n	80087de <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80087ce:	f107 030d 	add.w	r3, r7, #13
 80087d2:	2201      	movs	r2, #1
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f001 fa6f 	bl	8009cba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087dc:	e01d      	b.n	800881a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f001 f9f9 	bl	8009bd8 <USBD_CtlError>
            ret = USBD_FAIL;
 80087e6:	2303      	movs	r3, #3
 80087e8:	75fb      	strb	r3, [r7, #23]
          break;
 80087ea:	e016      	b.n	800881a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d00f      	beq.n	8008818 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 f9ec 	bl	8009bd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008800:	2303      	movs	r3, #3
 8008802:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008804:	e008      	b.n	8008818 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 f9e5 	bl	8009bd8 <USBD_CtlError>
          ret = USBD_FAIL;
 800880e:	2303      	movs	r3, #3
 8008810:	75fb      	strb	r3, [r7, #23]
          break;
 8008812:	e002      	b.n	800881a <USBD_CDC_Setup+0x176>
          break;
 8008814:	bf00      	nop
 8008816:	e008      	b.n	800882a <USBD_CDC_Setup+0x186>
          break;
 8008818:	bf00      	nop
      }
      break;
 800881a:	e006      	b.n	800882a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f001 f9da 	bl	8009bd8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008824:	2303      	movs	r3, #3
 8008826:	75fb      	strb	r3, [r7, #23]
      break;
 8008828:	bf00      	nop
  }

  return (uint8_t)ret;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008846:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008852:	2303      	movs	r3, #3
 8008854:	e04f      	b.n	80088f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800885c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	6879      	ldr	r1, [r7, #4]
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	440b      	add	r3, r1
 800886c:	3318      	adds	r3, #24
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d029      	beq.n	80088c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008874:	78fa      	ldrb	r2, [r7, #3]
 8008876:	6879      	ldr	r1, [r7, #4]
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	440b      	add	r3, r1
 8008882:	3318      	adds	r3, #24
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	78f9      	ldrb	r1, [r7, #3]
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	460b      	mov	r3, r1
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	440b      	add	r3, r1
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	4403      	add	r3, r0
 8008894:	3338      	adds	r3, #56	; 0x38
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	fbb2 f1f3 	udiv	r1, r2, r3
 800889c:	fb01 f303 	mul.w	r3, r1, r3
 80088a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d110      	bne.n	80088c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	3318      	adds	r3, #24
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088ba:	78f9      	ldrb	r1, [r7, #3]
 80088bc:	2300      	movs	r3, #0
 80088be:	2200      	movs	r2, #0
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f001 feb5 	bl	800a630 <USBD_LL_Transmit>
 80088c6:	e015      	b.n	80088f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80088f0:	78fa      	ldrb	r2, [r7, #3]
 80088f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008910:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800891c:	2303      	movs	r3, #3
 800891e:	e015      	b.n	800894c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 fec5 	bl	800a6b4 <USBD_LL_GetRxDataSize>
 800892a:	4602      	mov	r2, r0
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008946:	4611      	mov	r1, r2
 8008948:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008962:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800896a:	2303      	movs	r3, #3
 800896c:	e01b      	b.n	80089a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d015      	beq.n	80089a4 <USBD_CDC_EP0_RxReady+0x50>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800897e:	2bff      	cmp	r3, #255	; 0xff
 8008980:	d010      	beq.n	80089a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008990:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008998:	b292      	uxth	r2, r2
 800899a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	22ff      	movs	r2, #255	; 0xff
 80089a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2243      	movs	r2, #67	; 0x43
 80089bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80089be:	4b03      	ldr	r3, [pc, #12]	; (80089cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	200000bc 	.word	0x200000bc

080089d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2243      	movs	r2, #67	; 0x43
 80089dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80089de:	4b03      	ldr	r3, [pc, #12]	; (80089ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	20000078 	.word	0x20000078

080089f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2243      	movs	r2, #67	; 0x43
 80089fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80089fe:	4b03      	ldr	r3, [pc, #12]	; (8008a0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	20000100 	.word	0x20000100

08008a10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	220a      	movs	r2, #10
 8008a1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a1e:	4b03      	ldr	r3, [pc, #12]	; (8008a2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	20000034 	.word	0x20000034

08008a30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e004      	b.n	8008a4e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b087      	sub	sp, #28
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a6c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e008      	b.n	8008a8a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aa6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e004      	b.n	8008abc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ad6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e01a      	b.n	8008b20 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d114      	bne.n	8008b1e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b12:	2181      	movs	r1, #129	; 0x81
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 fd8b 	bl	800a630 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e016      	b.n	8008b74 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	7c1b      	ldrb	r3, [r3, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d109      	bne.n	8008b62 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b58:	2101      	movs	r1, #1
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f001 fd89 	bl	800a672 <USBD_LL_PrepareReceive>
 8008b60:	e007      	b.n	8008b72 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b68:	2340      	movs	r3, #64	; 0x40
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 fd80 	bl	800a672 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e01f      	b.n	8008bd4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	79fa      	ldrb	r2, [r7, #7]
 8008bc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f001 fbe7 	bl	800a39c <USBD_LL_Init>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e016      	b.n	8008c22 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00b      	beq.n	8008c20 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	f107 020e 	add.w	r2, r7, #14
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	4602      	mov	r2, r0
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 fc12 	bl	800a45c <USBD_LL_Start>
 8008c38:	4603      	mov	r3, r0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b083      	sub	sp, #12
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c64:	2303      	movs	r3, #3
 8008c66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d009      	beq.n	8008c86 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	78fa      	ldrb	r2, [r7, #3]
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	4798      	blx	r3
 8008c82:	4603      	mov	r3, r0
 8008c84:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d007      	beq.n	8008cb6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	78fa      	ldrb	r2, [r7, #3]
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	4798      	blx	r3
  }

  return USBD_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 ff46 	bl	8009b64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cf4:	f003 031f 	and.w	r3, r3, #31
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d01a      	beq.n	8008d32 <USBD_LL_SetupStage+0x72>
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d822      	bhi.n	8008d46 <USBD_LL_SetupStage+0x86>
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <USBD_LL_SetupStage+0x4a>
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d00a      	beq.n	8008d1e <USBD_LL_SetupStage+0x5e>
 8008d08:	e01d      	b.n	8008d46 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f9ee 	bl	80090f4 <USBD_StdDevReq>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d1c:	e020      	b.n	8008d60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fa52 	bl	80091d0 <USBD_StdItfReq>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d30:	e016      	b.n	8008d60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa91 	bl	8009262 <USBD_StdEPReq>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]
      break;
 8008d44:	e00c      	b.n	8008d60 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 fbe1 	bl	800a51c <USBD_LL_StallEP>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d5e:	bf00      	nop
  }

  return ret;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b086      	sub	sp, #24
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	460b      	mov	r3, r1
 8008d74:	607a      	str	r2, [r7, #4]
 8008d76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d138      	bne.n	8008df0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d14a      	bne.n	8008e26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d913      	bls.n	8008dc4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	1ad2      	subs	r2, r2, r3
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	4293      	cmp	r3, r2
 8008db4:	bf28      	it	cs
 8008db6:	4613      	movcs	r3, r2
 8008db8:	461a      	mov	r2, r3
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 ffc5 	bl	8009d4c <USBD_CtlContinueRx>
 8008dc2:	e030      	b.n	8008e26 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d10b      	bne.n	8008de8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 ffc0 	bl	8009d6e <USBD_CtlSendStatus>
 8008dee:	e01a      	b.n	8008e26 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d114      	bne.n	8008e26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00e      	beq.n	8008e26 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	7afa      	ldrb	r2, [r7, #11]
 8008e12:	4611      	mov	r1, r2
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	4798      	blx	r3
 8008e18:	4603      	mov	r3, r0
 8008e1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	e000      	b.n	8008e28 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d16b      	bne.n	8008f1c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3314      	adds	r3, #20
 8008e48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d156      	bne.n	8008f02 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d914      	bls.n	8008e8a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	1ad2      	subs	r2, r2, r3
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	461a      	mov	r2, r3
 8008e74:	6879      	ldr	r1, [r7, #4]
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 ff3a 	bl	8009cf0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2100      	movs	r1, #0
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f001 fbf5 	bl	800a672 <USBD_LL_PrepareReceive>
 8008e88:	e03b      	b.n	8008f02 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d11c      	bne.n	8008ed0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d316      	bcc.n	8008ed0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d20f      	bcs.n	8008ed0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 ff1b 	bl	8009cf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f001 fbd2 	bl	800a672 <USBD_LL_PrepareReceive>
 8008ece:	e018      	b.n	8008f02 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d10b      	bne.n	8008ef4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef4:	2180      	movs	r1, #128	; 0x80
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f001 fb10 	bl	800a51c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 ff49 	bl	8009d94 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d122      	bne.n	8008f52 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7ff fe98 	bl	8008c42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f1a:	e01a      	b.n	8008f52 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d114      	bne.n	8008f52 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00e      	beq.n	8008f52 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	7afa      	ldrb	r2, [r7, #11]
 8008f3e:	4611      	mov	r1, r2
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	4798      	blx	r3
 8008f44:	4603      	mov	r3, r0
 8008f46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	e000      	b.n	8008f54 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e02f      	b.n	8008ff0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00f      	beq.n	8008fba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d009      	beq.n	8008fba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6852      	ldr	r2, [r2, #4]
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fba:	2340      	movs	r3, #64	; 0x40
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 fa66 	bl	800a492 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2240      	movs	r2, #64	; 0x40
 8008fd2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fd6:	2340      	movs	r3, #64	; 0x40
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2180      	movs	r1, #128	; 0x80
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 fa58 	bl	800a492 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2240      	movs	r2, #64	; 0x40
 8008fec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	78fa      	ldrb	r2, [r7, #3]
 8009008:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009026:	b2da      	uxtb	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2204      	movs	r2, #4
 8009032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b04      	cmp	r3, #4
 8009056:	d106      	bne.n	8009066 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800905e:	b2da      	uxtb	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009086:	2303      	movs	r3, #3
 8009088:	e012      	b.n	80090b0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b03      	cmp	r3, #3
 8009094:	d10b      	bne.n	80090ae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	3301      	adds	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090d6:	8a3b      	ldrh	r3, [r7, #16]
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	b21a      	sxth	r2, r3
 80090dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	b21b      	sxth	r3, r3
 80090e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090e6:	89fb      	ldrh	r3, [r7, #14]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	371c      	adds	r7, #28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800910a:	2b40      	cmp	r3, #64	; 0x40
 800910c:	d005      	beq.n	800911a <USBD_StdDevReq+0x26>
 800910e:	2b40      	cmp	r3, #64	; 0x40
 8009110:	d853      	bhi.n	80091ba <USBD_StdDevReq+0xc6>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00b      	beq.n	800912e <USBD_StdDevReq+0x3a>
 8009116:	2b20      	cmp	r3, #32
 8009118:	d14f      	bne.n	80091ba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	4798      	blx	r3
 8009128:	4603      	mov	r3, r0
 800912a:	73fb      	strb	r3, [r7, #15]
      break;
 800912c:	e04a      	b.n	80091c4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	2b09      	cmp	r3, #9
 8009134:	d83b      	bhi.n	80091ae <USBD_StdDevReq+0xba>
 8009136:	a201      	add	r2, pc, #4	; (adr r2, 800913c <USBD_StdDevReq+0x48>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	08009191 	.word	0x08009191
 8009140:	080091a5 	.word	0x080091a5
 8009144:	080091af 	.word	0x080091af
 8009148:	0800919b 	.word	0x0800919b
 800914c:	080091af 	.word	0x080091af
 8009150:	0800916f 	.word	0x0800916f
 8009154:	08009165 	.word	0x08009165
 8009158:	080091af 	.word	0x080091af
 800915c:	08009187 	.word	0x08009187
 8009160:	08009179 	.word	0x08009179
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f9de 	bl	8009528 <USBD_GetDescriptor>
          break;
 800916c:	e024      	b.n	80091b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fb6d 	bl	8009850 <USBD_SetAddress>
          break;
 8009176:	e01f      	b.n	80091b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fbac 	bl	80098d8 <USBD_SetConfig>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
          break;
 8009184:	e018      	b.n	80091b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fc4b 	bl	8009a24 <USBD_GetConfig>
          break;
 800918e:	e013      	b.n	80091b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fc7c 	bl	8009a90 <USBD_GetStatus>
          break;
 8009198:	e00e      	b.n	80091b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fcab 	bl	8009af8 <USBD_SetFeature>
          break;
 80091a2:	e009      	b.n	80091b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fcba 	bl	8009b20 <USBD_ClrFeature>
          break;
 80091ac:	e004      	b.n	80091b8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fd11 	bl	8009bd8 <USBD_CtlError>
          break;
 80091b6:	bf00      	nop
      }
      break;
 80091b8:	e004      	b.n	80091c4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fd0b 	bl	8009bd8 <USBD_CtlError>
      break;
 80091c2:	bf00      	nop
  }

  return ret;
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop

080091d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	d005      	beq.n	80091f6 <USBD_StdItfReq+0x26>
 80091ea:	2b40      	cmp	r3, #64	; 0x40
 80091ec:	d82f      	bhi.n	800924e <USBD_StdItfReq+0x7e>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <USBD_StdItfReq+0x26>
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	d12b      	bne.n	800924e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	3b01      	subs	r3, #1
 8009200:	2b02      	cmp	r3, #2
 8009202:	d81d      	bhi.n	8009240 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	889b      	ldrh	r3, [r3, #4]
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b01      	cmp	r3, #1
 800920c:	d813      	bhi.n	8009236 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	4798      	blx	r3
 800921c:	4603      	mov	r3, r0
 800921e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	88db      	ldrh	r3, [r3, #6]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d110      	bne.n	800924a <USBD_StdItfReq+0x7a>
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10d      	bne.n	800924a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fd9d 	bl	8009d6e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009234:	e009      	b.n	800924a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fccd 	bl	8009bd8 <USBD_CtlError>
          break;
 800923e:	e004      	b.n	800924a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fcc8 	bl	8009bd8 <USBD_CtlError>
          break;
 8009248:	e000      	b.n	800924c <USBD_StdItfReq+0x7c>
          break;
 800924a:	bf00      	nop
      }
      break;
 800924c:	e004      	b.n	8009258 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fcc1 	bl	8009bd8 <USBD_CtlError>
      break;
 8009256:	bf00      	nop
  }

  return ret;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	889b      	ldrh	r3, [r3, #4]
 8009274:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800927e:	2b40      	cmp	r3, #64	; 0x40
 8009280:	d007      	beq.n	8009292 <USBD_StdEPReq+0x30>
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	f200 8145 	bhi.w	8009512 <USBD_StdEPReq+0x2b0>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00c      	beq.n	80092a6 <USBD_StdEPReq+0x44>
 800928c:	2b20      	cmp	r3, #32
 800928e:	f040 8140 	bne.w	8009512 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]
      break;
 80092a4:	e13a      	b.n	800951c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	785b      	ldrb	r3, [r3, #1]
 80092aa:	2b03      	cmp	r3, #3
 80092ac:	d007      	beq.n	80092be <USBD_StdEPReq+0x5c>
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	f300 8129 	bgt.w	8009506 <USBD_StdEPReq+0x2a4>
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d07f      	beq.n	80093b8 <USBD_StdEPReq+0x156>
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d03c      	beq.n	8009336 <USBD_StdEPReq+0xd4>
 80092bc:	e123      	b.n	8009506 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d002      	beq.n	80092d0 <USBD_StdEPReq+0x6e>
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d016      	beq.n	80092fc <USBD_StdEPReq+0x9a>
 80092ce:	e02c      	b.n	800932a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00d      	beq.n	80092f2 <USBD_StdEPReq+0x90>
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b80      	cmp	r3, #128	; 0x80
 80092da:	d00a      	beq.n	80092f2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 f91b 	bl	800a51c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092e6:	2180      	movs	r1, #128	; 0x80
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 f917 	bl	800a51c <USBD_LL_StallEP>
 80092ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092f0:	e020      	b.n	8009334 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fc6f 	bl	8009bd8 <USBD_CtlError>
              break;
 80092fa:	e01b      	b.n	8009334 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	885b      	ldrh	r3, [r3, #2]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10e      	bne.n	8009322 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00b      	beq.n	8009322 <USBD_StdEPReq+0xc0>
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b80      	cmp	r3, #128	; 0x80
 800930e:	d008      	beq.n	8009322 <USBD_StdEPReq+0xc0>
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	88db      	ldrh	r3, [r3, #6]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d104      	bne.n	8009322 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 f8fd 	bl	800a51c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fd23 	bl	8009d6e <USBD_CtlSendStatus>

              break;
 8009328:	e004      	b.n	8009334 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fc53 	bl	8009bd8 <USBD_CtlError>
              break;
 8009332:	bf00      	nop
          }
          break;
 8009334:	e0ec      	b.n	8009510 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b02      	cmp	r3, #2
 8009340:	d002      	beq.n	8009348 <USBD_StdEPReq+0xe6>
 8009342:	2b03      	cmp	r3, #3
 8009344:	d016      	beq.n	8009374 <USBD_StdEPReq+0x112>
 8009346:	e030      	b.n	80093aa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00d      	beq.n	800936a <USBD_StdEPReq+0x108>
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	2b80      	cmp	r3, #128	; 0x80
 8009352:	d00a      	beq.n	800936a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f001 f8df 	bl	800a51c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800935e:	2180      	movs	r1, #128	; 0x80
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 f8db 	bl	800a51c <USBD_LL_StallEP>
 8009366:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009368:	e025      	b.n	80093b6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fc33 	bl	8009bd8 <USBD_CtlError>
              break;
 8009372:	e020      	b.n	80093b6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	885b      	ldrh	r3, [r3, #2]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d11b      	bne.n	80093b4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800937c:	7bbb      	ldrb	r3, [r7, #14]
 800937e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009382:	2b00      	cmp	r3, #0
 8009384:	d004      	beq.n	8009390 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 f8e5 	bl	800a55a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fcec 	bl	8009d6e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	4798      	blx	r3
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80093a8:	e004      	b.n	80093b4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fc13 	bl	8009bd8 <USBD_CtlError>
              break;
 80093b2:	e000      	b.n	80093b6 <USBD_StdEPReq+0x154>
              break;
 80093b4:	bf00      	nop
          }
          break;
 80093b6:	e0ab      	b.n	8009510 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d002      	beq.n	80093ca <USBD_StdEPReq+0x168>
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d032      	beq.n	800942e <USBD_StdEPReq+0x1cc>
 80093c8:	e097      	b.n	80094fa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <USBD_StdEPReq+0x17e>
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	2b80      	cmp	r3, #128	; 0x80
 80093d4:	d004      	beq.n	80093e0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fbfd 	bl	8009bd8 <USBD_CtlError>
                break;
 80093de:	e091      	b.n	8009504 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	da0b      	bge.n	8009400 <USBD_StdEPReq+0x19e>
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
 80093ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ee:	4613      	mov	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	3310      	adds	r3, #16
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	4413      	add	r3, r2
 80093fc:	3304      	adds	r3, #4
 80093fe:	e00b      	b.n	8009418 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009406:	4613      	mov	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	4413      	add	r3, r2
 8009416:	3304      	adds	r3, #4
 8009418:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2200      	movs	r2, #0
 800941e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2202      	movs	r2, #2
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fc47 	bl	8009cba <USBD_CtlSendData>
              break;
 800942c:	e06a      	b.n	8009504 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800942e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009432:	2b00      	cmp	r3, #0
 8009434:	da11      	bge.n	800945a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	f003 020f 	and.w	r2, r3, #15
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	3324      	adds	r3, #36	; 0x24
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d117      	bne.n	8009480 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fbc0 	bl	8009bd8 <USBD_CtlError>
                  break;
 8009458:	e054      	b.n	8009504 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	f003 020f 	and.w	r2, r3, #15
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	440b      	add	r3, r1
 800946c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d104      	bne.n	8009480 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fbad 	bl	8009bd8 <USBD_CtlError>
                  break;
 800947e:	e041      	b.n	8009504 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009484:	2b00      	cmp	r3, #0
 8009486:	da0b      	bge.n	80094a0 <USBD_StdEPReq+0x23e>
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	3310      	adds	r3, #16
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	4413      	add	r3, r2
 800949c:	3304      	adds	r3, #4
 800949e:	e00b      	b.n	80094b8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	4413      	add	r3, r2
 80094b6:	3304      	adds	r3, #4
 80094b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <USBD_StdEPReq+0x264>
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	2b80      	cmp	r3, #128	; 0x80
 80094c4:	d103      	bne.n	80094ce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	e00e      	b.n	80094ec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f001 f860 	bl	800a598 <USBD_LL_IsStallEP>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2201      	movs	r2, #1
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	e002      	b.n	80094ec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	2202      	movs	r2, #2
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fbe1 	bl	8009cba <USBD_CtlSendData>
              break;
 80094f8:	e004      	b.n	8009504 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fb6b 	bl	8009bd8 <USBD_CtlError>
              break;
 8009502:	bf00      	nop
          }
          break;
 8009504:	e004      	b.n	8009510 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fb65 	bl	8009bd8 <USBD_CtlError>
          break;
 800950e:	bf00      	nop
      }
      break;
 8009510:	e004      	b.n	800951c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fb5f 	bl	8009bd8 <USBD_CtlError>
      break;
 800951a:	bf00      	nop
  }

  return ret;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009536:	2300      	movs	r3, #0
 8009538:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	885b      	ldrh	r3, [r3, #2]
 8009542:	0a1b      	lsrs	r3, r3, #8
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	2b0e      	cmp	r3, #14
 800954a:	f200 8152 	bhi.w	80097f2 <USBD_GetDescriptor+0x2ca>
 800954e:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <USBD_GetDescriptor+0x2c>)
 8009550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009554:	080095c5 	.word	0x080095c5
 8009558:	080095dd 	.word	0x080095dd
 800955c:	0800961d 	.word	0x0800961d
 8009560:	080097f3 	.word	0x080097f3
 8009564:	080097f3 	.word	0x080097f3
 8009568:	08009793 	.word	0x08009793
 800956c:	080097bf 	.word	0x080097bf
 8009570:	080097f3 	.word	0x080097f3
 8009574:	080097f3 	.word	0x080097f3
 8009578:	080097f3 	.word	0x080097f3
 800957c:	080097f3 	.word	0x080097f3
 8009580:	080097f3 	.word	0x080097f3
 8009584:	080097f3 	.word	0x080097f3
 8009588:	080097f3 	.word	0x080097f3
 800958c:	08009591 	.word	0x08009591
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00b      	beq.n	80095b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a2:	69db      	ldr	r3, [r3, #28]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	7c12      	ldrb	r2, [r2, #16]
 80095a8:	f107 0108 	add.w	r1, r7, #8
 80095ac:	4610      	mov	r0, r2
 80095ae:	4798      	blx	r3
 80095b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095b2:	e126      	b.n	8009802 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fb0e 	bl	8009bd8 <USBD_CtlError>
        err++;
 80095bc:	7afb      	ldrb	r3, [r7, #11]
 80095be:	3301      	adds	r3, #1
 80095c0:	72fb      	strb	r3, [r7, #11]
      break;
 80095c2:	e11e      	b.n	8009802 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	7c12      	ldrb	r2, [r2, #16]
 80095d0:	f107 0108 	add.w	r1, r7, #8
 80095d4:	4610      	mov	r0, r2
 80095d6:	4798      	blx	r3
 80095d8:	60f8      	str	r0, [r7, #12]
      break;
 80095da:	e112      	b.n	8009802 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	7c1b      	ldrb	r3, [r3, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10d      	bne.n	8009600 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ec:	f107 0208 	add.w	r2, r7, #8
 80095f0:	4610      	mov	r0, r2
 80095f2:	4798      	blx	r3
 80095f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	3301      	adds	r3, #1
 80095fa:	2202      	movs	r2, #2
 80095fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095fe:	e100      	b.n	8009802 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	f107 0208 	add.w	r2, r7, #8
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
 8009610:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3301      	adds	r3, #1
 8009616:	2202      	movs	r2, #2
 8009618:	701a      	strb	r2, [r3, #0]
      break;
 800961a:	e0f2      	b.n	8009802 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	885b      	ldrh	r3, [r3, #2]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b05      	cmp	r3, #5
 8009624:	f200 80ac 	bhi.w	8009780 <USBD_GetDescriptor+0x258>
 8009628:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <USBD_GetDescriptor+0x108>)
 800962a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962e:	bf00      	nop
 8009630:	08009649 	.word	0x08009649
 8009634:	0800967d 	.word	0x0800967d
 8009638:	080096b1 	.word	0x080096b1
 800963c:	080096e5 	.word	0x080096e5
 8009640:	08009719 	.word	0x08009719
 8009644:	0800974d 	.word	0x0800974d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00b      	beq.n	800966c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	7c12      	ldrb	r2, [r2, #16]
 8009660:	f107 0108 	add.w	r1, r7, #8
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
 8009668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800966a:	e091      	b.n	8009790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fab2 	bl	8009bd8 <USBD_CtlError>
            err++;
 8009674:	7afb      	ldrb	r3, [r7, #11]
 8009676:	3301      	adds	r3, #1
 8009678:	72fb      	strb	r3, [r7, #11]
          break;
 800967a:	e089      	b.n	8009790 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	7c12      	ldrb	r2, [r2, #16]
 8009694:	f107 0108 	add.w	r1, r7, #8
 8009698:	4610      	mov	r0, r2
 800969a:	4798      	blx	r3
 800969c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800969e:	e077      	b.n	8009790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fa98 	bl	8009bd8 <USBD_CtlError>
            err++;
 80096a8:	7afb      	ldrb	r3, [r7, #11]
 80096aa:	3301      	adds	r3, #1
 80096ac:	72fb      	strb	r3, [r7, #11]
          break;
 80096ae:	e06f      	b.n	8009790 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00b      	beq.n	80096d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	7c12      	ldrb	r2, [r2, #16]
 80096c8:	f107 0108 	add.w	r1, r7, #8
 80096cc:	4610      	mov	r0, r2
 80096ce:	4798      	blx	r3
 80096d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096d2:	e05d      	b.n	8009790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa7e 	bl	8009bd8 <USBD_CtlError>
            err++;
 80096dc:	7afb      	ldrb	r3, [r7, #11]
 80096de:	3301      	adds	r3, #1
 80096e0:	72fb      	strb	r3, [r7, #11]
          break;
 80096e2:	e055      	b.n	8009790 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00b      	beq.n	8009708 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	7c12      	ldrb	r2, [r2, #16]
 80096fc:	f107 0108 	add.w	r1, r7, #8
 8009700:	4610      	mov	r0, r2
 8009702:	4798      	blx	r3
 8009704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009706:	e043      	b.n	8009790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa64 	bl	8009bd8 <USBD_CtlError>
            err++;
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	3301      	adds	r3, #1
 8009714:	72fb      	strb	r3, [r7, #11]
          break;
 8009716:	e03b      	b.n	8009790 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00b      	beq.n	800973c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	7c12      	ldrb	r2, [r2, #16]
 8009730:	f107 0108 	add.w	r1, r7, #8
 8009734:	4610      	mov	r0, r2
 8009736:	4798      	blx	r3
 8009738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973a:	e029      	b.n	8009790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fa4a 	bl	8009bd8 <USBD_CtlError>
            err++;
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	3301      	adds	r3, #1
 8009748:	72fb      	strb	r3, [r7, #11]
          break;
 800974a:	e021      	b.n	8009790 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00b      	beq.n	8009770 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	7c12      	ldrb	r2, [r2, #16]
 8009764:	f107 0108 	add.w	r1, r7, #8
 8009768:	4610      	mov	r0, r2
 800976a:	4798      	blx	r3
 800976c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976e:	e00f      	b.n	8009790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fa30 	bl	8009bd8 <USBD_CtlError>
            err++;
 8009778:	7afb      	ldrb	r3, [r7, #11]
 800977a:	3301      	adds	r3, #1
 800977c:	72fb      	strb	r3, [r7, #11]
          break;
 800977e:	e007      	b.n	8009790 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fa28 	bl	8009bd8 <USBD_CtlError>
          err++;
 8009788:	7afb      	ldrb	r3, [r7, #11]
 800978a:	3301      	adds	r3, #1
 800978c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800978e:	bf00      	nop
      }
      break;
 8009790:	e037      	b.n	8009802 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	7c1b      	ldrb	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d109      	bne.n	80097ae <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a2:	f107 0208 	add.w	r2, r7, #8
 80097a6:	4610      	mov	r0, r2
 80097a8:	4798      	blx	r3
 80097aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097ac:	e029      	b.n	8009802 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fa11 	bl	8009bd8 <USBD_CtlError>
        err++;
 80097b6:	7afb      	ldrb	r3, [r7, #11]
 80097b8:	3301      	adds	r3, #1
 80097ba:	72fb      	strb	r3, [r7, #11]
      break;
 80097bc:	e021      	b.n	8009802 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	7c1b      	ldrb	r3, [r3, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10d      	bne.n	80097e2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ce:	f107 0208 	add.w	r2, r7, #8
 80097d2:	4610      	mov	r0, r2
 80097d4:	4798      	blx	r3
 80097d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	2207      	movs	r2, #7
 80097de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097e0:	e00f      	b.n	8009802 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 f9f7 	bl	8009bd8 <USBD_CtlError>
        err++;
 80097ea:	7afb      	ldrb	r3, [r7, #11]
 80097ec:	3301      	adds	r3, #1
 80097ee:	72fb      	strb	r3, [r7, #11]
      break;
 80097f0:	e007      	b.n	8009802 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f9ef 	bl	8009bd8 <USBD_CtlError>
      err++;
 80097fa:	7afb      	ldrb	r3, [r7, #11]
 80097fc:	3301      	adds	r3, #1
 80097fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009800:	bf00      	nop
  }

  if (err != 0U)
 8009802:	7afb      	ldrb	r3, [r7, #11]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d11e      	bne.n	8009846 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	88db      	ldrh	r3, [r3, #6]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d016      	beq.n	800983e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009810:	893b      	ldrh	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00e      	beq.n	8009834 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	88da      	ldrh	r2, [r3, #6]
 800981a:	893b      	ldrh	r3, [r7, #8]
 800981c:	4293      	cmp	r3, r2
 800981e:	bf28      	it	cs
 8009820:	4613      	movcs	r3, r2
 8009822:	b29b      	uxth	r3, r3
 8009824:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009826:	893b      	ldrh	r3, [r7, #8]
 8009828:	461a      	mov	r2, r3
 800982a:	68f9      	ldr	r1, [r7, #12]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fa44 	bl	8009cba <USBD_CtlSendData>
 8009832:	e009      	b.n	8009848 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f9ce 	bl	8009bd8 <USBD_CtlError>
 800983c:	e004      	b.n	8009848 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa95 	bl	8009d6e <USBD_CtlSendStatus>
 8009844:	e000      	b.n	8009848 <USBD_GetDescriptor+0x320>
    return;
 8009846:	bf00      	nop
  }
}
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop

08009850 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	889b      	ldrh	r3, [r3, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d131      	bne.n	80098c6 <USBD_SetAddress+0x76>
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	88db      	ldrh	r3, [r3, #6]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d12d      	bne.n	80098c6 <USBD_SetAddress+0x76>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	885b      	ldrh	r3, [r3, #2]
 800986e:	2b7f      	cmp	r3, #127	; 0x7f
 8009870:	d829      	bhi.n	80098c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	885b      	ldrh	r3, [r3, #2]
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800987c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b03      	cmp	r3, #3
 8009888:	d104      	bne.n	8009894 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f9a3 	bl	8009bd8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009892:	e01d      	b.n	80098d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7bfa      	ldrb	r2, [r7, #15]
 8009898:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fea6 	bl	800a5f2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa61 	bl	8009d6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d004      	beq.n	80098bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2202      	movs	r2, #2
 80098b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ba:	e009      	b.n	80098d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c4:	e004      	b.n	80098d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f985 	bl	8009bd8 <USBD_CtlError>
  }
}
 80098ce:	bf00      	nop
 80098d0:	bf00      	nop
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	885b      	ldrh	r3, [r3, #2]
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	4b4c      	ldr	r3, [pc, #304]	; (8009a20 <USBD_SetConfig+0x148>)
 80098ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098f0:	4b4b      	ldr	r3, [pc, #300]	; (8009a20 <USBD_SetConfig+0x148>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d905      	bls.n	8009904 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f96c 	bl	8009bd8 <USBD_CtlError>
    return USBD_FAIL;
 8009900:	2303      	movs	r3, #3
 8009902:	e088      	b.n	8009a16 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b02      	cmp	r3, #2
 800990e:	d002      	beq.n	8009916 <USBD_SetConfig+0x3e>
 8009910:	2b03      	cmp	r3, #3
 8009912:	d025      	beq.n	8009960 <USBD_SetConfig+0x88>
 8009914:	e071      	b.n	80099fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009916:	4b42      	ldr	r3, [pc, #264]	; (8009a20 <USBD_SetConfig+0x148>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01c      	beq.n	8009958 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800991e:	4b40      	ldr	r3, [pc, #256]	; (8009a20 <USBD_SetConfig+0x148>)
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009928:	4b3d      	ldr	r3, [pc, #244]	; (8009a20 <USBD_SetConfig+0x148>)
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7ff f992 	bl	8008c58 <USBD_SetClassConfig>
 8009934:	4603      	mov	r3, r0
 8009936:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d004      	beq.n	8009948 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f949 	bl	8009bd8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009946:	e065      	b.n	8009a14 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fa10 	bl	8009d6e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2203      	movs	r2, #3
 8009952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009956:	e05d      	b.n	8009a14 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fa08 	bl	8009d6e <USBD_CtlSendStatus>
      break;
 800995e:	e059      	b.n	8009a14 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009960:	4b2f      	ldr	r3, [pc, #188]	; (8009a20 <USBD_SetConfig+0x148>)
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d112      	bne.n	800998e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009970:	4b2b      	ldr	r3, [pc, #172]	; (8009a20 <USBD_SetConfig+0x148>)
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	461a      	mov	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800997a:	4b29      	ldr	r3, [pc, #164]	; (8009a20 <USBD_SetConfig+0x148>)
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff f985 	bl	8008c90 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f9f1 	bl	8009d6e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800998c:	e042      	b.n	8009a14 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800998e:	4b24      	ldr	r3, [pc, #144]	; (8009a20 <USBD_SetConfig+0x148>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	429a      	cmp	r2, r3
 800999a:	d02a      	beq.n	80099f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff f973 	bl	8008c90 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80099aa:	4b1d      	ldr	r3, [pc, #116]	; (8009a20 <USBD_SetConfig+0x148>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099b4:	4b1a      	ldr	r3, [pc, #104]	; (8009a20 <USBD_SetConfig+0x148>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff f94c 	bl	8008c58 <USBD_SetClassConfig>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00f      	beq.n	80099ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f903 	bl	8009bd8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7ff f958 	bl	8008c90 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099e8:	e014      	b.n	8009a14 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f9bf 	bl	8009d6e <USBD_CtlSendStatus>
      break;
 80099f0:	e010      	b.n	8009a14 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f9bb 	bl	8009d6e <USBD_CtlSendStatus>
      break;
 80099f8:	e00c      	b.n	8009a14 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f8eb 	bl	8009bd8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a02:	4b07      	ldr	r3, [pc, #28]	; (8009a20 <USBD_SetConfig+0x148>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff f941 	bl	8008c90 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	73fb      	strb	r3, [r7, #15]
      break;
 8009a12:	bf00      	nop
  }

  return ret;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	200003ec 	.word	0x200003ec

08009a24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	88db      	ldrh	r3, [r3, #6]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d004      	beq.n	8009a40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f8cd 	bl	8009bd8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a3e:	e023      	b.n	8009a88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	dc02      	bgt.n	8009a52 <USBD_GetConfig+0x2e>
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dc03      	bgt.n	8009a58 <USBD_GetConfig+0x34>
 8009a50:	e015      	b.n	8009a7e <USBD_GetConfig+0x5a>
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d00b      	beq.n	8009a6e <USBD_GetConfig+0x4a>
 8009a56:	e012      	b.n	8009a7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3308      	adds	r3, #8
 8009a62:	2201      	movs	r2, #1
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f927 	bl	8009cba <USBD_CtlSendData>
        break;
 8009a6c:	e00c      	b.n	8009a88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	3304      	adds	r3, #4
 8009a72:	2201      	movs	r2, #1
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f91f 	bl	8009cba <USBD_CtlSendData>
        break;
 8009a7c:	e004      	b.n	8009a88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f8a9 	bl	8009bd8 <USBD_CtlError>
        break;
 8009a86:	bf00      	nop
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d81e      	bhi.n	8009ae6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	88db      	ldrh	r3, [r3, #6]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d004      	beq.n	8009aba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f890 	bl	8009bd8 <USBD_CtlError>
        break;
 8009ab8:	e01a      	b.n	8009af0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d005      	beq.n	8009ad6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f043 0202 	orr.w	r2, r3, #2
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	330c      	adds	r3, #12
 8009ada:	2202      	movs	r2, #2
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f8eb 	bl	8009cba <USBD_CtlSendData>
      break;
 8009ae4:	e004      	b.n	8009af0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f875 	bl	8009bd8 <USBD_CtlError>
      break;
 8009aee:	bf00      	nop
  }
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	885b      	ldrh	r3, [r3, #2]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d106      	bne.n	8009b18 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f92b 	bl	8009d6e <USBD_CtlSendStatus>
  }
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	3b01      	subs	r3, #1
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d80b      	bhi.n	8009b50 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	885b      	ldrh	r3, [r3, #2]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d10c      	bne.n	8009b5a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f910 	bl	8009d6e <USBD_CtlSendStatus>
      }
      break;
 8009b4e:	e004      	b.n	8009b5a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f840 	bl	8009bd8 <USBD_CtlError>
      break;
 8009b58:	e000      	b.n	8009b5c <USBD_ClrFeature+0x3c>
      break;
 8009b5a:	bf00      	nop
  }
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	781a      	ldrb	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	781a      	ldrb	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7ff fa92 	bl	80090b8 <SWAPBYTE>
 8009b94:	4603      	mov	r3, r0
 8009b96:	461a      	mov	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f7ff fa85 	bl	80090b8 <SWAPBYTE>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff fa78 	bl	80090b8 <SWAPBYTE>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	461a      	mov	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	80da      	strh	r2, [r3, #6]
}
 8009bd0:	bf00      	nop
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009be2:	2180      	movs	r1, #128	; 0x80
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fc99 	bl	800a51c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009bea:	2100      	movs	r1, #0
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fc95 	bl	800a51c <USBD_LL_StallEP>
}
 8009bf2:	bf00      	nop
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b086      	sub	sp, #24
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d036      	beq.n	8009c7e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c14:	6938      	ldr	r0, [r7, #16]
 8009c16:	f000 f836 	bl	8009c86 <USBD_GetLen>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	7812      	ldrb	r2, [r2, #0]
 8009c32:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
 8009c36:	3301      	adds	r3, #1
 8009c38:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	4413      	add	r3, r2
 8009c40:	2203      	movs	r2, #3
 8009c42:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	3301      	adds	r3, #1
 8009c48:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c4a:	e013      	b.n	8009c74 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	4413      	add	r3, r2
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	7812      	ldrb	r2, [r2, #0]
 8009c56:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	613b      	str	r3, [r7, #16]
    idx++;
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	3301      	adds	r3, #1
 8009c62:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	4413      	add	r3, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	3301      	adds	r3, #1
 8009c72:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e7      	bne.n	8009c4c <USBD_GetString+0x52>
 8009c7c:	e000      	b.n	8009c80 <USBD_GetString+0x86>
    return;
 8009c7e:	bf00      	nop
  }
}
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b085      	sub	sp, #20
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c96:	e005      	b.n	8009ca4 <USBD_GetLen+0x1e>
  {
    len++;
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1f5      	bne.n	8009c98 <USBD_GetLen+0x12>
  }

  return len;
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	60f8      	str	r0, [r7, #12]
 8009cc2:	60b9      	str	r1, [r7, #8]
 8009cc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2202      	movs	r2, #2
 8009cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	2100      	movs	r1, #0
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fca5 	bl	800a630 <USBD_LL_Transmit>

  return USBD_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	2100      	movs	r1, #0
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 fc94 	bl	800a630 <USBD_LL_Transmit>

  return USBD_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	60f8      	str	r0, [r7, #12]
 8009d1a:	60b9      	str	r1, [r7, #8]
 8009d1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2203      	movs	r2, #3
 8009d22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 fc98 	bl	800a672 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 fc87 	bl	800a672 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2204      	movs	r2, #4
 8009d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2200      	movs	r2, #0
 8009d82:	2100      	movs	r1, #0
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fc53 	bl	800a630 <USBD_LL_Transmit>

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2205      	movs	r2, #5
 8009da0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009da4:	2300      	movs	r3, #0
 8009da6:	2200      	movs	r2, #0
 8009da8:	2100      	movs	r1, #0
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fc61 	bl	800a672 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	4912      	ldr	r1, [pc, #72]	; (8009e0c <MX_USB_Device_Init+0x50>)
 8009dc4:	4812      	ldr	r0, [pc, #72]	; (8009e10 <MX_USB_Device_Init+0x54>)
 8009dc6:	f7fe fed9 	bl	8008b7c <USBD_Init>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009dd0:	f7f6 ff62 	bl	8000c98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009dd4:	490f      	ldr	r1, [pc, #60]	; (8009e14 <MX_USB_Device_Init+0x58>)
 8009dd6:	480e      	ldr	r0, [pc, #56]	; (8009e10 <MX_USB_Device_Init+0x54>)
 8009dd8:	f7fe ff00 	bl	8008bdc <USBD_RegisterClass>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009de2:	f7f6 ff59 	bl	8000c98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009de6:	490c      	ldr	r1, [pc, #48]	; (8009e18 <MX_USB_Device_Init+0x5c>)
 8009de8:	4809      	ldr	r0, [pc, #36]	; (8009e10 <MX_USB_Device_Init+0x54>)
 8009dea:	f7fe fe21 	bl	8008a30 <USBD_CDC_RegisterInterface>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d001      	beq.n	8009df8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009df4:	f7f6 ff50 	bl	8000c98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009df8:	4805      	ldr	r0, [pc, #20]	; (8009e10 <MX_USB_Device_Init+0x54>)
 8009dfa:	f7fe ff16 	bl	8008c2a <USBD_Start>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009e04:	f7f6 ff48 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009e08:	bf00      	nop
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	20000158 	.word	0x20000158
 8009e10:	200003f0 	.word	0x200003f0
 8009e14:	20000040 	.word	0x20000040
 8009e18:	20000144 	.word	0x20000144

08009e1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e20:	2200      	movs	r2, #0
 8009e22:	4905      	ldr	r1, [pc, #20]	; (8009e38 <CDC_Init_FS+0x1c>)
 8009e24:	4805      	ldr	r0, [pc, #20]	; (8009e3c <CDC_Init_FS+0x20>)
 8009e26:	f7fe fe18 	bl	8008a5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e2a:	4905      	ldr	r1, [pc, #20]	; (8009e40 <CDC_Init_FS+0x24>)
 8009e2c:	4803      	ldr	r0, [pc, #12]	; (8009e3c <CDC_Init_FS+0x20>)
 8009e2e:	f7fe fe32 	bl	8008a96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20000aa8 	.word	0x20000aa8
 8009e3c:	200003f0 	.word	0x200003f0
 8009e40:	200006c0 	.word	0x200006c0

08009e44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e44:	b480      	push	{r7}
 8009e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	6039      	str	r1, [r7, #0]
 8009e5e:	71fb      	strb	r3, [r7, #7]
 8009e60:	4613      	mov	r3, r2
 8009e62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e64:	79fb      	ldrb	r3, [r7, #7]
 8009e66:	2b23      	cmp	r3, #35	; 0x23
 8009e68:	d84a      	bhi.n	8009f00 <CDC_Control_FS+0xac>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <CDC_Control_FS+0x1c>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009f01 	.word	0x08009f01
 8009e74:	08009f01 	.word	0x08009f01
 8009e78:	08009f01 	.word	0x08009f01
 8009e7c:	08009f01 	.word	0x08009f01
 8009e80:	08009f01 	.word	0x08009f01
 8009e84:	08009f01 	.word	0x08009f01
 8009e88:	08009f01 	.word	0x08009f01
 8009e8c:	08009f01 	.word	0x08009f01
 8009e90:	08009f01 	.word	0x08009f01
 8009e94:	08009f01 	.word	0x08009f01
 8009e98:	08009f01 	.word	0x08009f01
 8009e9c:	08009f01 	.word	0x08009f01
 8009ea0:	08009f01 	.word	0x08009f01
 8009ea4:	08009f01 	.word	0x08009f01
 8009ea8:	08009f01 	.word	0x08009f01
 8009eac:	08009f01 	.word	0x08009f01
 8009eb0:	08009f01 	.word	0x08009f01
 8009eb4:	08009f01 	.word	0x08009f01
 8009eb8:	08009f01 	.word	0x08009f01
 8009ebc:	08009f01 	.word	0x08009f01
 8009ec0:	08009f01 	.word	0x08009f01
 8009ec4:	08009f01 	.word	0x08009f01
 8009ec8:	08009f01 	.word	0x08009f01
 8009ecc:	08009f01 	.word	0x08009f01
 8009ed0:	08009f01 	.word	0x08009f01
 8009ed4:	08009f01 	.word	0x08009f01
 8009ed8:	08009f01 	.word	0x08009f01
 8009edc:	08009f01 	.word	0x08009f01
 8009ee0:	08009f01 	.word	0x08009f01
 8009ee4:	08009f01 	.word	0x08009f01
 8009ee8:	08009f01 	.word	0x08009f01
 8009eec:	08009f01 	.word	0x08009f01
 8009ef0:	08009f01 	.word	0x08009f01
 8009ef4:	08009f01 	.word	0x08009f01
 8009ef8:	08009f01 	.word	0x08009f01
 8009efc:	08009f01 	.word	0x08009f01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f00:	bf00      	nop
  }

  return (USBD_OK);
 8009f02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7f6 f97b 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	4805      	ldr	r0, [pc, #20]	; (8009f3c <CDC_Receive_FS+0x2c>)
 8009f26:	f7fe fdb6 	bl	8008a96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f2a:	4804      	ldr	r0, [pc, #16]	; (8009f3c <CDC_Receive_FS+0x2c>)
 8009f2c:	f7fe fdfc 	bl	8008b28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	200003f0 	.word	0x200003f0

08009f40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f50:	4b0d      	ldr	r3, [pc, #52]	; (8009f88 <CDC_Transmit_FS+0x48>)
 8009f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e00b      	b.n	8009f7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f66:	887b      	ldrh	r3, [r7, #2]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	4806      	ldr	r0, [pc, #24]	; (8009f88 <CDC_Transmit_FS+0x48>)
 8009f6e:	f7fe fd74 	bl	8008a5a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f72:	4805      	ldr	r0, [pc, #20]	; (8009f88 <CDC_Transmit_FS+0x48>)
 8009f74:	f7fe fda8 	bl	8008ac8 <USBD_CDC_TransmitPacket>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	200003f0 	.word	0x200003f0

08009f8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	4613      	mov	r3, r2
 8009f98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	371c      	adds	r7, #28
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
	...

08009fb0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	6039      	str	r1, [r7, #0]
 8009fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2212      	movs	r2, #18
 8009fc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009fc2:	4b03      	ldr	r3, [pc, #12]	; (8009fd0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	20000178 	.word	0x20000178

08009fd4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2204      	movs	r2, #4
 8009fe4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009fe6:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	2000018c 	.word	0x2000018c

08009ff8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d105      	bne.n	800a016 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	4907      	ldr	r1, [pc, #28]	; (800a02c <USBD_CDC_ProductStrDescriptor+0x34>)
 800a00e:	4808      	ldr	r0, [pc, #32]	; (800a030 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a010:	f7ff fdf3 	bl	8009bfa <USBD_GetString>
 800a014:	e004      	b.n	800a020 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	4904      	ldr	r1, [pc, #16]	; (800a02c <USBD_CDC_ProductStrDescriptor+0x34>)
 800a01a:	4805      	ldr	r0, [pc, #20]	; (800a030 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a01c:	f7ff fded 	bl	8009bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a020:	4b02      	ldr	r3, [pc, #8]	; (800a02c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20000e90 	.word	0x20000e90
 800a030:	0800a868 	.word	0x0800a868

0800a034 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	6039      	str	r1, [r7, #0]
 800a03e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	4904      	ldr	r1, [pc, #16]	; (800a054 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a044:	4804      	ldr	r0, [pc, #16]	; (800a058 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a046:	f7ff fdd8 	bl	8009bfa <USBD_GetString>
  return USBD_StrDesc;
 800a04a:	4b02      	ldr	r3, [pc, #8]	; (800a054 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20000e90 	.word	0x20000e90
 800a058:	0800a880 	.word	0x0800a880

0800a05c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	6039      	str	r1, [r7, #0]
 800a066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	221a      	movs	r2, #26
 800a06c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a06e:	f000 f843 	bl	800a0f8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a072:	4b02      	ldr	r3, [pc, #8]	; (800a07c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20000190 	.word	0x20000190

0800a080 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	6039      	str	r1, [r7, #0]
 800a08a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d105      	bne.n	800a09e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	4907      	ldr	r1, [pc, #28]	; (800a0b4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a096:	4808      	ldr	r0, [pc, #32]	; (800a0b8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a098:	f7ff fdaf 	bl	8009bfa <USBD_GetString>
 800a09c:	e004      	b.n	800a0a8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	4904      	ldr	r1, [pc, #16]	; (800a0b4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a0a2:	4805      	ldr	r0, [pc, #20]	; (800a0b8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a0a4:	f7ff fda9 	bl	8009bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0a8:	4b02      	ldr	r3, [pc, #8]	; (800a0b4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20000e90 	.word	0x20000e90
 800a0b8:	0800a894 	.word	0x0800a894

0800a0bc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	6039      	str	r1, [r7, #0]
 800a0c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d105      	bne.n	800a0da <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	4907      	ldr	r1, [pc, #28]	; (800a0f0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a0d2:	4808      	ldr	r0, [pc, #32]	; (800a0f4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a0d4:	f7ff fd91 	bl	8009bfa <USBD_GetString>
 800a0d8:	e004      	b.n	800a0e4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4904      	ldr	r1, [pc, #16]	; (800a0f0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a0de:	4805      	ldr	r0, [pc, #20]	; (800a0f4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a0e0:	f7ff fd8b 	bl	8009bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000e90 	.word	0x20000e90
 800a0f4:	0800a8a0 	.word	0x0800a8a0

0800a0f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0fe:	4b0f      	ldr	r3, [pc, #60]	; (800a13c <Get_SerialNum+0x44>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a104:	4b0e      	ldr	r3, [pc, #56]	; (800a140 <Get_SerialNum+0x48>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a10a:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <Get_SerialNum+0x4c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4413      	add	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d009      	beq.n	800a132 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a11e:	2208      	movs	r2, #8
 800a120:	4909      	ldr	r1, [pc, #36]	; (800a148 <Get_SerialNum+0x50>)
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 f814 	bl	800a150 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a128:	2204      	movs	r2, #4
 800a12a:	4908      	ldr	r1, [pc, #32]	; (800a14c <Get_SerialNum+0x54>)
 800a12c:	68b8      	ldr	r0, [r7, #8]
 800a12e:	f000 f80f 	bl	800a150 <IntToUnicode>
  }
}
 800a132:	bf00      	nop
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	1fff7590 	.word	0x1fff7590
 800a140:	1fff7594 	.word	0x1fff7594
 800a144:	1fff7598 	.word	0x1fff7598
 800a148:	20000192 	.word	0x20000192
 800a14c:	200001a2 	.word	0x200001a2

0800a150 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	4613      	mov	r3, r2
 800a15c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a162:	2300      	movs	r3, #0
 800a164:	75fb      	strb	r3, [r7, #23]
 800a166:	e027      	b.n	800a1b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	0f1b      	lsrs	r3, r3, #28
 800a16c:	2b09      	cmp	r3, #9
 800a16e:	d80b      	bhi.n	800a188 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	0f1b      	lsrs	r3, r3, #28
 800a174:	b2da      	uxtb	r2, r3
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	4619      	mov	r1, r3
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	440b      	add	r3, r1
 800a180:	3230      	adds	r2, #48	; 0x30
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	e00a      	b.n	800a19e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	0f1b      	lsrs	r3, r3, #28
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	4619      	mov	r1, r3
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	440b      	add	r3, r1
 800a198:	3237      	adds	r2, #55	; 0x37
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	011b      	lsls	r3, r3, #4
 800a1a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	75fb      	strb	r3, [r7, #23]
 800a1b8:	7dfa      	ldrb	r2, [r7, #23]
 800a1ba:	79fb      	ldrb	r3, [r7, #7]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d3d3      	bcc.n	800a168 <IntToUnicode+0x18>
  }
}
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b094      	sub	sp, #80	; 0x50
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a1d8:	f107 030c 	add.w	r3, r7, #12
 800a1dc:	2244      	movs	r2, #68	; 0x44
 800a1de:	2100      	movs	r1, #0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fb2d 	bl	800a840 <memset>
  if(pcdHandle->Instance==USB)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a15      	ldr	r2, [pc, #84]	; (800a240 <HAL_PCD_MspInit+0x70>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d122      	bne.n	800a236 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a1f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a1fa:	f107 030c 	add.w	r3, r7, #12
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7f9 feb8 	bl	8003f74 <HAL_RCCEx_PeriphCLKConfig>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a20a:	f7f6 fd45 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a20e:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <HAL_PCD_MspInit+0x74>)
 800a210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a212:	4a0c      	ldr	r2, [pc, #48]	; (800a244 <HAL_PCD_MspInit+0x74>)
 800a214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a218:	6593      	str	r3, [r2, #88]	; 0x58
 800a21a:	4b0a      	ldr	r3, [pc, #40]	; (800a244 <HAL_PCD_MspInit+0x74>)
 800a21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a222:	60bb      	str	r3, [r7, #8]
 800a224:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a226:	2200      	movs	r2, #0
 800a228:	2100      	movs	r1, #0
 800a22a:	2014      	movs	r0, #20
 800a22c:	f7f7 f947 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a230:	2014      	movs	r0, #20
 800a232:	f7f7 f95e 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a236:	bf00      	nop
 800a238:	3750      	adds	r7, #80	; 0x50
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	40005c00 	.word	0x40005c00
 800a244:	40021000 	.word	0x40021000

0800a248 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fe fd2e 	bl	8008cc0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a264:	bf00      	nop
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a27e:	78fa      	ldrb	r2, [r7, #3]
 800a280:	6879      	ldr	r1, [r7, #4]
 800a282:	4613      	mov	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	00db      	lsls	r3, r3, #3
 800a28a:	440b      	add	r3, r1
 800a28c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	78fb      	ldrb	r3, [r7, #3]
 800a294:	4619      	mov	r1, r3
 800a296:	f7fe fd68 	bl	8008d6a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a29a:	bf00      	nop
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a2b4:	78fa      	ldrb	r2, [r7, #3]
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	440b      	add	r3, r1
 800a2c2:	333c      	adds	r3, #60	; 0x3c
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	78fb      	ldrb	r3, [r7, #3]
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	f7fe fdb1 	bl	8008e30 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fe fec5 	bl	8009074 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a2ea:	bf00      	nop
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d001      	beq.n	800a30a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a306:	f7f6 fcc7 	bl	8000c98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a310:	7bfa      	ldrb	r2, [r7, #15]
 800a312:	4611      	mov	r1, r2
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe fe6f 	bl	8008ff8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe fe1b 	bl	8008f5c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a326:	bf00      	nop
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
	...

0800a330 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe fe6a 	bl	8009018 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d005      	beq.n	800a358 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a34c:	4b04      	ldr	r3, [pc, #16]	; (800a360 <HAL_PCD_SuspendCallback+0x30>)
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	4a03      	ldr	r2, [pc, #12]	; (800a360 <HAL_PCD_SuspendCallback+0x30>)
 800a352:	f043 0306 	orr.w	r3, r3, #6
 800a356:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a358:	bf00      	nop
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	e000ed00 	.word	0xe000ed00

0800a364 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d007      	beq.n	800a384 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a374:	4b08      	ldr	r3, [pc, #32]	; (800a398 <HAL_PCD_ResumeCallback+0x34>)
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	4a07      	ldr	r2, [pc, #28]	; (800a398 <HAL_PCD_ResumeCallback+0x34>)
 800a37a:	f023 0306 	bic.w	r3, r3, #6
 800a37e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a380:	f000 f9fa 	bl	800a778 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fe5a 	bl	8009044 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	e000ed00 	.word	0xe000ed00

0800a39c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a3a4:	4a2b      	ldr	r2, [pc, #172]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a29      	ldr	r2, [pc, #164]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a3b4:	4b27      	ldr	r3, [pc, #156]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3b6:	4a28      	ldr	r2, [pc, #160]	; (800a458 <USBD_LL_Init+0xbc>)
 800a3b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a3ba:	4b26      	ldr	r3, [pc, #152]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3bc:	2208      	movs	r2, #8
 800a3be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a3c0:	4b24      	ldr	r3, [pc, #144]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a3c6:	4b23      	ldr	r3, [pc, #140]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a3cc:	4b21      	ldr	r3, [pc, #132]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a3d2:	4b20      	ldr	r3, [pc, #128]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a3d8:	4b1e      	ldr	r3, [pc, #120]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a3de:	4b1d      	ldr	r3, [pc, #116]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a3e4:	481b      	ldr	r0, [pc, #108]	; (800a454 <USBD_LL_Init+0xb8>)
 800a3e6:	f7f7 faf1 	bl	80019cc <HAL_PCD_Init>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a3f0:	f7f6 fc52 	bl	8000c98 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3fa:	2318      	movs	r3, #24
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2100      	movs	r1, #0
 800a400:	f7f8 ffaa 	bl	8003358 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a40a:	2358      	movs	r3, #88	; 0x58
 800a40c:	2200      	movs	r2, #0
 800a40e:	2180      	movs	r1, #128	; 0x80
 800a410:	f7f8 ffa2 	bl	8003358 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a41a:	23c0      	movs	r3, #192	; 0xc0
 800a41c:	2200      	movs	r2, #0
 800a41e:	2181      	movs	r1, #129	; 0x81
 800a420:	f7f8 ff9a 	bl	8003358 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a42a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a42e:	2200      	movs	r2, #0
 800a430:	2101      	movs	r1, #1
 800a432:	f7f8 ff91 	bl	8003358 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a43c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a440:	2200      	movs	r2, #0
 800a442:	2182      	movs	r1, #130	; 0x82
 800a444:	f7f8 ff88 	bl	8003358 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20001090 	.word	0x20001090
 800a458:	40005c00 	.word	0x40005c00

0800a45c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a472:	4618      	mov	r0, r3
 800a474:	f7f7 fb8f 	bl	8001b96 <HAL_PCD_Start>
 800a478:	4603      	mov	r3, r0
 800a47a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 f980 	bl	800a784 <USBD_Get_USB_Status>
 800a484:	4603      	mov	r3, r0
 800a486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a488:	7bbb      	ldrb	r3, [r7, #14]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b084      	sub	sp, #16
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	4608      	mov	r0, r1
 800a49c:	4611      	mov	r1, r2
 800a49e:	461a      	mov	r2, r3
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	70fb      	strb	r3, [r7, #3]
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	70bb      	strb	r3, [r7, #2]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a4ba:	78bb      	ldrb	r3, [r7, #2]
 800a4bc:	883a      	ldrh	r2, [r7, #0]
 800a4be:	78f9      	ldrb	r1, [r7, #3]
 800a4c0:	f7f7 fcd7 	bl	8001e72 <HAL_PCD_EP_Open>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 f95a 	bl	800a784 <USBD_Get_USB_Status>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4f8:	78fa      	ldrb	r2, [r7, #3]
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7f7 fd1e 	bl	8001f3e <HAL_PCD_EP_Close>
 800a502:	4603      	mov	r3, r0
 800a504:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 f93b 	bl	800a784 <USBD_Get_USB_Status>
 800a50e:	4603      	mov	r3, r0
 800a510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a512:	7bbb      	ldrb	r3, [r7, #14]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	460b      	mov	r3, r1
 800a526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a536:	78fa      	ldrb	r2, [r7, #3]
 800a538:	4611      	mov	r1, r2
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7f7 fddf 	bl	80020fe <HAL_PCD_EP_SetStall>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a544:	7bfb      	ldrb	r3, [r7, #15]
 800a546:	4618      	mov	r0, r3
 800a548:	f000 f91c 	bl	800a784 <USBD_Get_USB_Status>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a550:	7bbb      	ldrb	r3, [r7, #14]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	460b      	mov	r3, r1
 800a564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a574:	78fa      	ldrb	r2, [r7, #3]
 800a576:	4611      	mov	r1, r2
 800a578:	4618      	mov	r0, r3
 800a57a:	f7f7 fe12 	bl	80021a2 <HAL_PCD_EP_ClrStall>
 800a57e:	4603      	mov	r3, r0
 800a580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a582:	7bfb      	ldrb	r3, [r7, #15]
 800a584:	4618      	mov	r0, r3
 800a586:	f000 f8fd 	bl	800a784 <USBD_Get_USB_Status>
 800a58a:	4603      	mov	r3, r0
 800a58c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a58e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a5aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a5ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	da0c      	bge.n	800a5ce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ba:	68f9      	ldr	r1, [r7, #12]
 800a5bc:	1c5a      	adds	r2, r3, #1
 800a5be:	4613      	mov	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	00db      	lsls	r3, r3, #3
 800a5c6:	440b      	add	r3, r1
 800a5c8:	3302      	adds	r3, #2
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	e00b      	b.n	800a5e6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5d4:	68f9      	ldr	r1, [r7, #12]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	440b      	add	r3, r1
 800a5e0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a5e4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a60c:	78fa      	ldrb	r2, [r7, #3]
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f7f7 fc09 	bl	8001e28 <HAL_PCD_SetAddress>
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 f8b1 	bl	800a784 <USBD_Get_USB_Status>
 800a622:	4603      	mov	r3, r0
 800a624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a626:	7bbb      	ldrb	r3, [r7, #14]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	607a      	str	r2, [r7, #4]
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	460b      	mov	r3, r1
 800a63e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a64e:	7af9      	ldrb	r1, [r7, #11]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	f7f7 fd10 	bl	8002078 <HAL_PCD_EP_Transmit>
 800a658:	4603      	mov	r3, r0
 800a65a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a65c:	7dfb      	ldrb	r3, [r7, #23]
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 f890 	bl	800a784 <USBD_Get_USB_Status>
 800a664:	4603      	mov	r3, r0
 800a666:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a668:	7dbb      	ldrb	r3, [r7, #22]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b086      	sub	sp, #24
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	607a      	str	r2, [r7, #4]
 800a67c:	603b      	str	r3, [r7, #0]
 800a67e:	460b      	mov	r3, r1
 800a680:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a690:	7af9      	ldrb	r1, [r7, #11]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	f7f7 fc9a 	bl	8001fce <HAL_PCD_EP_Receive>
 800a69a:	4603      	mov	r3, r0
 800a69c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 f86f 	bl	800a784 <USBD_Get_USB_Status>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3718      	adds	r7, #24
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6c6:	78fa      	ldrb	r2, [r7, #3]
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7f7 fcbc 	bl	8002048 <HAL_PCD_EP_GetRxCount>
 800a6d0:	4603      	mov	r3, r0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
	...

0800a6dc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <HAL_PCDEx_LPM_Callback+0x18>
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d013      	beq.n	800a71a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a6f2:	e023      	b.n	800a73c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d007      	beq.n	800a70c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a6fc:	f000 f83c 	bl	800a778 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a700:	4b10      	ldr	r3, [pc, #64]	; (800a744 <HAL_PCDEx_LPM_Callback+0x68>)
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	4a0f      	ldr	r2, [pc, #60]	; (800a744 <HAL_PCDEx_LPM_Callback+0x68>)
 800a706:	f023 0306 	bic.w	r3, r3, #6
 800a70a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fc96 	bl	8009044 <USBD_LL_Resume>
    break;
 800a718:	e010      	b.n	800a73c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a720:	4618      	mov	r0, r3
 800a722:	f7fe fc79 	bl	8009018 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d005      	beq.n	800a73a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a72e:	4b05      	ldr	r3, [pc, #20]	; (800a744 <HAL_PCDEx_LPM_Callback+0x68>)
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	4a04      	ldr	r2, [pc, #16]	; (800a744 <HAL_PCDEx_LPM_Callback+0x68>)
 800a734:	f043 0306 	orr.w	r3, r3, #6
 800a738:	6113      	str	r3, [r2, #16]
    break;
 800a73a:	bf00      	nop
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	e000ed00 	.word	0xe000ed00

0800a748 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a750:	4b03      	ldr	r3, [pc, #12]	; (800a760 <USBD_static_malloc+0x18>)
}
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	20001384 	.word	0x20001384

0800a764 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]

}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a77c:	f7f5 ff00 	bl	8000580 <SystemClock_Config>
}
 800a780:	bf00      	nop
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	4603      	mov	r3, r0
 800a78c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	2b03      	cmp	r3, #3
 800a796:	d817      	bhi.n	800a7c8 <USBD_Get_USB_Status+0x44>
 800a798:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <USBD_Get_USB_Status+0x1c>)
 800a79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79e:	bf00      	nop
 800a7a0:	0800a7b1 	.word	0x0800a7b1
 800a7a4:	0800a7b7 	.word	0x0800a7b7
 800a7a8:	0800a7bd 	.word	0x0800a7bd
 800a7ac:	0800a7c3 	.word	0x0800a7c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b4:	e00b      	b.n	800a7ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ba:	e008      	b.n	800a7ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c0:	e005      	b.n	800a7ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c6:	e002      	b.n	800a7ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a7cc:	bf00      	nop
  }
  return usb_status;
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <__libc_init_array>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	4d0d      	ldr	r5, [pc, #52]	; (800a814 <__libc_init_array+0x38>)
 800a7e0:	4c0d      	ldr	r4, [pc, #52]	; (800a818 <__libc_init_array+0x3c>)
 800a7e2:	1b64      	subs	r4, r4, r5
 800a7e4:	10a4      	asrs	r4, r4, #2
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	42a6      	cmp	r6, r4
 800a7ea:	d109      	bne.n	800a800 <__libc_init_array+0x24>
 800a7ec:	4d0b      	ldr	r5, [pc, #44]	; (800a81c <__libc_init_array+0x40>)
 800a7ee:	4c0c      	ldr	r4, [pc, #48]	; (800a820 <__libc_init_array+0x44>)
 800a7f0:	f000 f82e 	bl	800a850 <_init>
 800a7f4:	1b64      	subs	r4, r4, r5
 800a7f6:	10a4      	asrs	r4, r4, #2
 800a7f8:	2600      	movs	r6, #0
 800a7fa:	42a6      	cmp	r6, r4
 800a7fc:	d105      	bne.n	800a80a <__libc_init_array+0x2e>
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	f855 3b04 	ldr.w	r3, [r5], #4
 800a804:	4798      	blx	r3
 800a806:	3601      	adds	r6, #1
 800a808:	e7ee      	b.n	800a7e8 <__libc_init_array+0xc>
 800a80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a80e:	4798      	blx	r3
 800a810:	3601      	adds	r6, #1
 800a812:	e7f2      	b.n	800a7fa <__libc_init_array+0x1e>
 800a814:	0800a8c0 	.word	0x0800a8c0
 800a818:	0800a8c0 	.word	0x0800a8c0
 800a81c:	0800a8c0 	.word	0x0800a8c0
 800a820:	0800a8c4 	.word	0x0800a8c4

0800a824 <memcpy>:
 800a824:	440a      	add	r2, r1
 800a826:	4291      	cmp	r1, r2
 800a828:	f100 33ff 	add.w	r3, r0, #4294967295
 800a82c:	d100      	bne.n	800a830 <memcpy+0xc>
 800a82e:	4770      	bx	lr
 800a830:	b510      	push	{r4, lr}
 800a832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a83a:	4291      	cmp	r1, r2
 800a83c:	d1f9      	bne.n	800a832 <memcpy+0xe>
 800a83e:	bd10      	pop	{r4, pc}

0800a840 <memset>:
 800a840:	4402      	add	r2, r0
 800a842:	4603      	mov	r3, r0
 800a844:	4293      	cmp	r3, r2
 800a846:	d100      	bne.n	800a84a <memset+0xa>
 800a848:	4770      	bx	lr
 800a84a:	f803 1b01 	strb.w	r1, [r3], #1
 800a84e:	e7f9      	b.n	800a844 <memset+0x4>

0800a850 <_init>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	bf00      	nop
 800a854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a856:	bc08      	pop	{r3}
 800a858:	469e      	mov	lr, r3
 800a85a:	4770      	bx	lr

0800a85c <_fini>:
 800a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85e:	bf00      	nop
 800a860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a862:	bc08      	pop	{r3}
 800a864:	469e      	mov	lr, r3
 800a866:	4770      	bx	lr
