
snax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ada0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd0  0800afd0  000201ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800afd0  0800afd0  000201ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afd0  0800afd0  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afd0  0800afd0  0001afd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afd4  0800afd4  0001afd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  0800afd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  200001ac  0800b184  000201ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001604  0800b184  00021604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f3c  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003731  00000000  00000000  00037118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003a850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c7d  00000000  00000000  0003ce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172ea  00000000  00000000  0005db05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c58a0  00000000  00000000  00074def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a68f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005250  00000000  00000000  0013a6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001ac 	.word	0x200001ac
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800af60 	.word	0x0800af60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b0 	.word	0x200001b0
 8000214:	0800af60 	.word	0x0800af60

08000218 <CDC_On_Receive>:


Command command = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .throwerSpeed = 0, .delimiter = 0}; // (4) Instance of received data.
volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) { // (7) Check if received data has the same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f00a fe80 	bl	800af34 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000043c 	.word	0x2000043c
 8000254:	20000446 	.word	0x20000446

08000258 <clampValue>:


int32_t clampValue(int32_t value, int32_t minValue, int32_t maxValue) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (value < minValue) {
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	429a      	cmp	r2, r3
 800026a:	da01      	bge.n	8000270 <clampValue+0x18>
		return minValue;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	e006      	b.n	800027e <clampValue+0x26>
	}
	if (value > maxValue) {
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	dd01      	ble.n	800027c <clampValue+0x24>
		return maxValue;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	e000      	b.n	800027e <clampValue+0x26>
	}

	return value;
 800027c:	68fb      	ldr	r3, [r7, #12]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
	...

0800028c <controlMotor>:


int32_t controlMotor(MotorControl* motorControl, int16_t position, int16_t setpoint) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
 8000298:	4613      	mov	r3, r2
 800029a:	803b      	strh	r3, [r7, #0]
	motorControl->positionChange = position - motorControl->position;
 800029c:	887a      	ldrh	r2, [r7, #2]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	b29b      	uxth	r3, r3
 80002aa:	b21a      	sxth	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	801a      	strh	r2, [r3, #0]
	motorControl->position = position;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	887a      	ldrh	r2, [r7, #2]
 80002b4:	805a      	strh	r2, [r3, #2]
	int32_t error = setpoint - motorControl->positionChange;
 80002b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80002c0:	1a9b      	subs	r3, r3, r2
 80002c2:	60fb      	str	r3, [r7, #12]
	motorControl->integral += error;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	689a      	ldr	r2, [r3, #8]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	441a      	add	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	609a      	str	r2, [r3, #8]
	clampValue(motorControl->integral, -70000 / motorControl->gainI, 70000 / motorControl->gainI);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	6898      	ldr	r0, [r3, #8]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <controlMotor+0x94>)
 80002de:	fb93 f1f2 	sdiv	r1, r3, r2
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <controlMotor+0x98>)
 80002ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80002f0:	461a      	mov	r2, r3
 80002f2:	f7ff ffb1 	bl	8000258 <clampValue>

	return error * motorControl->gainP + motorControl->gainI * motorControl->integral;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80002fc:	461a      	mov	r2, r3
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	fb03 f202 	mul.w	r2, r3, r2
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800030a:	4619      	mov	r1, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	fb01 f303 	mul.w	r3, r1, r3
 8000314:	4413      	add	r3, r2

}
 8000316:	4618      	mov	r0, r3
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	fffeee90 	.word	0xfffeee90
 8000324:	00011170 	.word	0x00011170

08000328 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  // Motor control calculations can be called from here
	int32_t motorPwm_1 = clampValue(controlMotor(&motorControl_1, (int16_t)TIM4->CNT, command.speed1), -65535, 65535);
 8000330:	4b42      	ldr	r3, [pc, #264]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000334:	b21b      	sxth	r3, r3
 8000336:	4a42      	ldr	r2, [pc, #264]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000338:	f9b2 2000 	ldrsh.w	r2, [r2]
 800033c:	4619      	mov	r1, r3
 800033e:	4841      	ldr	r0, [pc, #260]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000340:	f7ff ffa4 	bl	800028c <controlMotor>
 8000344:	4603      	mov	r3, r0
 8000346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800034a:	493f      	ldr	r1, [pc, #252]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff83 	bl	8000258 <clampValue>
 8000352:	6178      	str	r0, [r7, #20]
	int32_t motorPwm_2 = clampValue(controlMotor(&motorControl_2, (int16_t)TIM3->CNT, command.speed2), -65535, 65535);
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000358:	b21b      	sxth	r3, r3
 800035a:	4a39      	ldr	r2, [pc, #228]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800035c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000360:	4619      	mov	r1, r3
 8000362:	483b      	ldr	r0, [pc, #236]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000364:	f7ff ff92 	bl	800028c <controlMotor>
 8000368:	4603      	mov	r3, r0
 800036a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800036e:	4936      	ldr	r1, [pc, #216]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff71 	bl	8000258 <clampValue>
 8000376:	6138      	str	r0, [r7, #16]
	int32_t motorPwm_3 = clampValue(controlMotor(&motorControl_3, (int16_t)TIM1->CNT, command.speed3), -65535, 65535);
 8000378:	4b36      	ldr	r3, [pc, #216]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800037a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037c:	b21b      	sxth	r3, r3
 800037e:	4a30      	ldr	r2, [pc, #192]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000380:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000384:	4619      	mov	r1, r3
 8000386:	4834      	ldr	r0, [pc, #208]	; (8000458 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000388:	f7ff ff80 	bl	800028c <controlMotor>
 800038c:	4603      	mov	r3, r0
 800038e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000392:	492d      	ldr	r1, [pc, #180]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ff5f 	bl	8000258 <clampValue>
 800039a:	60f8      	str	r0, [r7, #12]

	if (motorPwm_1 < 0) {
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	da0b      	bge.n	80003ba <HAL_TIM_PeriodElapsedCallback+0x92>
		TIM2->CCR2 = -motorPwm_1;
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	425a      	negs	r2, r3
 80003a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003aa:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2101      	movs	r1, #1
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b4:	f001 fc4e 	bl	8001c54 <HAL_GPIO_WritePin>
 80003b8:	e009      	b.n	80003ce <HAL_TIM_PeriodElapsedCallback+0xa6>
	} else {
		TIM2->CCR2 = motorPwm_1;
 80003ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2101      	movs	r1, #1
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f001 fc43 	bl	8001c54 <HAL_GPIO_WritePin>
	}

	if (motorPwm_2 < 0) {
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	da0b      	bge.n	80003ec <HAL_TIM_PeriodElapsedCallback+0xc4>
		TIM2->CCR4 = -motorPwm_2;
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	425a      	negs	r2, r3
 80003d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003dc:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2104      	movs	r1, #4
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f001 fc35 	bl	8001c54 <HAL_GPIO_WritePin>
 80003ea:	e009      	b.n	8000400 <HAL_TIM_PeriodElapsedCallback+0xd8>
	} else {
		TIM2->CCR4 = motorPwm_2;
 80003ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2104      	movs	r1, #4
 80003f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fc:	f001 fc2a 	bl	8001c54 <HAL_GPIO_WritePin>
	}

	if (motorPwm_3 < 0) {
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2b00      	cmp	r3, #0
 8000404:	da0b      	bge.n	800041e <HAL_TIM_PeriodElapsedCallback+0xf6>
		TIM2->CCR1 = -motorPwm_3;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	425a      	negs	r2, r3
 800040a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800040e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	2110      	movs	r1, #16
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f001 fc1c 	bl	8001c54 <HAL_GPIO_WritePin>
	} else {
		TIM2->CCR1 = motorPwm_3;
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
	}
}
 800041c:	e009      	b.n	8000432 <HAL_TIM_PeriodElapsedCallback+0x10a>
		TIM2->CCR1 = motorPwm_3;
 800041e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 8000426:	2201      	movs	r2, #1
 8000428:	2110      	movs	r1, #16
 800042a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042e:	f001 fc11 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40000800 	.word	0x40000800
 8000440:	2000043c 	.word	0x2000043c
 8000444:	20000000 	.word	0x20000000
 8000448:	ffff0001 	.word	0xffff0001
 800044c:	40000400 	.word	0x40000400
 8000450:	2000000c 	.word	0x2000000c
 8000454:	40012c00 	.word	0x40012c00
 8000458:	20000018 	.word	0x20000018

0800045c <enableMotorDrivers>:

void enableMotorDrivers(){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, nsleepPwmValues, 2);
 8000460:	2302      	movs	r3, #2
 8000462:	4a03      	ldr	r2, [pc, #12]	; (8000470 <enableMotorDrivers+0x14>)
 8000464:	2100      	movs	r1, #0
 8000466:	4803      	ldr	r0, [pc, #12]	; (8000474 <enableMotorDrivers+0x18>)
 8000468:	f004 fa5a 	bl	8004920 <HAL_TIM_PWM_Start_DMA>

}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000024 	.word	0x20000024
 8000474:	20000344 	.word	0x20000344

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047e:	f000 fe74 	bl	800116a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000482:	f000 f87b 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 fbc5 	bl	8000c14 <MX_GPIO_Init>
  MX_DMA_Init();
 800048a:	f000 fb99 	bl	8000bc0 <MX_DMA_Init>
  MX_USB_Device_Init();
 800048e:	f00a f833 	bl	800a4f8 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000492:	f000 f8db 	bl	800064c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000496:	f000 f9a3 	bl	80007e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800049a:	f000 f9f7 	bl	800088c <MX_TIM4_Init>
  MX_TIM2_Init();
 800049e:	f000 f92f 	bl	8000700 <MX_TIM2_Init>
  MX_TIM16_Init();
 80004a2:	f000 fb13 	bl	8000acc <MX_TIM16_Init>
  MX_TIM6_Init();
 80004a6:	f000 fa47 	bl	8000938 <MX_TIM6_Init>
  MX_TIM8_Init();
 80004aa:	f000 fa7b 	bl	80009a4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = { // (1)
 80004ae:	2300      	movs	r3, #0
 80004b0:	803b      	strh	r3, [r7, #0]
 80004b2:	2300      	movs	r3, #0
 80004b4:	807b      	strh	r3, [r7, #2]
 80004b6:	2300      	movs	r3, #0
 80004b8:	80bb      	strh	r3, [r7, #4]
 80004ba:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80004be:	80fb      	strh	r3, [r7, #6]
        .speed3 = 0,
        .delimiter = 0xAAAA
    };

// TIMER
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004c0:	2104      	movs	r1, #4
 80004c2:	4822      	ldr	r0, [pc, #136]	; (800054c <main+0xd4>)
 80004c4:	f004 fce4 	bl	8004e90 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004c8:	2104      	movs	r1, #4
 80004ca:	4821      	ldr	r0, [pc, #132]	; (8000550 <main+0xd8>)
 80004cc:	f004 fce0 	bl	8004e90 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004d0:	2104      	movs	r1, #4
 80004d2:	4820      	ldr	r0, [pc, #128]	; (8000554 <main+0xdc>)
 80004d4:	f004 fcdc 	bl	8004e90 <HAL_TIM_Encoder_Start>

// PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004d8:	2100      	movs	r1, #0
 80004da:	481f      	ldr	r0, [pc, #124]	; (8000558 <main+0xe0>)
 80004dc:	f004 f920 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004e0:	2104      	movs	r1, #4
 80004e2:	481d      	ldr	r0, [pc, #116]	; (8000558 <main+0xe0>)
 80004e4:	f004 f91c 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80004e8:	210c      	movs	r1, #12
 80004ea:	481b      	ldr	r0, [pc, #108]	; (8000558 <main+0xe0>)
 80004ec:	f004 f918 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80004f0:	2100      	movs	r1, #0
 80004f2:	481a      	ldr	r0, [pc, #104]	; (800055c <main+0xe4>)
 80004f4:	f004 f914 	bl	8004720 <HAL_TIM_PWM_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 80004f8:	4819      	ldr	r0, [pc, #100]	; (8000560 <main+0xe8>)
 80004fa:	f004 f84f 	bl	800459c <HAL_TIM_Base_Start_IT>
  enableMotorDrivers();
 80004fe:	f7ff ffad 	bl	800045c <enableMotorDrivers>

  TIM16->CCR1 = 1800;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <main+0xec>)
 8000504:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isCommandReceived) { // (2)
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <main+0xf0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0fa      	beq.n	800050a <main+0x92>
	        isCommandReceived = 0;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <main+0xf0>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]

	        enableMotorDrivers();
 800051a:	f7ff ff9f 	bl	800045c <enableMotorDrivers>

	        feedback.speed1 = motorControl_1.positionChange; // (4)
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <main+0xf4>)
 8000520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000524:	803b      	strh	r3, [r7, #0]
			feedback.speed2 = motorControl_2.positionChange;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <main+0xf8>)
 8000528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800052c:	807b      	strh	r3, [r7, #2]
			feedback.speed3 = motorControl_3.positionChange;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <main+0xfc>)
 8000530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000534:	80bb      	strh	r3, [r7, #4]

			TIM16->CCR1 = command.throwerSpeed;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <main+0x100>)
 8000538:	88da      	ldrh	r2, [r3, #6]
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <main+0xec>)
 800053c:	635a      	str	r2, [r3, #52]	; 0x34

	        CDC_Transmit_FS((uint8_t*)&feedback, (uint16_t)sizeof(feedback)); // (5)
 800053e:	463b      	mov	r3, r7
 8000540:	2108      	movs	r1, #8
 8000542:	4618      	mov	r0, r3
 8000544:	f00a f89a 	bl	800a67c <CDC_Transmit_FS>
	  if (isCommandReceived) { // (2)
 8000548:	e7df      	b.n	800050a <main+0x92>
 800054a:	bf00      	nop
 800054c:	200001c8 	.word	0x200001c8
 8000550:	20000260 	.word	0x20000260
 8000554:	200002ac 	.word	0x200002ac
 8000558:	20000214 	.word	0x20000214
 800055c:	20000390 	.word	0x20000390
 8000560:	200002f8 	.word	0x200002f8
 8000564:	40014400 	.word	0x40014400
 8000568:	20000446 	.word	0x20000446
 800056c:	20000000 	.word	0x20000000
 8000570:	2000000c 	.word	0x2000000c
 8000574:	20000018 	.word	0x20000018
 8000578:	2000043c 	.word	0x2000043c

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b0a4      	sub	sp, #144	; 0x90
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000586:	2238      	movs	r2, #56	; 0x38
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f00a fce0 	bl	800af50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2244      	movs	r2, #68	; 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f00a fcd2 	bl	800af50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f002 fffd 	bl	80035ac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005b2:	2322      	movs	r3, #34	; 0x22
 80005b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2340      	movs	r3, #64	; 0x40
 80005be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005d0:	2314      	movs	r3, #20
 80005d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 f891 	bl	8003714 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f8:	f000 fb4a 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000610:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000614:	2104      	movs	r1, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fb94 	bl	8003d44 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000622:	f000 fb35 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800062c:	2300      	movs	r3, #0
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fd6a 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063e:	f000 fb27 	bl	8000c90 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3790      	adds	r7, #144	; 0x90
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2224      	movs	r2, #36	; 0x24
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00a fc78 	bl	800af50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <MX_TIM1_Init+0xac>)
 800066c:	4a23      	ldr	r2, [pc, #140]	; (80006fc <MX_TIM1_Init+0xb0>)
 800066e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_TIM1_Init+0xac>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <MX_TIM1_Init+0xac>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_TIM1_Init+0xac>)
 800067e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000682:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_TIM1_Init+0xac>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_TIM1_Init+0xac>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_TIM1_Init+0xac>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000696:	2303      	movs	r3, #3
 8000698:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006ae:	2301      	movs	r3, #1
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_TIM1_Init+0xac>)
 80006c2:	f004 fb3f 	bl	8004d44 <HAL_TIM_Encoder_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80006cc:	f000 fae0 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_TIM1_Init+0xac>)
 80006e2:	f005 fbad 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006ec:	f000 fad0 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3730      	adds	r7, #48	; 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200001c8 	.word	0x200001c8
 80006fc:	40012c00 	.word	0x40012c00

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]
 8000722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000724:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_TIM2_Init+0xdc>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_TIM2_Init+0xdc>)
 800073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <MX_TIM2_Init+0xdc>)
 800074e:	f003 ff8f 	bl	8004670 <HAL_TIM_PWM_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 fa9a 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	481c      	ldr	r0, [pc, #112]	; (80007dc <MX_TIM2_Init+0xdc>)
 800076c:	f005 fb68 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000776:	f000 fa8b 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077a:	2360      	movs	r3, #96	; 0x60
 800077c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000792:	f004 fd8b 	bl	80052ac <HAL_TIM_PWM_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800079c:	f000 fa78 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	2204      	movs	r2, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_TIM2_Init+0xdc>)
 80007a8:	f004 fd80 	bl	80052ac <HAL_TIM_PWM_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80007b2:	f000 fa6d 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	220c      	movs	r2, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <MX_TIM2_Init+0xdc>)
 80007be:	f004 fd75 	bl	80052ac <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80007c8:	f000 fa62 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <MX_TIM2_Init+0xdc>)
 80007ce:	f000 fbc7 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000214 	.word	0x20000214

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2224      	movs	r2, #36	; 0x24
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f00a fbae 	bl	800af50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <MX_TIM3_Init+0xa8>)
 8000802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_TIM3_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM3_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000824:	2303      	movs	r3, #3
 8000826:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800082c:	2301      	movs	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800083c:	2301      	movs	r3, #1
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000850:	f004 fa78 	bl	8004d44 <HAL_TIM_Encoder_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800085a:	f000 fa19 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_TIM3_Init+0xa4>)
 800086c:	f005 fae8 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000876:	f000 fa0b 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3730      	adds	r7, #48	; 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000260 	.word	0x20000260
 8000888:	40000400 	.word	0x40000400

0800088c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2224      	movs	r2, #36	; 0x24
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f00a fb58 	bl	800af50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008ac:	4a21      	ldr	r2, [pc, #132]	; (8000934 <MX_TIM4_Init+0xa8>)
 80008ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008d0:	2303      	movs	r3, #3
 80008d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	2301      	movs	r3, #1
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008fc:	f004 fa22 	bl	8004d44 <HAL_TIM_Encoder_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000906:	f000 f9c3 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_TIM4_Init+0xa4>)
 8000918:	f005 fa92 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000922:	f000 f9b5 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	; 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200002ac 	.word	0x200002ac
 8000934:	40000800 	.word	0x40000800

08000938 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_TIM6_Init+0x64>)
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <MX_TIM6_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_TIM6_Init+0x64>)
 8000950:	2218      	movs	r2, #24
 8000952:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_TIM6_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_TIM6_Init+0x64>)
 800095c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000960:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_TIM6_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_TIM6_Init+0x64>)
 800096a:	f003 fdbf 	bl	80044ec <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000974:	f000 f98c 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_TIM6_Init+0x64>)
 8000986:	f005 fa5b 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000990:	f000 f97e 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200002f8 	.word	0x200002f8
 80009a0:	40001000 	.word	0x40001000

080009a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b098      	sub	sp, #96	; 0x60
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2234      	movs	r2, #52	; 0x34
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f00a fabd 	bl	800af50 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009d6:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009d8:	4a3b      	ldr	r2, [pc, #236]	; (8000ac8 <MX_TIM8_Init+0x124>)
 80009da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009dc:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 15999;
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009ea:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80009ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009f6:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a02:	4830      	ldr	r0, [pc, #192]	; (8000ac4 <MX_TIM8_Init+0x120>)
 8000a04:	f003 fe34 	bl	8004670 <HAL_TIM_PWM_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 f93f 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a22:	4619      	mov	r1, r3
 8000a24:	4827      	ldr	r0, [pc, #156]	; (8000ac4 <MX_TIM8_Init+0x120>)
 8000a26:	f005 fa0b 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000a30:	f000 f92e 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a40:	2300      	movs	r3, #0
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a56:	2200      	movs	r2, #0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <MX_TIM8_Init+0x120>)
 8000a5c:	f004 fc26 	bl	80052ac <HAL_TIM_PWM_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000a66:	f000 f913 	bl	8000c90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <MX_TIM8_Init+0x120>)
 8000aa8:	f005 fa4c 	bl	8005f44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8000ab2:	f000 f8ed 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <MX_TIM8_Init+0x120>)
 8000ab8:	f000 fa52 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000abc:	bf00      	nop
 8000abe:	3760      	adds	r7, #96	; 0x60
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000344 	.word	0x20000344
 8000ac8:	40013400 	.word	0x40013400

08000acc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	; 0x50
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2234      	movs	r2, #52	; 0x34
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00a fa2f 	bl	800af50 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000af2:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000af4:	4a31      	ldr	r2, [pc, #196]	; (8000bbc <MX_TIM16_Init+0xf0>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8000af8:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000afa:	224f      	movs	r2, #79	; 0x4f
 8000afc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 39999;
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b06:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000b0a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b1e:	4826      	ldr	r0, [pc, #152]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b20:	f003 fce4 	bl	80044ec <HAL_TIM_Base_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b2a:	f000 f8b1 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b2e:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b30:	f003 fd9e 	bl	8004670 <HAL_TIM_PWM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b3a:	f000 f8a9 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3e:	2360      	movs	r3, #96	; 0x60
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	4815      	ldr	r0, [pc, #84]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b64:	f004 fba2 	bl	80052ac <HAL_TIM_PWM_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b6e:	f000 f88f 	bl	8000c90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	4619      	mov	r1, r3
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b9a:	f005 f9d3 	bl	8005f44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000ba4:	f000 f874 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000baa:	f000 f9d9 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	; 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000390 	.word	0x20000390
 8000bbc:	40014400 	.word	0x40014400

08000bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_DMA_Init+0x50>)
 8000bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <MX_DMA_Init+0x50>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6493      	str	r3, [r2, #72]	; 0x48
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_DMA_Init+0x50>)
 8000bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_DMA_Init+0x50>)
 8000be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <MX_DMA_Init+0x50>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_DMA_Init+0x50>)
 8000bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	200b      	movs	r0, #11
 8000bfc:	f000 fc01 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c00:	200b      	movs	r0, #11
 8000c02:	f000 fc18 	bl	8001436 <HAL_NVIC_EnableIRQ>

}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M2_DIR_Pin|M3_DIR_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2115      	movs	r1, #21
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f000 fff7 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M2_DIR_Pin M3_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|M3_DIR_Pin;
 8000c66:	2315      	movs	r3, #21
 8000c68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f000 fe66 	bl	8001950 <HAL_GPIO_Init>

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6613      	str	r3, [r2, #96]	; 0x60
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cd2:	f002 fd0f 	bl	80036f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a46      	ldr	r2, [pc, #280]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x138>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12a      	bne.n	8000d5c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a45      	ldr	r2, [pc, #276]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a3f      	ldr	r2, [pc, #252]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f000 fdfb 	bl	8001950 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d5a:	e05a      	b.n	8000e12 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <HAL_TIM_Encoder_MspInit+0x140>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d128      	bne.n	8000db8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	4a2d      	ldr	r2, [pc, #180]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6593      	str	r3, [r2, #88]	; 0x58
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d96:	2330      	movs	r3, #48	; 0x30
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000da6:	2302      	movs	r3, #2
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	481d      	ldr	r0, [pc, #116]	; (8000e28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000db2:	f000 fdcd 	bl	8001950 <HAL_GPIO_Init>
}
 8000db6:	e02c      	b.n	8000e12 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <HAL_TIM_Encoder_MspInit+0x148>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d127      	bne.n	8000e12 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e02:	2302      	movs	r3, #2
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e0e:	f000 fd9f 	bl	8001950 <HAL_GPIO_Init>
}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012c00 	.word	0x40012c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40000400 	.word	0x40000400
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	40000800 	.word	0x40000800

08000e30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e40:	d10c      	bne.n	8000e5c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	4a25      	ldr	r2, [pc, #148]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000e5a:	e03b      	b.n	8000ed4 <HAL_TIM_PWM_MspInit+0xa4>
  else if(htim_pwm->Instance==TIM8)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d136      	bne.n	8000ed4 <HAL_TIM_PWM_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e70:	6613      	str	r3, [r2, #96]	; 0x60
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA1_Channel1;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_TIM_PWM_MspInit+0xb8>)
 8000e82:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e86:	2231      	movs	r2, #49	; 0x31
 8000e88:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea2:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eaa:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000eba:	f000 fad7 	bl	800146c <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_TIM_PWM_MspInit+0x98>
      Error_Handler();
 8000ec4:	f7ff fee4 	bl	8000c90 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40013400 	.word	0x40013400
 8000ee4:	200003dc 	.word	0x200003dc
 8000ee8:	40020008 	.word	0x40020008

08000eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <HAL_TIM_Base_MspInit+0x68>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d114      	bne.n	8000f28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2036      	movs	r0, #54	; 0x36
 8000f1c:	f000 fa71 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f20:	2036      	movs	r0, #54	; 0x36
 8000f22:	f000 fa88 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000f26:	e010      	b.n	8000f4a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_TIM_Base_MspInit+0x70>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10b      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40001000 	.word	0x40001000
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40014400 	.word	0x40014400

08000f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f80:	d11d      	bne.n	8000fbe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b34      	ldr	r3, [pc, #208]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a33      	ldr	r2, [pc, #204]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin;
 8000f9a:	232a      	movs	r3, #42	; 0x2a
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000faa:	2301      	movs	r3, #1
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f000 fcca 	bl	8001950 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000fbc:	e045      	b.n	800104a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a25      	ldr	r2, [pc, #148]	; (8001058 <HAL_TIM_MspPostInit+0xf8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d11e      	bne.n	8001006 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f000 fca6 	bl	8001950 <HAL_GPIO_Init>
}
 8001004:	e021      	b.n	800104a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM16)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_TIM_MspPostInit+0xfc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d11c      	bne.n	800104a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = THROWER_Pin;
 8001028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800103a:	2301      	movs	r3, #1
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(THROWER_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <HAL_TIM_MspPostInit+0x100>)
 8001046:	f000 fc83 	bl	8001950 <HAL_GPIO_Init>
}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	40013400 	.word	0x40013400
 800105c:	40014400 	.word	0x40014400
 8001060:	48000400 	.word	0x48000400

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 f8ae 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <DMA1_Channel1_IRQHandler+0x10>)
 80010be:	f000 faf8 	bl	80016b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200003dc 	.word	0x200003dc

080010cc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <USB_LP_IRQHandler+0x10>)
 80010d2:	f000 fede 	bl	8001e92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200010f0 	.word	0x200010f0

080010e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM6_DAC_IRQHandler+0x10>)
 80010e6:	f003 ff61 	bl	8004fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200002f8 	.word	0x200002f8

080010f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800111a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopForever+0x6>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopForever+0xe>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopForever+0x16>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001142:	f7ff ffd7 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f009 fed1 	bl	800aeec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114a:	f7ff f995 	bl	8000478 <main>

0800114e <LoopForever>:

LoopForever:
    b LoopForever
 800114e:	e7fe      	b.n	800114e <LoopForever>
  ldr   r0, =_estack
 8001150:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 800115c:	0800afd8 	.word	0x0800afd8
  ldr r2, =_sbss
 8001160:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001164:	20001604 	.word	0x20001604

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>

0800116a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 f939 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f80e 	bl	800119c <HAL_InitTick>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	e001      	b.n	8001190 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118c:	f7ff fd86 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001190:	79fb      	ldrb	r3, [r7, #7]

}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_InitTick+0x68>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d022      	beq.n	80011f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_InitTick+0x6c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_InitTick+0x68>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f944 	bl	8001452 <HAL_SYSTICK_Config>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10f      	bne.n	80011f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	d809      	bhi.n	80011ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d6:	2200      	movs	r2, #0
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	f04f 30ff 	mov.w	r0, #4294967295
 80011de:	f000 f910 	bl	8001402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_InitTick+0x70>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e007      	b.n	80011fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e004      	b.n	80011fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e001      	b.n	80011fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000030 	.word	0x20000030
 8001208:	20000028 	.word	0x20000028
 800120c:	2000002c 	.word	0x2000002c

08001210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x1c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x20>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4413      	add	r3, r2
 800121e:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_IncTick+0x1c>)
 8001220:	6013      	str	r3, [r2, #0]
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	20000448 	.word	0x20000448
 8001230:	20000030 	.word	0x20000030

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000448 	.word	0x20000448

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <__NVIC_EnableIRQ+0x38>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff8e 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff29 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff40 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff90 	bl	8001340 <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5f 	bl	80012ec <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff33 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa4 	bl	80013a8 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e08d      	b.n	800159a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_DMA_Init+0x138>)
 8001486:	429a      	cmp	r2, r3
 8001488:	d80f      	bhi.n	80014aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <HAL_DMA_Init+0x13c>)
 8001492:	4413      	add	r3, r2
 8001494:	4a45      	ldr	r2, [pc, #276]	; (80015ac <HAL_DMA_Init+0x140>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	009a      	lsls	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a42      	ldr	r2, [pc, #264]	; (80015b0 <HAL_DMA_Init+0x144>)
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
 80014a8:	e00e      	b.n	80014c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <HAL_DMA_Init+0x148>)
 80014b2:	4413      	add	r3, r2
 80014b4:	4a3d      	ldr	r2, [pc, #244]	; (80015ac <HAL_DMA_Init+0x140>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	009a      	lsls	r2, r3, #2
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a3c      	ldr	r2, [pc, #240]	; (80015b8 <HAL_DMA_Init+0x14c>)
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2202      	movs	r2, #2
 80014cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f9b6 	bl	800188c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001528:	d102      	bne.n	8001530 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001544:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d010      	beq.n	8001570 <HAL_DMA_Init+0x104>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b04      	cmp	r3, #4
 8001554:	d80c      	bhi.n	8001570 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f9d6 	bl	8001908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	e008      	b.n	8001582 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020407 	.word	0x40020407
 80015a8:	bffdfff8 	.word	0xbffdfff8
 80015ac:	cccccccd 	.word	0xcccccccd
 80015b0:	40020000 	.word	0x40020000
 80015b4:	bffdfbf8 	.word	0xbffdfbf8
 80015b8:	40020400 	.word	0x40020400

080015bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_DMA_Start_IT+0x20>
 80015d8:	2302      	movs	r3, #2
 80015da:	e066      	b.n	80016aa <HAL_DMA_Start_IT+0xee>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d155      	bne.n	800169c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2202      	movs	r2, #2
 80015f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0201 	bic.w	r2, r2, #1
 800160c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f8fb 	bl	8001810 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 020e 	orr.w	r2, r2, #14
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e00f      	b.n	8001654 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0204 	bic.w	r2, r2, #4
 8001642:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 020a 	orr.w	r2, r2, #10
 8001652:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001670:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001688:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e005      	b.n	80016a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016a4:	2302      	movs	r3, #2
 80016a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	2204      	movs	r2, #4
 80016d4:	409a      	lsls	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d026      	beq.n	800172c <HAL_DMA_IRQHandler+0x7a>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d021      	beq.n	800172c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0204 	bic.w	r2, r2, #4
 8001704:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f003 021f 	and.w	r2, r3, #31
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2104      	movs	r1, #4
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	2b00      	cmp	r3, #0
 8001720:	d071      	beq.n	8001806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800172a:	e06c      	b.n	8001806 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	2202      	movs	r2, #2
 8001736:	409a      	lsls	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d02e      	beq.n	800179e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d029      	beq.n	800179e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10b      	bne.n	8001770 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 020a 	bic.w	r2, r2, #10
 8001766:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	2102      	movs	r1, #2
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d038      	beq.n	8001806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800179c:	e033      	b.n	8001806 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	2208      	movs	r2, #8
 80017a8:	409a      	lsls	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d02a      	beq.n	8001808 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d025      	beq.n	8001808 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 020e 	bic.w	r2, r2, #14
 80017ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001806:	bf00      	nop
 8001808:	bf00      	nop
}
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001826:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001838:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f003 021f 	and.w	r2, r3, #31
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d108      	bne.n	8001870 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800186e:	e007      	b.n	8001880 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	60da      	str	r2, [r3, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800189c:	429a      	cmp	r2, r3
 800189e:	d802      	bhi.n	80018a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e001      	b.n	80018aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80018a8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	3b08      	subs	r3, #8
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	009a      	lsls	r2, r3, #2
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4413      	add	r3, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80018d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	2201      	movs	r2, #1
 80018e0:	409a      	lsls	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40020407 	.word	0x40020407
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020820 	.word	0x40020820
 8001900:	cccccccd 	.word	0xcccccccd
 8001904:	40020880 	.word	0x40020880

08001908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a08      	ldr	r2, [pc, #32]	; (800194c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800192a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3b01      	subs	r3, #1
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	2201      	movs	r2, #1
 8001936:	409a      	lsls	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	1000823f 	.word	0x1000823f
 800194c:	40020940 	.word	0x40020940

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800195e:	e15a      	b.n	8001c16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2101      	movs	r1, #1
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 814c 	beq.w	8001c10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d00b      	beq.n	8001998 <HAL_GPIO_Init+0x48>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d007      	beq.n	8001998 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800198c:	2b11      	cmp	r3, #17
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b12      	cmp	r3, #18
 8001996:	d130      	bne.n	80019fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 0201 	and.w	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0xea>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d123      	bne.n	8001a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	6939      	ldr	r1, [r7, #16]
 8001a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0203 	and.w	r2, r3, #3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80a6 	beq.w	8001c10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac4:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <HAL_GPIO_Init+0x2e4>)
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac8:	4a5a      	ldr	r2, [pc, #360]	; (8001c34 <HAL_GPIO_Init+0x2e4>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad0:	4b58      	ldr	r3, [pc, #352]	; (8001c34 <HAL_GPIO_Init+0x2e4>)
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001adc:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b06:	d01f      	beq.n	8001b48 <HAL_GPIO_Init+0x1f8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d019      	beq.n	8001b44 <HAL_GPIO_Init+0x1f4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <HAL_GPIO_Init+0x2f0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_GPIO_Init+0x1f0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <HAL_GPIO_Init+0x2f4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00d      	beq.n	8001b3c <HAL_GPIO_Init+0x1ec>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_GPIO_Init+0x2f8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d007      	beq.n	8001b38 <HAL_GPIO_Init+0x1e8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <HAL_GPIO_Init+0x2fc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b30:	2305      	movs	r3, #5
 8001b32:	e00a      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b34:	2306      	movs	r3, #6
 8001b36:	e008      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e006      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e004      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e002      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	f002 0203 	and.w	r2, r2, #3
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	4093      	lsls	r3, r2
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b5a:	4937      	ldr	r1, [pc, #220]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b8c:	4a30      	ldr	r2, [pc, #192]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb6:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f47f ae9d 	bne.w	8001960 <HAL_GPIO_Init+0x10>
  }
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	48000400 	.word	0x48000400
 8001c40:	48000800 	.word	0x48000800
 8001c44:	48000c00 	.word	0x48000c00
 8001c48:	48001000 	.word	0x48001000
 8001c4c:	48001400 	.word	0x48001400
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b08b      	sub	sp, #44	; 0x2c
 8001c88:	af06      	add	r7, sp, #24
 8001c8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0d7      	b.n	8001e46 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f008 fe2e 	bl	800a90c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 fa3e 	bl	800613e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	e04c      	b.n	8001d62 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3301      	adds	r3, #1
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	b298      	uxth	r0, r3
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	440b      	add	r3, r1
 8001d04:	3336      	adds	r3, #54	; 0x36
 8001d06:	4602      	mov	r2, r0
 8001d08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	3303      	adds	r3, #3
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3338      	adds	r3, #56	; 0x38
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	333c      	adds	r3, #60	; 0x3c
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	3340      	adds	r3, #64	; 0x40
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d3ad      	bcc.n	8001cc8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e044      	b.n	8001dfc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d3b5      	bcc.n	8001d72 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	687e      	ldr	r6, [r7, #4]
 8001e0e:	466d      	mov	r5, sp
 8001e10:	f106 0410 	add.w	r4, r6, #16
 8001e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	602b      	str	r3, [r5, #0]
 8001e1c:	1d33      	adds	r3, r6, #4
 8001e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f004 f9a7 	bl	8006174 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f001 fb8a 	bl	8003558 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_PCD_Start+0x16>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e012      	b.n	8001e8a <HAL_PCD_Start+0x3c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 f94d 	bl	8006110 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f006 fe42 	bl	8008b04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f006 fe47 	bl	8008b32 <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eae:	d102      	bne.n	8001eb6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fb4d 	bl	8002550 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f006 fe39 	bl	8008b32 <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eca:	d112      	bne.n	8001ef2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f008 fd8c 	bl	800aa02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001eea:	2100      	movs	r1, #0
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f91e 	bl	800212e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f006 fe1b 	bl	8008b32 <USB_ReadInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f06:	d10b      	bne.n	8001f20 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f1a:	b292      	uxth	r2, r2
 8001f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f006 fe04 	bl	8008b32 <USB_ReadInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f34:	d10b      	bne.n	8001f4e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f006 fded 	bl	8008b32 <USB_ReadInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f62:	d133      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	b292      	uxth	r2, r2
 8001f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0208 	bic.w	r2, r2, #8
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f008 ff1f 	bl	800adec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f008 fd60 	bl	800aa74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f006 fdae 	bl	8008b32 <USB_ReadInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fe0:	d126      	bne.n	8002030 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0208 	orr.w	r2, r2, #8
 8001ff4:	b292      	uxth	r2, r2
 8001ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200c:	b292      	uxth	r2, r2
 800200e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0204 	orr.w	r2, r2, #4
 8002024:	b292      	uxth	r2, r2
 8002026:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f008 fd08 	bl	800aa40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f006 fd7c 	bl	8008b32 <USB_ReadInterrupts>
 800203a:	4603      	mov	r3, r0
 800203c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	d13f      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002056:	b292      	uxth	r2, r2
 8002058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d12b      	bne.n	80020be <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800206e:	b29a      	uxth	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0204 	orr.w	r2, r2, #4
 8002078:	b292      	uxth	r2, r2
 800207a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002086:	b29a      	uxth	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0208 	orr.w	r2, r2, #8
 8002090:	b292      	uxth	r2, r2
 8002092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020b4:	2101      	movs	r1, #1
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f008 fe98 	bl	800adec <HAL_PCDEx_LPM_Callback>
 80020bc:	e002      	b.n	80020c4 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f008 fcbe 	bl	800aa40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f006 fd32 	bl	8008b32 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d8:	d10e      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020ec:	b292      	uxth	r2, r2
 80020ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f008 fc77 	bl	800a9e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f006 fd18 	bl	8008b32 <USB_ReadInterrupts>
 8002102:	4603      	mov	r3, r0
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800210c:	d10b      	bne.n	8002126 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002116:	b29a      	uxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002120:	b292      	uxth	r2, r2
 8002122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_PCD_SetAddress+0x1a>
 8002144:	2302      	movs	r3, #2
 8002146:	e013      	b.n	8002170 <HAL_PCD_SetAddress+0x42>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f006 fcbb 	bl	8008adc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	70fb      	strb	r3, [r7, #3]
 800218a:	460b      	mov	r3, r1
 800218c:	803b      	strh	r3, [r7, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da0e      	bge.n	80021bc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	705a      	strb	r2, [r3, #1]
 80021ba:	e00e      	b.n	80021da <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 0207 	and.w	r2, r3, #7
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021e6:	883a      	ldrh	r2, [r7, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	78ba      	ldrb	r2, [r7, #2]
 80021f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002204:	78bb      	ldrb	r3, [r7, #2]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d102      	bne.n	8002210 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_PCD_EP_Open+0xa6>
 800221a:	2302      	movs	r3, #2
 800221c:	e00e      	b.n	800223c <HAL_PCD_EP_Open+0xc4>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68f9      	ldr	r1, [r7, #12]
 800222c:	4618      	mov	r0, r3
 800222e:	f003 ffc3 	bl	80061b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800223a:	7afb      	ldrb	r3, [r7, #11]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002254:	2b00      	cmp	r3, #0
 8002256:	da0e      	bge.n	8002276 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	705a      	strb	r2, [r3, #1]
 8002274:	e00e      	b.n	8002294 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	f003 0207 	and.w	r2, r3, #7
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	b2da      	uxtb	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_PCD_EP_Close+0x6a>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e00e      	b.n	80022cc <HAL_PCD_EP_Close+0x88>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68f9      	ldr	r1, [r7, #12]
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 fae9 	bl	8006894 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	460b      	mov	r3, r1
 80022e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	f003 0207 	and.w	r2, r3, #7
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4413      	add	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2200      	movs	r2, #0
 8002312:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	b2da      	uxtb	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002320:	7afb      	ldrb	r3, [r7, #11]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6979      	ldr	r1, [r7, #20]
 8002330:	4618      	mov	r0, r3
 8002332:	f004 fc9c 	bl	8006c6e <USB_EPStartXfer>
 8002336:	e005      	b.n	8002344 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6979      	ldr	r1, [r7, #20]
 800233e:	4618      	mov	r0, r3
 8002340:	f004 fc95 	bl	8006c6e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 0207 	and.w	r2, r3, #7
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002370:	681b      	ldr	r3, [r3, #0]
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	460b      	mov	r3, r1
 800238c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4413      	add	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2200      	movs	r2, #0
 80023c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2201      	movs	r2, #1
 80023c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ca:	7afb      	ldrb	r3, [r7, #11]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6979      	ldr	r1, [r7, #20]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 fc41 	bl	8006c6e <USB_EPStartXfer>
 80023ec:	e005      	b.n	80023fa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6979      	ldr	r1, [r7, #20]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 fc3a 	bl	8006c6e <USB_EPStartXfer>
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 0207 	and.w	r2, r3, #7
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	d901      	bls.n	8002422 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e03e      	b.n	80024a0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002422:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002426:	2b00      	cmp	r3, #0
 8002428:	da0e      	bge.n	8002448 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	705a      	strb	r2, [r3, #1]
 8002446:	e00c      	b.n	8002462 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_PCD_EP_SetStall+0x7e>
 800247e:	2302      	movs	r3, #2
 8002480:	e00e      	b.n	80024a0 <HAL_PCD_EP_SetStall+0x9c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68f9      	ldr	r1, [r7, #12]
 8002490:	4618      	mov	r0, r3
 8002492:	f006 fa24 	bl	80088de <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 020f 	and.w	r2, r3, #15
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d901      	bls.n	80024c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e040      	b.n	8002548 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	da0e      	bge.n	80024ec <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	705a      	strb	r2, [r3, #1]
 80024ea:	e00e      	b.n	800250a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	f003 0207 	and.w	r2, r3, #7
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	b2da      	uxtb	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_PCD_EP_ClrStall+0x82>
 8002526:	2302      	movs	r3, #2
 8002528:	e00e      	b.n	8002548 <HAL_PCD_EP_ClrStall+0xa0>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68f9      	ldr	r1, [r7, #12]
 8002538:	4618      	mov	r0, r3
 800253a:	f006 fa21 	bl	8008980 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08e      	sub	sp, #56	; 0x38
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002558:	e2d6      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002562:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002564:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002570:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002574:	2b00      	cmp	r3, #0
 8002576:	f040 815b 	bne.w	8002830 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800257a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d150      	bne.n	8002626 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002594:	81fb      	strh	r3, [r7, #14]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	89fb      	ldrh	r3, [r7, #14]
 800259c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3328      	adds	r3, #40	; 0x28
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	441a      	add	r2, r3
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025e4:	2100      	movs	r1, #0
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f008 f9e3 	bl	800a9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8287 	beq.w	8002b08 <PCD_EP_ISR_Handler+0x5b8>
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 8282 	bne.w	8002b08 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002610:	b2da      	uxtb	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b292      	uxth	r2, r2
 8002618:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002624:	e270      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002636:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800263c:	2b00      	cmp	r3, #0
 800263e:	d032      	beq.n	80026a6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4413      	add	r3, r2
 800265a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800267a:	b29b      	uxth	r3, r3
 800267c:	f006 faab 	bl	8008bd6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29a      	uxth	r2, r3
 8002688:	f640 738f 	movw	r3, #3983	; 0xf8f
 800268c:	4013      	ands	r3, r2
 800268e:	823b      	strh	r3, [r7, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	8a3a      	ldrh	r2, [r7, #16]
 8002696:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800269a:	b292      	uxth	r2, r2
 800269c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f008 f95a 	bl	800a958 <HAL_PCD_SetupStageCallback>
 80026a4:	e230      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f280 822c 	bge.w	8002b08 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026bc:	4013      	ands	r3, r2
 80026be:	83bb      	strh	r3, [r7, #28]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	8bba      	ldrh	r2, [r7, #28]
 80026c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ca:	b292      	uxth	r2, r2
 80026cc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <PCD_EP_ISR_Handler+0x1e2>
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	6959      	ldr	r1, [r3, #20]
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002716:	b29b      	uxth	r3, r3
 8002718:	f006 fa5d 	bl	8008bd6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	441a      	add	r2, r3
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800272a:	2100      	movs	r1, #0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f008 f925 	bl	800a97c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 81e2 	bne.w	8002b08 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4413      	add	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d112      	bne.n	8002792 <PCD_EP_ISR_Handler+0x242>
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002776:	b29a      	uxth	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	801a      	strh	r2, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278a:	b29a      	uxth	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	e02f      	b.n	80027f2 <PCD_EP_ISR_Handler+0x2a2>
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b3e      	cmp	r3, #62	; 0x3e
 8002798:	d813      	bhi.n	80027c2 <PCD_EP_ISR_Handler+0x272>
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <PCD_EP_ISR_Handler+0x264>
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	3301      	adds	r3, #1
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	029b      	lsls	r3, r3, #10
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	801a      	strh	r2, [r3, #0]
 80027c0:	e017      	b.n	80027f2 <PCD_EP_ISR_Handler+0x2a2>
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <PCD_EP_ISR_Handler+0x28c>
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	3b01      	subs	r3, #1
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	b29b      	uxth	r3, r3
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002802:	827b      	strh	r3, [r7, #18]
 8002804:	8a7b      	ldrh	r3, [r7, #18]
 8002806:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800280a:	827b      	strh	r3, [r7, #18]
 800280c:	8a7b      	ldrh	r3, [r7, #18]
 800280e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002812:	827b      	strh	r3, [r7, #18]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	8a7b      	ldrh	r3, [r7, #18]
 800281a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	b29b      	uxth	r3, r3
 800282c:	8013      	strh	r3, [r2, #0]
 800282e:	e16b      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002842:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002846:	2b00      	cmp	r3, #0
 8002848:	f280 80e4 	bge.w	8002a14 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29a      	uxth	r2, r3
 800285e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002862:	4013      	ands	r3, r2
 8002864:	853b      	strh	r3, [r7, #40]	; 0x28
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800287a:	b292      	uxth	r2, r2
 800287c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800287e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	7b1b      	ldrb	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d120      	bne.n	80028de <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80028c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8083 	beq.w	80029d0 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	6959      	ldr	r1, [r3, #20]
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	88da      	ldrh	r2, [r3, #6]
 80028d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028d8:	f006 f97d 	bl	8008bd6 <USB_ReadPMA>
 80028dc:	e078      	b.n	80029d0 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	78db      	ldrb	r3, [r3, #3]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d108      	bne.n	80028f8 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028e8:	461a      	mov	r2, r3
 80028ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f919 	bl	8002b24 <HAL_PCD_EP_DB_Receive>
 80028f2:	4603      	mov	r3, r0
 80028f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028f6:	e06b      	b.n	80029d0 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002912:	847b      	strh	r3, [r7, #34]	; 0x22
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800292c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002930:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002934:	b29b      	uxth	r3, r3
 8002936:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01f      	beq.n	8002992 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	4413      	add	r3, r2
 800296c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002976:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002978:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800297a:	2b00      	cmp	r3, #0
 800297c:	d028      	beq.n	80029d0 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	6959      	ldr	r1, [r3, #20]
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	891a      	ldrh	r2, [r3, #8]
 800298a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800298c:	f006 f923 	bl	8008bd6 <USB_ReadPMA>
 8002990:	e01e      	b.n	80029d0 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	6959      	ldr	r1, [r3, #20]
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	895a      	ldrh	r2, [r3, #10]
 80029ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029cc:	f006 f903 	bl	8008bd6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029d6:	441a      	add	r2, r3
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029e2:	441a      	add	r2, r3
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <PCD_EP_ISR_Handler+0x4aa>
 80029f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d206      	bcs.n	8002a08 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4619      	mov	r1, r3
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f007 ffbb 	bl	800a97c <HAL_PCD_DataOutStageCallback>
 8002a06:	e005      	b.n	8002a14 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 f92d 	bl	8006c6e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d074      	beq.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4c:	843b      	strh	r3, [r7, #32]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	441a      	add	r2, r3
 8002a5c:	8c3b      	ldrh	r3, [r7, #32]
 8002a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	78db      	ldrb	r3, [r3, #3]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d144      	bne.n	8002afc <PCD_EP_ISR_Handler+0x5ac>
 8002a72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d13f      	bne.n	8002afc <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	4413      	add	r3, r2
 8002a96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	8bfb      	ldrh	r3, [r7, #30]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d906      	bls.n	8002aba <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	699a      	ldr	r2, [r3, #24]
 8002ab0:	8bfb      	ldrh	r3, [r7, #30]
 8002ab2:	1ad2      	subs	r2, r2, r3
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	619a      	str	r2, [r3, #24]
 8002ab8:	e002      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d106      	bne.n	8002ad6 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f007 ff6f 	bl	800a9b2 <HAL_PCD_DataInStageCallback>
 8002ad4:	e018      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	8bfb      	ldrh	r3, [r7, #30]
 8002adc:	441a      	add	r2, r3
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	8bfb      	ldrh	r3, [r7, #30]
 8002ae8:	441a      	add	r2, r3
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 f8ba 	bl	8006c6e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002afa:	e005      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002afc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002afe:	461a      	mov	r2, r3
 8002b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f917 	bl	8002d36 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	b21b      	sxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f6ff ad20 	blt.w	800255a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3738      	adds	r7, #56	; 0x38
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d07c      	beq.n	8002c36 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b60:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	8b7b      	ldrh	r3, [r7, #26]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d306      	bcc.n	8002b7a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	8b7b      	ldrh	r3, [r7, #26]
 8002b72:	1ad2      	subs	r2, r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	619a      	str	r2, [r3, #24]
 8002b78:	e002      	b.n	8002b80 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d123      	bne.n	8002bd0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	833b      	strh	r3, [r7, #24]
 8002ba4:	8b3b      	ldrh	r3, [r7, #24]
 8002ba6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002baa:	833b      	strh	r3, [r7, #24]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	8b3b      	ldrh	r3, [r7, #24]
 8002bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01f      	beq.n	8002c1a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf4:	82fb      	strh	r3, [r7, #22]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	441a      	add	r2, r3
 8002c04:	8afb      	ldrh	r3, [r7, #22]
 8002c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c1a:	8b7b      	ldrh	r3, [r7, #26]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8085 	beq.w	8002d2c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6959      	ldr	r1, [r3, #20]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	891a      	ldrh	r2, [r3, #8]
 8002c2e:	8b7b      	ldrh	r3, [r7, #26]
 8002c30:	f005 ffd1 	bl	8008bd6 <USB_ReadPMA>
 8002c34:	e07a      	b.n	8002d2c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c5a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	8b7b      	ldrh	r3, [r7, #26]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d306      	bcc.n	8002c74 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	8b7b      	ldrh	r3, [r7, #26]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	619a      	str	r2, [r3, #24]
 8002c72:	e002      	b.n	8002c7a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d123      	bne.n	8002cca <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9c:	83fb      	strh	r3, [r7, #30]
 8002c9e:	8bfb      	ldrh	r3, [r7, #30]
 8002ca0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ca4:	83fb      	strh	r3, [r7, #30]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	441a      	add	r2, r3
 8002cb4:	8bfb      	ldrh	r3, [r7, #30]
 8002cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11f      	bne.n	8002d14 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	83bb      	strh	r3, [r7, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	441a      	add	r2, r3
 8002cfe:	8bbb      	ldrh	r3, [r7, #28]
 8002d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d14:	8b7b      	ldrh	r3, [r7, #26]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6959      	ldr	r1, [r3, #20]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	895a      	ldrh	r2, [r3, #10]
 8002d26:	8b7b      	ldrh	r3, [r7, #26]
 8002d28:	f005 ff55 	bl	8008bd6 <USB_ReadPMA>
    }
  }

  return count;
 8002d2c:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b0a2      	sub	sp, #136	; 0x88
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 81c5 	beq.w	80030da <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d907      	bls.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d8c:	1ad2      	subs	r2, r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	619a      	str	r2, [r3, #24]
 8002d92:	e002      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2200      	movs	r2, #0
 8002d98:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 80b9 	bne.w	8002f16 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d126      	bne.n	8002dfa <HAL_PCD_EP_DB_Transmit+0xc4>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	4413      	add	r3, r2
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	00da      	lsls	r2, r3, #3
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	4413      	add	r3, r2
 8002dce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	e01a      	b.n	8002e30 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	785b      	ldrb	r3, [r3, #1]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d116      	bne.n	8002e30 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	4413      	add	r3, r2
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	00da      	lsls	r2, r3, #3
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	4413      	add	r3, r2
 8002e24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	623b      	str	r3, [r7, #32]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	785b      	ldrb	r3, [r3, #1]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d126      	bne.n	8002e8c <HAL_PCD_EP_DB_Transmit+0x156>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4413      	add	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	00da      	lsls	r2, r3, #3
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	801a      	strh	r2, [r3, #0]
 8002e8a:	e017      	b.n	8002ebc <HAL_PCD_EP_DB_Transmit+0x186>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d113      	bne.n	8002ebc <HAL_PCD_EP_DB_Transmit+0x186>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	00da      	lsls	r2, r3, #3
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f007 fd75 	bl	800a9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 82d2 	beq.w	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	827b      	strh	r3, [r7, #18]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	441a      	add	r2, r3
 8002efe:	8a7b      	ldrh	r3, [r7, #18]
 8002f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	8013      	strh	r3, [r2, #0]
 8002f14:	e2b0      	b.n	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d021      	beq.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	f040 8284 	bne.w	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f78:	441a      	add	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f86:	441a      	add	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6a1a      	ldr	r2, [r3, #32]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d309      	bcc.n	8002fac <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa4:	1ad2      	subs	r2, r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	621a      	str	r2, [r3, #32]
 8002faa:	e015      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8002fb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fb8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fc2:	e009      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	785b      	ldrb	r3, [r3, #1]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d155      	bne.n	800308c <HAL_PCD_EP_DB_Transmit+0x356>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	4413      	add	r3, r2
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	00da      	lsls	r2, r3, #3
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	4413      	add	r3, r2
 8003002:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003006:	637b      	str	r3, [r7, #52]	; 0x34
 8003008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300a:	2b00      	cmp	r3, #0
 800300c:	d112      	bne.n	8003034 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003018:	b29a      	uxth	r2, r3
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800302c:	b29a      	uxth	r2, r3
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	801a      	strh	r2, [r3, #0]
 8003032:	e047      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	2b3e      	cmp	r3, #62	; 0x3e
 8003038:	d811      	bhi.n	800305e <HAL_PCD_EP_DB_Transmit+0x328>
 800303a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_PCD_EP_DB_Transmit+0x31a>
 800304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304c:	3301      	adds	r3, #1
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003052:	b29b      	uxth	r3, r3
 8003054:	029b      	lsls	r3, r3, #10
 8003056:	b29a      	uxth	r2, r3
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	e032      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800305e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
 8003064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_PCD_EP_DB_Transmit+0x33e>
 800306e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003070:	3b01      	subs	r3, #1
 8003072:	64bb      	str	r3, [r7, #72]	; 0x48
 8003074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003076:	b29b      	uxth	r3, r3
 8003078:	029b      	lsls	r3, r3, #10
 800307a:	b29b      	uxth	r3, r3
 800307c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003084:	b29a      	uxth	r2, r3
 8003086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003088:	801a      	strh	r2, [r3, #0]
 800308a:	e01b      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d117      	bne.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	643b      	str	r3, [r7, #64]	; 0x40
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a8:	4413      	add	r3, r2
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	00da      	lsls	r2, r3, #3
 80030b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b4:	4413      	add	r3, r2
 80030b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030be:	b29a      	uxth	r2, r3
 80030c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6959      	ldr	r1, [r3, #20]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	891a      	ldrh	r2, [r3, #8]
 80030d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f005 fd3d 	bl	8008b52 <USB_WritePMA>
 80030d8:	e1ce      	b.n	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800310a:	429a      	cmp	r2, r3
 800310c:	d307      	bcc.n	800311e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003116:	1ad2      	subs	r2, r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	619a      	str	r2, [r3, #24]
 800311c:	e002      	b.n	8003124 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 80c4 	bne.w	80032b6 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d126      	bne.n	8003184 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003144:	b29b      	uxth	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314a:	4413      	add	r3, r2
 800314c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	00da      	lsls	r2, r3, #3
 8003154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003156:	4413      	add	r3, r2
 8003158:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800315c:	66bb      	str	r3, [r7, #104]	; 0x68
 800315e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003168:	b29a      	uxth	r2, r3
 800316a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800316c:	801a      	strh	r2, [r3, #0]
 800316e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317c:	b29a      	uxth	r2, r3
 800317e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	e01a      	b.n	80031ba <HAL_PCD_EP_DB_Transmit+0x484>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d116      	bne.n	80031ba <HAL_PCD_EP_DB_Transmit+0x484>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	677b      	str	r3, [r7, #116]	; 0x74
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a0:	4413      	add	r3, r2
 80031a2:	677b      	str	r3, [r7, #116]	; 0x74
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	00da      	lsls	r2, r3, #3
 80031aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ac:	4413      	add	r3, r2
 80031ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031b2:	673b      	str	r3, [r7, #112]	; 0x70
 80031b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b6:	2200      	movs	r2, #0
 80031b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	67bb      	str	r3, [r7, #120]	; 0x78
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	785b      	ldrb	r3, [r3, #1]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d12f      	bne.n	8003228 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d8:	b29b      	uxth	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e0:	4413      	add	r3, r2
 80031e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	00da      	lsls	r2, r3, #3
 80031ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f0:	4413      	add	r3, r2
 80031f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	b29b      	uxth	r3, r3
 8003202:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003206:	b29a      	uxth	r2, r3
 8003208:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800321e:	b29a      	uxth	r2, r3
 8003220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	e017      	b.n	8003258 <HAL_PCD_EP_DB_Transmit+0x522>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d113      	bne.n	8003258 <HAL_PCD_EP_DB_Transmit+0x522>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003238:	b29b      	uxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323e:	4413      	add	r3, r2
 8003240:	67bb      	str	r3, [r7, #120]	; 0x78
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	00da      	lsls	r2, r3, #3
 8003248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324a:	4413      	add	r3, r2
 800324c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003250:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003254:	2200      	movs	r2, #0
 8003256:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f007 fba7 	bl	800a9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 8104 	bne.w	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	441a      	add	r2, r3
 800329c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	8013      	strh	r3, [r2, #0]
 80032b4:	e0e0      	b.n	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d121      	bne.n	8003304 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	441a      	add	r2, r3
 80032ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003300:	b29b      	uxth	r3, r3
 8003302:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800330a:	2b01      	cmp	r3, #1
 800330c:	f040 80b4 	bne.w	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003318:	441a      	add	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003326:	441a      	add	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	429a      	cmp	r2, r3
 8003336:	d309      	bcc.n	800334c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6a1a      	ldr	r2, [r3, #32]
 8003342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003344:	1ad2      	subs	r2, r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	621a      	str	r2, [r3, #32]
 800334a:	e015      	b.n	8003378 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d107      	bne.n	8003364 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8003354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003358:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003362:	e009      	b.n	8003378 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	667b      	str	r3, [r7, #100]	; 0x64
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	785b      	ldrb	r3, [r3, #1]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d155      	bne.n	8003432 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339a:	4413      	add	r3, r2
 800339c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	00da      	lsls	r2, r3, #3
 80033a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a6:	4413      	add	r3, r2
 80033a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d112      	bne.n	80033da <HAL_PCD_EP_DB_Transmit+0x6a4>
 80033b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033be:	b29a      	uxth	r2, r3
 80033c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c2:	801a      	strh	r2, [r3, #0]
 80033c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d6:	801a      	strh	r2, [r3, #0]
 80033d8:	e044      	b.n	8003464 <HAL_PCD_EP_DB_Transmit+0x72e>
 80033da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033dc:	2b3e      	cmp	r3, #62	; 0x3e
 80033de:	d811      	bhi.n	8003404 <HAL_PCD_EP_DB_Transmit+0x6ce>
 80033e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	657b      	str	r3, [r7, #84]	; 0x54
 80033e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x6c0>
 80033f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f2:	3301      	adds	r3, #1
 80033f4:	657b      	str	r3, [r7, #84]	; 0x54
 80033f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	e02f      	b.n	8003464 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	657b      	str	r3, [r7, #84]	; 0x54
 800340a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <HAL_PCD_EP_DB_Transmit+0x6e4>
 8003414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003416:	3b01      	subs	r3, #1
 8003418:	657b      	str	r3, [r7, #84]	; 0x54
 800341a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341c:	b29b      	uxth	r3, r3
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	b29b      	uxth	r3, r3
 8003422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342a:	b29a      	uxth	r2, r3
 800342c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800342e:	801a      	strh	r2, [r3, #0]
 8003430:	e018      	b.n	8003464 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d114      	bne.n	8003464 <HAL_PCD_EP_DB_Transmit+0x72e>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003448:	4413      	add	r3, r2
 800344a:	667b      	str	r3, [r7, #100]	; 0x64
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	00da      	lsls	r2, r3, #3
 8003452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003454:	4413      	add	r3, r2
 8003456:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800345a:	663b      	str	r3, [r7, #96]	; 0x60
 800345c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345e:	b29a      	uxth	r2, r3
 8003460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003462:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6959      	ldr	r1, [r3, #20]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	895a      	ldrh	r2, [r3, #10]
 8003470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003472:	b29b      	uxth	r3, r3
 8003474:	f005 fb6d 	bl	8008b52 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003492:	823b      	strh	r3, [r7, #16]
 8003494:	8a3b      	ldrh	r3, [r7, #16]
 8003496:	f083 0310 	eor.w	r3, r3, #16
 800349a:	823b      	strh	r3, [r7, #16]
 800349c:	8a3b      	ldrh	r3, [r7, #16]
 800349e:	f083 0320 	eor.w	r3, r3, #32
 80034a2:	823b      	strh	r3, [r7, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	441a      	add	r2, r3
 80034b2:	8a3b      	ldrh	r3, [r7, #16]
 80034b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3788      	adds	r7, #136	; 0x88
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b087      	sub	sp, #28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
 80034e0:	4613      	mov	r3, r2
 80034e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034e4:	897b      	ldrh	r3, [r7, #10]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	897b      	ldrh	r3, [r7, #10]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e009      	b.n	800351c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003508:	897a      	ldrh	r2, [r7, #10]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800351c:	893b      	ldrh	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d107      	bne.n	8003532 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	b29a      	uxth	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	80da      	strh	r2, [r3, #6]
 8003530:	e00b      	b.n	800354a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2201      	movs	r2, #1
 8003536:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	b29a      	uxth	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	b29a      	uxth	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800357c:	b29b      	uxth	r3, r3
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003590:	b29b      	uxth	r3, r3
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d141      	bne.n	800363e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ba:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c6:	d131      	bne.n	800362c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035c8:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ce:	4a46      	ldr	r2, [pc, #280]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035d8:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035e0:	4a41      	ldr	r2, [pc, #260]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035e8:	4b40      	ldr	r3, [pc, #256]	; (80036ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2232      	movs	r2, #50	; 0x32
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	4a3f      	ldr	r2, [pc, #252]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	0c9b      	lsrs	r3, r3, #18
 80035fa:	3301      	adds	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035fe:	e002      	b.n	8003606 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3b01      	subs	r3, #1
 8003604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003606:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003612:	d102      	bne.n	800361a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f2      	bne.n	8003600 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800361a:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003626:	d158      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e057      	b.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003632:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800363c:	e04d      	b.n	80036da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003644:	d141      	bne.n	80036ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003646:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800364e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003652:	d131      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365a:	4a23      	ldr	r2, [pc, #140]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003664:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800366c:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2232      	movs	r2, #50	; 0x32
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	0c9b      	lsrs	r3, r3, #18
 8003686:	3301      	adds	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800368a:	e002      	b.n	8003692 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3b01      	subs	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d102      	bne.n	80036a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f2      	bne.n	800368c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d112      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e011      	b.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036c8:	e007      	b.n	80036da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40007000 	.word	0x40007000
 80036ec:	20000028 	.word	0x20000028
 80036f0:	431bde83 	.word	0x431bde83

080036f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003702:	6093      	str	r3, [r2, #8]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40007000 	.word	0x40007000

08003714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e306      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d075      	beq.n	800381e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003732:	4b97      	ldr	r3, [pc, #604]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800373c:	4b94      	ldr	r3, [pc, #592]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d102      	bne.n	8003752 <HAL_RCC_OscConfig+0x3e>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d002      	beq.n	8003758 <HAL_RCC_OscConfig+0x44>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d10b      	bne.n	8003770 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	4b8d      	ldr	r3, [pc, #564]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05b      	beq.n	800381c <HAL_RCC_OscConfig+0x108>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d157      	bne.n	800381c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e2e1      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d106      	bne.n	8003788 <HAL_RCC_OscConfig+0x74>
 800377a:	4b85      	ldr	r3, [pc, #532]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a84      	ldr	r2, [pc, #528]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e01d      	b.n	80037c4 <HAL_RCC_OscConfig+0xb0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x98>
 8003792:	4b7f      	ldr	r3, [pc, #508]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a7e      	ldr	r2, [pc, #504]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7b      	ldr	r2, [pc, #492]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0xb0>
 80037ac:	4b78      	ldr	r3, [pc, #480]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a77      	ldr	r2, [pc, #476]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b75      	ldr	r3, [pc, #468]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a74      	ldr	r2, [pc, #464]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fd fd32 	bl	8001234 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fd fd2e 	bl	8001234 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e2a6      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e6:	4b6a      	ldr	r3, [pc, #424]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0xc0>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fd fd1e 	bl	8001234 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fd fd1a 	bl	8001234 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e292      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380e:	4b60      	ldr	r3, [pc, #384]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0xe8>
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d075      	beq.n	8003916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382a:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003834:	4b56      	ldr	r3, [pc, #344]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b0c      	cmp	r3, #12
 8003842:	d102      	bne.n	800384a <HAL_RCC_OscConfig+0x136>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d002      	beq.n	8003850 <HAL_RCC_OscConfig+0x13c>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d11f      	bne.n	8003890 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003850:	4b4f      	ldr	r3, [pc, #316]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_OscConfig+0x154>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e265      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b49      	ldr	r3, [pc, #292]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	4946      	ldr	r1, [pc, #280]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800387c:	4b45      	ldr	r3, [pc, #276]	; (8003994 <HAL_RCC_OscConfig+0x280>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd fc8b 	bl	800119c <HAL_InitTick>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d043      	beq.n	8003914 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e251      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d023      	beq.n	80038e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003898:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800389e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd fcc6 	bl	8001234 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ac:	f7fd fcc2 	bl	8001234 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e23a      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038be:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	061b      	lsls	r3, r3, #24
 80038d8:	492d      	ldr	r1, [pc, #180]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
 80038de:	e01a      	b.n	8003916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e0:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80038e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd fca2 	bl	8001234 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fd fc9e 	bl	8001234 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e216      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003906:	4b22      	ldr	r3, [pc, #136]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1e0>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d041      	beq.n	80039a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01c      	beq.n	8003964 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392a:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd fc7b 	bl	8001234 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003942:	f7fd fc77 	bl	8001234 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1ef      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ef      	beq.n	8003942 <HAL_RCC_OscConfig+0x22e>
 8003962:	e020      	b.n	80039a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd fc5e 	bl	8001234 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800397a:	e00d      	b.n	8003998 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397c:	f7fd fc5a 	bl	8001234 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d906      	bls.n	8003998 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1d2      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003998:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ea      	bne.n	800397c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80a6 	beq.w	8003b00 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b4:	2300      	movs	r3, #0
 80039b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039b8:	4b84      	ldr	r3, [pc, #528]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2b4>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x2b6>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	4a7e      	ldr	r2, [pc, #504]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6593      	str	r3, [r2, #88]	; 0x58
 80039da:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039e6:	2301      	movs	r3, #1
 80039e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	4b79      	ldr	r3, [pc, #484]	; (8003bd0 <HAL_RCC_OscConfig+0x4bc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d118      	bne.n	8003a28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f6:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_RCC_OscConfig+0x4bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a75      	ldr	r2, [pc, #468]	; (8003bd0 <HAL_RCC_OscConfig+0x4bc>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a02:	f7fd fc17 	bl	8001234 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0a:	f7fd fc13 	bl	8001234 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e18b      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1c:	4b6c      	ldr	r3, [pc, #432]	; (8003bd0 <HAL_RCC_OscConfig+0x4bc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d108      	bne.n	8003a42 <HAL_RCC_OscConfig+0x32e>
 8003a30:	4b66      	ldr	r3, [pc, #408]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	4a65      	ldr	r2, [pc, #404]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a40:	e024      	b.n	8003a8c <HAL_RCC_OscConfig+0x378>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d110      	bne.n	8003a6c <HAL_RCC_OscConfig+0x358>
 8003a4a:	4b60      	ldr	r3, [pc, #384]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	4a5e      	ldr	r2, [pc, #376]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a5a:	4b5c      	ldr	r3, [pc, #368]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	4a5a      	ldr	r2, [pc, #360]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6a:	e00f      	b.n	8003a8c <HAL_RCC_OscConfig+0x378>
 8003a6c:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	4a56      	ldr	r2, [pc, #344]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d016      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fd fbce 	bl	8001234 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fd fbca 	bl	8001234 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e140      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ed      	beq.n	8003a9c <HAL_RCC_OscConfig+0x388>
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac2:	f7fd fbb7 	bl	8001234 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd fbb3 	bl	8001234 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e129      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae0:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ed      	bne.n	8003aca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aee:	7ffb      	ldrb	r3, [r7, #31]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af4:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d03c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01c      	beq.n	8003b4e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b1a:	4a2c      	ldr	r2, [pc, #176]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd fb86 	bl	8001234 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b2c:	f7fd fb82 	bl	8001234 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0fa      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b3e:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ef      	beq.n	8003b2c <HAL_RCC_OscConfig+0x418>
 8003b4c:	e01b      	b.n	8003b86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fb69 	bl	8001234 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b66:	f7fd fb65 	bl	8001234 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e0dd      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ef      	bne.n	8003b66 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80d1 	beq.w	8003d32 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	f000 808b 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d15e      	bne.n	8003c64 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd fb3f 	bl	8001234 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb8:	e00c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fd fb3b 	bl	8001234 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d905      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0b3      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd4:	4b59      	ldr	r3, [pc, #356]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ec      	bne.n	8003bba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be0:	4b56      	ldr	r3, [pc, #344]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	4b56      	ldr	r3, [pc, #344]	; (8003d40 <HAL_RCC_OscConfig+0x62c>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6a11      	ldr	r1, [r2, #32]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003bfa:	0212      	lsls	r2, r2, #8
 8003bfc:	4311      	orrs	r1, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c02:	0852      	lsrs	r2, r2, #1
 8003c04:	3a01      	subs	r2, #1
 8003c06:	0552      	lsls	r2, r2, #21
 8003c08:	4311      	orrs	r1, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c0e:	0852      	lsrs	r2, r2, #1
 8003c10:	3a01      	subs	r2, #1
 8003c12:	0652      	lsls	r2, r2, #25
 8003c14:	4311      	orrs	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c1a:	06d2      	lsls	r2, r2, #27
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	4947      	ldr	r1, [pc, #284]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c24:	4b45      	ldr	r3, [pc, #276]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a44      	ldr	r2, [pc, #272]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c30:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4a41      	ldr	r2, [pc, #260]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fafa 	bl	8001234 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c44:	f7fd faf6 	bl	8001234 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e06e      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c56:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x530>
 8003c62:	e066      	b.n	8003d32 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b35      	ldr	r3, [pc, #212]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a34      	ldr	r2, [pc, #208]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c70:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a31      	ldr	r2, [pc, #196]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c7c:	4b2f      	ldr	r3, [pc, #188]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a2e      	ldr	r2, [pc, #184]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c82:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fad2 	bl	8001234 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fd face 	bl	8001234 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e046      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca6:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x580>
 8003cb2:	e03e      	b.n	8003d32 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e039      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cc0:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0203 	and.w	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d12c      	bne.n	8003d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d123      	bne.n	8003d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d11b      	bne.n	8003d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d113      	bne.n	8003d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	3b01      	subs	r3, #1
 8003d14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d109      	bne.n	8003d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	019f800c 	.word	0x019f800c

08003d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e11e      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b91      	ldr	r3, [pc, #580]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b8e      	ldr	r3, [pc, #568]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 020f 	bic.w	r2, r3, #15
 8003d72:	498c      	ldr	r1, [pc, #560]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b8a      	ldr	r3, [pc, #552]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e106      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d073      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d129      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da0:	4b81      	ldr	r3, [pc, #516]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0f4      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003db0:	f000 f966 	bl	8004080 <RCC_GetSysClockFreqFromPLLSource>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <HAL_RCC_ClockConfig+0x268>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d93f      	bls.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d033      	beq.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d12f      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dde:	4b72      	ldr	r3, [pc, #456]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003de6:	4a70      	ldr	r2, [pc, #448]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e024      	b.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfc:	4b6a      	ldr	r3, [pc, #424]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0c6      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e0c:	4b66      	ldr	r3, [pc, #408]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0be      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e1c:	f000 f8ce 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4a61      	ldr	r2, [pc, #388]	; (8003fac <HAL_RCC_ClockConfig+0x268>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d909      	bls.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e32:	4a5d      	ldr	r2, [pc, #372]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e3e:	4b5a      	ldr	r3, [pc, #360]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 0203 	bic.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4957      	ldr	r1, [pc, #348]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fd f9f0 	bl	8001234 <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e58:	f7fd f9ec 	bl	8001234 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e095      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	4b4e      	ldr	r3, [pc, #312]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 020c 	and.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d1eb      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d023      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a42      	ldr	r2, [pc, #264]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ea2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eb8:	4a3b      	ldr	r2, [pc, #236]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4936      	ldr	r1, [pc, #216]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d105      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003eda:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4a32      	ldr	r2, [pc, #200]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d21d      	bcs.n	8003f30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 020f 	bic.w	r2, r3, #15
 8003efc:	4929      	ldr	r1, [pc, #164]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f04:	f7fd f996 	bl	8001234 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0c:	f7fd f992 	bl	8001234 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e03b      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1ed      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4917      	ldr	r1, [pc, #92]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	490f      	ldr	r1, [pc, #60]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f6e:	f000 f825 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	490c      	ldr	r1, [pc, #48]	; (8003fb0 <HAL_RCC_ClockConfig+0x26c>)
 8003f80:	5ccb      	ldrb	r3, [r1, r3]
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <HAL_RCC_ClockConfig+0x270>)
 8003f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x274>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fd f902 	bl	800119c <HAL_InitTick>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	04c4b400 	.word	0x04c4b400
 8003fb0:	0800afc0 	.word	0x0800afc0
 8003fb4:	20000028 	.word	0x20000028
 8003fb8:	2000002c 	.word	0x2000002c

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e047      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d102      	bne.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fe0:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	e03e      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d136      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	3301      	adds	r3, #1
 8004008:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d10c      	bne.n	800402a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004010:	4a1a      	ldr	r2, [pc, #104]	; (800407c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401a:	68d2      	ldr	r2, [r2, #12]
 800401c:	0a12      	lsrs	r2, r2, #8
 800401e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	617b      	str	r3, [r7, #20]
      break;
 8004028:	e00c      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800402a:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_RCC_GetSysClockFreq+0xbc>)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	4a10      	ldr	r2, [pc, #64]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004034:	68d2      	ldr	r2, [r2, #12]
 8004036:	0a12      	lsrs	r2, r2, #8
 8004038:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	617b      	str	r3, [r7, #20]
      break;
 8004042:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	0e5b      	lsrs	r3, r3, #25
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e001      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004064:	693b      	ldr	r3, [r7, #16]
}
 8004066:	4618      	mov	r0, r3
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	00f42400 	.word	0x00f42400
 800407c:	007a1200 	.word	0x007a1200

08004080 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d10c      	bne.n	80040be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040a4:	4a17      	ldr	r2, [pc, #92]	; (8004104 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ae:	68d2      	ldr	r2, [r2, #12]
 80040b0:	0a12      	lsrs	r2, r2, #8
 80040b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	617b      	str	r3, [r7, #20]
    break;
 80040bc:	e00c      	b.n	80040d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040be:	4a12      	ldr	r2, [pc, #72]	; (8004108 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040c8:	68d2      	ldr	r2, [r2, #12]
 80040ca:	0a12      	lsrs	r2, r2, #8
 80040cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040d0:	fb02 f303 	mul.w	r3, r2, r3
 80040d4:	617b      	str	r3, [r7, #20]
    break;
 80040d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0e5b      	lsrs	r3, r3, #25
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	3301      	adds	r3, #1
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80040f2:	687b      	ldr	r3, [r7, #4]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40021000 	.word	0x40021000
 8004104:	007a1200 	.word	0x007a1200
 8004108:	00f42400 	.word	0x00f42400

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004114:	2300      	movs	r3, #0
 8004116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004118:	2300      	movs	r3, #0
 800411a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8098 	beq.w	800425a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412e:	4b43      	ldr	r3, [pc, #268]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10d      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413a:	4b40      	ldr	r3, [pc, #256]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	4a3f      	ldr	r2, [pc, #252]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
 8004146:	4b3d      	ldr	r3, [pc, #244]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004152:	2301      	movs	r3, #1
 8004154:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004156:	4b3a      	ldr	r3, [pc, #232]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a39      	ldr	r2, [pc, #228]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004162:	f7fd f867 	bl	8001234 <HAL_GetTick>
 8004166:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004168:	e009      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416a:	f7fd f863 	bl	8001234 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d902      	bls.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	74fb      	strb	r3, [r7, #19]
        break;
 800417c:	e005      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800417e:	4b30      	ldr	r3, [pc, #192]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0ef      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d159      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004190:	4b2a      	ldr	r3, [pc, #168]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01e      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d019      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041ac:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041b8:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041c8:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	4a1b      	ldr	r2, [pc, #108]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fd f823 	bl	8001234 <HAL_GetTick>
 80041ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f0:	e00b      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fd f81f 	bl	8001234 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d902      	bls.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	74fb      	strb	r3, [r7, #19]
            break;
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800420a:	4b0c      	ldr	r3, [pc, #48]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ec      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421e:	4b07      	ldr	r3, [pc, #28]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4903      	ldr	r1, [pc, #12]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004234:	e008      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	74bb      	strb	r3, [r7, #18]
 800423a:	e005      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004248:	7c7b      	ldrb	r3, [r7, #17]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424e:	4ba6      	ldr	r3, [pc, #664]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	4aa5      	ldr	r2, [pc, #660]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004266:	4ba0      	ldr	r3, [pc, #640]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f023 0203 	bic.w	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	499c      	ldr	r1, [pc, #624]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004288:	4b97      	ldr	r3, [pc, #604]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f023 020c 	bic.w	r2, r3, #12
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4994      	ldr	r1, [pc, #592]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042aa:	4b8f      	ldr	r3, [pc, #572]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	498b      	ldr	r1, [pc, #556]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042cc:	4b86      	ldr	r3, [pc, #536]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	4983      	ldr	r1, [pc, #524]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042ee:	4b7e      	ldr	r3, [pc, #504]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	497a      	ldr	r1, [pc, #488]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004310:	4b75      	ldr	r3, [pc, #468]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	4972      	ldr	r1, [pc, #456]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004332:	4b6d      	ldr	r3, [pc, #436]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	4969      	ldr	r1, [pc, #420]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004354:	4b64      	ldr	r3, [pc, #400]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4961      	ldr	r1, [pc, #388]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004376:	4b5c      	ldr	r3, [pc, #368]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	4958      	ldr	r1, [pc, #352]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004394:	2b00      	cmp	r3, #0
 8004396:	d015      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004398:	4b53      	ldr	r3, [pc, #332]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	4950      	ldr	r1, [pc, #320]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b6:	d105      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b8:	4b4b      	ldr	r3, [pc, #300]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4a4a      	ldr	r2, [pc, #296]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d015      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043d0:	4b45      	ldr	r3, [pc, #276]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	4942      	ldr	r1, [pc, #264]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ee:	d105      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f0:	4b3d      	ldr	r3, [pc, #244]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a3c      	ldr	r2, [pc, #240]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d015      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004408:	4b37      	ldr	r3, [pc, #220]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4934      	ldr	r1, [pc, #208]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004426:	d105      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004428:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004432:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d015      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004440:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	4926      	ldr	r1, [pc, #152]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800445e:	d105      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004460:	4b21      	ldr	r3, [pc, #132]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a20      	ldr	r2, [pc, #128]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800446a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d015      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004478:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	4918      	ldr	r1, [pc, #96]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004496:	d105      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004498:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044b0:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	490a      	ldr	r1, [pc, #40]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ce:	d105      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80044dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000

080044ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e049      	b.n	8004592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fcea 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f001 f8dc 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d001      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e04a      	b.n	800464a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a21      	ldr	r2, [pc, #132]	; (8004658 <HAL_TIM_Base_Start_IT+0xbc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d018      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	d013      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_TIM_Base_Start_IT+0xc0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00e      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <HAL_TIM_Base_Start_IT+0xc4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d009      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1a      	ldr	r2, [pc, #104]	; (8004664 <HAL_TIM_Base_Start_IT+0xc8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a19      	ldr	r2, [pc, #100]	; (8004668 <HAL_TIM_Base_Start_IT+0xcc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d115      	bne.n	8004634 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	4b17      	ldr	r3, [pc, #92]	; (800466c <HAL_TIM_Base_Start_IT+0xd0>)
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b06      	cmp	r3, #6
 8004618:	d015      	beq.n	8004646 <HAL_TIM_Base_Start_IT+0xaa>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004620:	d011      	beq.n	8004646 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	e008      	b.n	8004646 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e000      	b.n	8004648 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40013400 	.word	0x40013400
 8004668:	40014000 	.word	0x40014000
 800466c:	00010007 	.word	0x00010007

08004670 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e049      	b.n	8004716 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fbca 	bl	8000e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f001 f81a 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <HAL_TIM_PWM_Start+0x24>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e03c      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d109      	bne.n	800475e <HAL_TIM_PWM_Start+0x3e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e02f      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x58>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e022      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d109      	bne.n	8004792 <HAL_TIM_PWM_Start+0x72>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e015      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b10      	cmp	r3, #16
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x8c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e008      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e097      	b.n	80048f6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_PWM_Start+0xb6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d4:	e023      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Start+0xc6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e4:	e01b      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0xd6>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f4:	e013      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b0c      	cmp	r3, #12
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start+0xe6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004804:	e00b      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b10      	cmp	r3, #16
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0xf6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004814:	e003      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f001 fae4 	bl	8005df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a33      	ldr	r2, [pc, #204]	; (8004900 <HAL_TIM_PWM_Start+0x1e0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_TIM_PWM_Start+0x13e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a32      	ldr	r2, [pc, #200]	; (8004904 <HAL_TIM_PWM_Start+0x1e4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_TIM_PWM_Start+0x13e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a30      	ldr	r2, [pc, #192]	; (8004908 <HAL_TIM_PWM_Start+0x1e8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_TIM_PWM_Start+0x13e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2f      	ldr	r2, [pc, #188]	; (800490c <HAL_TIM_PWM_Start+0x1ec>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_TIM_PWM_Start+0x13e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2d      	ldr	r2, [pc, #180]	; (8004910 <HAL_TIM_PWM_Start+0x1f0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d101      	bne.n	8004862 <HAL_TIM_PWM_Start+0x142>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_TIM_PWM_Start+0x144>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a20      	ldr	r2, [pc, #128]	; (8004900 <HAL_TIM_PWM_Start+0x1e0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d018      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x194>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488a:	d013      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x194>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a20      	ldr	r2, [pc, #128]	; (8004914 <HAL_TIM_PWM_Start+0x1f4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00e      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x194>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1f      	ldr	r2, [pc, #124]	; (8004918 <HAL_TIM_PWM_Start+0x1f8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d009      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x194>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a17      	ldr	r2, [pc, #92]	; (8004904 <HAL_TIM_PWM_Start+0x1e4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x194>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a16      	ldr	r2, [pc, #88]	; (8004908 <HAL_TIM_PWM_Start+0x1e8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d115      	bne.n	80048e0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	4b18      	ldr	r3, [pc, #96]	; (800491c <HAL_TIM_PWM_Start+0x1fc>)
 80048bc:	4013      	ands	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d015      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x1d2>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d011      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048de:	e008      	b.n	80048f2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e000      	b.n	80048f4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40013400 	.word	0x40013400
 8004908:	40014000 	.word	0x40014000
 800490c:	40014400 	.word	0x40014400
 8004910:	40014800 	.word	0x40014800
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	00010007 	.word	0x00010007

08004920 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d109      	bne.n	8004948 <HAL_TIM_PWM_Start_DMA+0x28>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e03c      	b.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b04      	cmp	r3, #4
 800494c:	d109      	bne.n	8004962 <HAL_TIM_PWM_Start_DMA+0x42>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	bf0c      	ite	eq
 800495a:	2301      	moveq	r3, #1
 800495c:	2300      	movne	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e02f      	b.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d109      	bne.n	800497c <HAL_TIM_PWM_Start_DMA+0x5c>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e022      	b.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d109      	bne.n	8004996 <HAL_TIM_PWM_Start_DMA+0x76>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	e015      	b.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b10      	cmp	r3, #16
 800499a:	d109      	bne.n	80049b0 <HAL_TIM_PWM_Start_DMA+0x90>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e008      	b.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
 80049c8:	e1a1      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_TIM_PWM_Start_DMA+0xc4>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e03c      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x13e>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d109      	bne.n	80049fe <HAL_TIM_PWM_Start_DMA+0xde>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	bf0c      	ite	eq
 80049f6:	2301      	moveq	r3, #1
 80049f8:	2300      	movne	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e02f      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x13e>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start_DMA+0xf8>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e022      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x13e>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d109      	bne.n	8004a32 <HAL_TIM_PWM_Start_DMA+0x112>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e015      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x13e>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d109      	bne.n	8004a4c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e008      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x13e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	bf0c      	ite	eq
 8004a58:	2301      	moveq	r3, #1
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d034      	beq.n	8004acc <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start_DMA+0x152>
 8004a68:	887b      	ldrh	r3, [r7, #2]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e14d      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start_DMA+0x162>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a80:	e026      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start_DMA+0x172>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a90:	e01e      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start_DMA+0x182>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa0:	e016      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start_DMA+0x192>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ab0:	e00e      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac0:	e006      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aca:	e001      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e11e      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
  }

  switch (Channel)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b0c      	cmp	r3, #12
 8004ad4:	f200 80ae 	bhi.w	8004c34 <HAL_TIM_PWM_Start_DMA+0x314>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004c35 	.word	0x08004c35
 8004ae8:	08004c35 	.word	0x08004c35
 8004aec:	08004c35 	.word	0x08004c35
 8004af0:	08004b5d 	.word	0x08004b5d
 8004af4:	08004c35 	.word	0x08004c35
 8004af8:	08004c35 	.word	0x08004c35
 8004afc:	08004c35 	.word	0x08004c35
 8004b00:	08004ba5 	.word	0x08004ba5
 8004b04:	08004c35 	.word	0x08004c35
 8004b08:	08004c35 	.word	0x08004c35
 8004b0c:	08004c35 	.word	0x08004c35
 8004b10:	08004bed 	.word	0x08004bed
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	4a7f      	ldr	r2, [pc, #508]	; (8004d18 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	4a7e      	ldr	r2, [pc, #504]	; (8004d1c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	4a7d      	ldr	r2, [pc, #500]	; (8004d20 <HAL_TIM_PWM_Start_DMA+0x400>)
 8004b2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3334      	adds	r3, #52	; 0x34
 8004b38:	461a      	mov	r2, r3
 8004b3a:	887b      	ldrh	r3, [r7, #2]
 8004b3c:	f7fc fd3e 	bl	80015bc <HAL_DMA_Start_IT>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0e1      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b58:	60da      	str	r2, [r3, #12]
      break;
 8004b5a:	e06c      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	4a6d      	ldr	r2, [pc, #436]	; (8004d18 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	4a6c      	ldr	r2, [pc, #432]	; (8004d1c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	4a6b      	ldr	r2, [pc, #428]	; (8004d20 <HAL_TIM_PWM_Start_DMA+0x400>)
 8004b72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3338      	adds	r3, #56	; 0x38
 8004b80:	461a      	mov	r2, r3
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	f7fc fd1a 	bl	80015bc <HAL_DMA_Start_IT>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0bd      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ba0:	60da      	str	r2, [r3, #12]
      break;
 8004ba2:	e048      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	4a5b      	ldr	r2, [pc, #364]	; (8004d18 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	4a5a      	ldr	r2, [pc, #360]	; (8004d1c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4a59      	ldr	r2, [pc, #356]	; (8004d20 <HAL_TIM_PWM_Start_DMA+0x400>)
 8004bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	333c      	adds	r3, #60	; 0x3c
 8004bc8:	461a      	mov	r2, r3
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	f7fc fcf6 	bl	80015bc <HAL_DMA_Start_IT>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e099      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be8:	60da      	str	r2, [r3, #12]
      break;
 8004bea:	e024      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	4a49      	ldr	r2, [pc, #292]	; (8004d18 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	4a48      	ldr	r2, [pc, #288]	; (8004d1c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	4a47      	ldr	r2, [pc, #284]	; (8004d20 <HAL_TIM_PWM_Start_DMA+0x400>)
 8004c02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3340      	adds	r3, #64	; 0x40
 8004c10:	461a      	mov	r2, r3
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	f7fc fcd2 	bl	80015bc <HAL_DMA_Start_IT>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e075      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c30:	60da      	str	r2, [r3, #12]
      break;
 8004c32:	e000      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8004c34:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 f8d8 	bl	8005df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a36      	ldr	r2, [pc, #216]	; (8004d24 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a35      	ldr	r2, [pc, #212]	; (8004d28 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00e      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a33      	ldr	r2, [pc, #204]	; (8004d2c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d009      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a32      	ldr	r2, [pc, #200]	; (8004d30 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a30      	ldr	r2, [pc, #192]	; (8004d34 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x35a>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <HAL_TIM_PWM_Start_DMA+0x35c>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a23      	ldr	r2, [pc, #140]	; (8004d24 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d013      	beq.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1a      	ldr	r2, [pc, #104]	; (8004d28 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d115      	bne.n	8004cf8 <HAL_TIM_PWM_Start_DMA+0x3d8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d015      	beq.n	8004d0a <HAL_TIM_PWM_Start_DMA+0x3ea>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d011      	beq.n	8004d0a <HAL_TIM_PWM_Start_DMA+0x3ea>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf6:	e008      	b.n	8004d0a <HAL_TIM_PWM_Start_DMA+0x3ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e000      	b.n	8004d0c <HAL_TIM_PWM_Start_DMA+0x3ec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	080055d7 	.word	0x080055d7
 8004d1c:	0800567f 	.word	0x0800567f
 8004d20:	08005545 	.word	0x08005545
 8004d24:	40012c00 	.word	0x40012c00
 8004d28:	40013400 	.word	0x40013400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40014400 	.word	0x40014400
 8004d34:	40014800 	.word	0x40014800
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	00010007 	.word	0x00010007

08004d44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e097      	b.n	8004e88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb ffb9 	bl	8000ce4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004d88:	f023 0307 	bic.w	r3, r3, #7
 8004d8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f000 fca5 	bl	80056e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004de4:	f023 030c 	bic.w	r3, r3, #12
 8004de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	4313      	orrs	r3, r2
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	011a      	lsls	r2, r3, #4
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	031b      	lsls	r3, r3, #12
 8004e14:	4313      	orrs	r3, r2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	4313      	orrs	r3, r2
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ea8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d110      	bne.n	8004ee2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d102      	bne.n	8004ecc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec6:	7b7b      	ldrb	r3, [r7, #13]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d001      	beq.n	8004ed0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e069      	b.n	8004fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee0:	e031      	b.n	8004f46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d110      	bne.n	8004f0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee8:	7bbb      	ldrb	r3, [r7, #14]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d102      	bne.n	8004ef4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eee:	7b3b      	ldrb	r3, [r7, #12]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d001      	beq.n	8004ef8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e055      	b.n	8004fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f08:	e01d      	b.n	8004f46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d108      	bne.n	8004f22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f10:	7bbb      	ldrb	r3, [r7, #14]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f16:	7b7b      	ldrb	r3, [r7, #13]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d102      	bne.n	8004f22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f1c:	7b3b      	ldrb	r3, [r7, #12]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d001      	beq.n	8004f26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e03e      	b.n	8004fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_TIM_Encoder_Start+0xc4>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d008      	beq.n	8004f64 <HAL_TIM_Encoder_Start+0xd4>
 8004f52:	e00f      	b.n	8004f74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 ff49 	bl	8005df4 <TIM_CCxChannelCmd>
      break;
 8004f62:	e016      	b.n	8004f92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 ff41 	bl	8005df4 <TIM_CCxChannelCmd>
      break;
 8004f72:	e00e      	b.n	8004f92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 ff39 	bl	8005df4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2201      	movs	r2, #1
 8004f88:	2104      	movs	r1, #4
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 ff32 	bl	8005df4 <TIM_CCxChannelCmd>
      break;
 8004f90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d122      	bne.n	8005008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d11b      	bne.n	8005008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0202 	mvn.w	r2, #2
 8004fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa76 	bl	80054e0 <HAL_TIM_IC_CaptureCallback>
 8004ff4:	e005      	b.n	8005002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa68 	bl	80054cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa79 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b04      	cmp	r3, #4
 8005014:	d122      	bne.n	800505c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b04      	cmp	r3, #4
 8005022:	d11b      	bne.n	800505c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0204 	mvn.w	r2, #4
 800502c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa4c 	bl	80054e0 <HAL_TIM_IC_CaptureCallback>
 8005048:	e005      	b.n	8005056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa3e 	bl	80054cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa4f 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b08      	cmp	r3, #8
 8005068:	d122      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b08      	cmp	r3, #8
 8005076:	d11b      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0208 	mvn.w	r2, #8
 8005080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2204      	movs	r2, #4
 8005086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fa22 	bl	80054e0 <HAL_TIM_IC_CaptureCallback>
 800509c:	e005      	b.n	80050aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa14 	bl	80054cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fa25 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b10      	cmp	r3, #16
 80050bc:	d122      	bne.n	8005104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d11b      	bne.n	8005104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0210 	mvn.w	r2, #16
 80050d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2208      	movs	r2, #8
 80050da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9f8 	bl	80054e0 <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9ea 	bl	80054cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f9fb 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b01      	cmp	r3, #1
 8005110:	d10e      	bne.n	8005130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b01      	cmp	r3, #1
 800511e:	d107      	bne.n	8005130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0201 	mvn.w	r2, #1
 8005128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fb f8fc 	bl	8000328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	2b80      	cmp	r3, #128	; 0x80
 800513c:	d10e      	bne.n	800515c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d107      	bne.n	800515c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 ff9e 	bl	8006098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d10e      	bne.n	800518a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b80      	cmp	r3, #128	; 0x80
 8005178:	d107      	bne.n	800518a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 ff91 	bl	80060ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d10e      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d107      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f9b3 	bl	800551c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d10e      	bne.n	80051e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d107      	bne.n	80051e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f06f 0220 	mvn.w	r2, #32
 80051da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 ff51 	bl	8006084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f0:	d10f      	bne.n	8005212 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005200:	d107      	bne.n	8005212 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800520a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 ff57 	bl	80060c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800521c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005220:	d10f      	bne.n	8005242 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800522c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005230:	d107      	bne.n	8005242 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800523a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 ff49 	bl	80060d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005250:	d10f      	bne.n	8005272 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005260:	d107      	bne.n	8005272 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800526a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 ff3b 	bl	80060e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800527c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005280:	d10f      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800528c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005290:	d107      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800529a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 ff2d 	bl	80060fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e0fd      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b14      	cmp	r3, #20
 80052d2:	f200 80f0 	bhi.w	80054b6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80052d6:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	08005331 	.word	0x08005331
 80052e0:	080054b7 	.word	0x080054b7
 80052e4:	080054b7 	.word	0x080054b7
 80052e8:	080054b7 	.word	0x080054b7
 80052ec:	08005371 	.word	0x08005371
 80052f0:	080054b7 	.word	0x080054b7
 80052f4:	080054b7 	.word	0x080054b7
 80052f8:	080054b7 	.word	0x080054b7
 80052fc:	080053b3 	.word	0x080053b3
 8005300:	080054b7 	.word	0x080054b7
 8005304:	080054b7 	.word	0x080054b7
 8005308:	080054b7 	.word	0x080054b7
 800530c:	080053f3 	.word	0x080053f3
 8005310:	080054b7 	.word	0x080054b7
 8005314:	080054b7 	.word	0x080054b7
 8005318:	080054b7 	.word	0x080054b7
 800531c:	08005435 	.word	0x08005435
 8005320:	080054b7 	.word	0x080054b7
 8005324:	080054b7 	.word	0x080054b7
 8005328:	080054b7 	.word	0x080054b7
 800532c:	08005475 	.word	0x08005475
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fa66 	bl	8005808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0208 	orr.w	r2, r2, #8
 800534a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0204 	bic.w	r2, r2, #4
 800535a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6999      	ldr	r1, [r3, #24]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	619a      	str	r2, [r3, #24]
      break;
 800536e:	e0a3      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fad6 	bl	8005928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	021a      	lsls	r2, r3, #8
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	619a      	str	r2, [r3, #24]
      break;
 80053b0:	e082      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fb3f 	bl	8005a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0208 	orr.w	r2, r2, #8
 80053cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0204 	bic.w	r2, r2, #4
 80053dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69d9      	ldr	r1, [r3, #28]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	61da      	str	r2, [r3, #28]
      break;
 80053f0:	e062      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fba7 	bl	8005b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800540c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69d9      	ldr	r1, [r3, #28]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	021a      	lsls	r2, r3, #8
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	61da      	str	r2, [r3, #28]
      break;
 8005432:	e041      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fc10 	bl	8005c60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0208 	orr.w	r2, r2, #8
 800544e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0204 	bic.w	r2, r2, #4
 800545e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005472:	e021      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fc54 	bl	8005d28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	021a      	lsls	r2, r3, #8
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054b4:	e000      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80054b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop

080054cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d107      	bne.n	800556c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800556a:	e02a      	b.n	80055c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d107      	bne.n	8005586 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2202      	movs	r2, #2
 800557a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005584:	e01d      	b.n	80055c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d107      	bne.n	80055a0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2204      	movs	r2, #4
 8005594:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800559e:	e010      	b.n	80055c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d107      	bne.n	80055ba <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2208      	movs	r2, #8
 80055ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b8:	e003      	b.n	80055c2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff ffb4 	bl	8005530 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	771a      	strb	r2, [r3, #28]
}
 80055ce:	bf00      	nop
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d10b      	bne.n	8005606 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d136      	bne.n	800566a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005604:	e031      	b.n	800566a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	d10b      	bne.n	8005628 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2202      	movs	r2, #2
 8005614:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d125      	bne.n	800566a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005626:	e020      	b.n	800566a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	429a      	cmp	r2, r3
 8005630:	d10b      	bne.n	800564a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2204      	movs	r2, #4
 8005636:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d114      	bne.n	800566a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005648:	e00f      	b.n	800566a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d10a      	bne.n	800566a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2208      	movs	r2, #8
 8005658:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d103      	bne.n	800566a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff ff42 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	771a      	strb	r2, [r3, #28]
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d103      	bne.n	800569e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	771a      	strb	r2, [r3, #28]
 800569c:	e019      	b.n	80056d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d103      	bne.n	80056b0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2202      	movs	r2, #2
 80056ac:	771a      	strb	r2, [r3, #28]
 80056ae:	e010      	b.n	80056d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d103      	bne.n	80056c2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2204      	movs	r2, #4
 80056be:	771a      	strb	r2, [r3, #28]
 80056c0:	e007      	b.n	80056d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d102      	bne.n	80056d2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2208      	movs	r2, #8
 80056d0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff ff18 	bl	8005508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	771a      	strb	r2, [r3, #28]
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3c      	ldr	r2, [pc, #240]	; (80057ec <TIM_Base_SetConfig+0x104>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005706:	d00b      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a39      	ldr	r2, [pc, #228]	; (80057f0 <TIM_Base_SetConfig+0x108>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a38      	ldr	r2, [pc, #224]	; (80057f4 <TIM_Base_SetConfig+0x10c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a37      	ldr	r2, [pc, #220]	; (80057f8 <TIM_Base_SetConfig+0x110>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d108      	bne.n	8005732 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2d      	ldr	r2, [pc, #180]	; (80057ec <TIM_Base_SetConfig+0x104>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2a      	ldr	r2, [pc, #168]	; (80057f0 <TIM_Base_SetConfig+0x108>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a29      	ldr	r2, [pc, #164]	; (80057f4 <TIM_Base_SetConfig+0x10c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a28      	ldr	r2, [pc, #160]	; (80057f8 <TIM_Base_SetConfig+0x110>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a27      	ldr	r2, [pc, #156]	; (80057fc <TIM_Base_SetConfig+0x114>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a26      	ldr	r2, [pc, #152]	; (8005800 <TIM_Base_SetConfig+0x118>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a25      	ldr	r2, [pc, #148]	; (8005804 <TIM_Base_SetConfig+0x11c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a10      	ldr	r2, [pc, #64]	; (80057ec <TIM_Base_SetConfig+0x104>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00f      	beq.n	80057d0 <TIM_Base_SetConfig+0xe8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a11      	ldr	r2, [pc, #68]	; (80057f8 <TIM_Base_SetConfig+0x110>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <TIM_Base_SetConfig+0xe8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a10      	ldr	r2, [pc, #64]	; (80057fc <TIM_Base_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_Base_SetConfig+0xe8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a0f      	ldr	r2, [pc, #60]	; (8005800 <TIM_Base_SetConfig+0x118>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_Base_SetConfig+0xe8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a0e      	ldr	r2, [pc, #56]	; (8005804 <TIM_Base_SetConfig+0x11c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d103      	bne.n	80057d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	615a      	str	r2, [r3, #20]
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40013400 	.word	0x40013400
 80057fc:	40014000 	.word	0x40014000
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800

08005808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f023 0201 	bic.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0303 	bic.w	r3, r3, #3
 8005842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 0302 	bic.w	r3, r3, #2
 8005854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a2c      	ldr	r2, [pc, #176]	; (8005914 <TIM_OC1_SetConfig+0x10c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00f      	beq.n	8005888 <TIM_OC1_SetConfig+0x80>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a2b      	ldr	r2, [pc, #172]	; (8005918 <TIM_OC1_SetConfig+0x110>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00b      	beq.n	8005888 <TIM_OC1_SetConfig+0x80>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a2a      	ldr	r2, [pc, #168]	; (800591c <TIM_OC1_SetConfig+0x114>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d007      	beq.n	8005888 <TIM_OC1_SetConfig+0x80>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a29      	ldr	r2, [pc, #164]	; (8005920 <TIM_OC1_SetConfig+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_OC1_SetConfig+0x80>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a28      	ldr	r2, [pc, #160]	; (8005924 <TIM_OC1_SetConfig+0x11c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d10c      	bne.n	80058a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f023 0308 	bic.w	r3, r3, #8
 800588e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 0304 	bic.w	r3, r3, #4
 80058a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <TIM_OC1_SetConfig+0x10c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00f      	beq.n	80058ca <TIM_OC1_SetConfig+0xc2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <TIM_OC1_SetConfig+0x110>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00b      	beq.n	80058ca <TIM_OC1_SetConfig+0xc2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a19      	ldr	r2, [pc, #100]	; (800591c <TIM_OC1_SetConfig+0x114>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <TIM_OC1_SetConfig+0xc2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a18      	ldr	r2, [pc, #96]	; (8005920 <TIM_OC1_SetConfig+0x118>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <TIM_OC1_SetConfig+0xc2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a17      	ldr	r2, [pc, #92]	; (8005924 <TIM_OC1_SetConfig+0x11c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d111      	bne.n	80058ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	621a      	str	r2, [r3, #32]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40012c00 	.word	0x40012c00
 8005918:	40013400 	.word	0x40013400
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800

08005928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0210 	bic.w	r2, r3, #16
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0320 	bic.w	r3, r3, #32
 8005976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a28      	ldr	r2, [pc, #160]	; (8005a28 <TIM_OC2_SetConfig+0x100>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC2_SetConfig+0x6c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a27      	ldr	r2, [pc, #156]	; (8005a2c <TIM_OC2_SetConfig+0x104>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d10d      	bne.n	80059b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <TIM_OC2_SetConfig+0x100>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00f      	beq.n	80059d8 <TIM_OC2_SetConfig+0xb0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a1c      	ldr	r2, [pc, #112]	; (8005a2c <TIM_OC2_SetConfig+0x104>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00b      	beq.n	80059d8 <TIM_OC2_SetConfig+0xb0>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <TIM_OC2_SetConfig+0x108>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_OC2_SetConfig+0xb0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a1a      	ldr	r2, [pc, #104]	; (8005a34 <TIM_OC2_SetConfig+0x10c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC2_SetConfig+0xb0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <TIM_OC2_SetConfig+0x110>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d113      	bne.n	8005a00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40012c00 	.word	0x40012c00
 8005a2c:	40013400 	.word	0x40013400
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800

08005a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <TIM_OC3_SetConfig+0xfc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_OC3_SetConfig+0x6a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <TIM_OC3_SetConfig+0x100>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10d      	bne.n	8005ac2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <TIM_OC3_SetConfig+0xfc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00f      	beq.n	8005aea <TIM_OC3_SetConfig+0xae>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <TIM_OC3_SetConfig+0x100>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00b      	beq.n	8005aea <TIM_OC3_SetConfig+0xae>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <TIM_OC3_SetConfig+0x104>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d007      	beq.n	8005aea <TIM_OC3_SetConfig+0xae>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <TIM_OC3_SetConfig+0x108>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <TIM_OC3_SetConfig+0xae>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <TIM_OC3_SetConfig+0x10c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d113      	bne.n	8005b12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	621a      	str	r2, [r3, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40012c00 	.word	0x40012c00
 8005b3c:	40013400 	.word	0x40013400
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40014400 	.word	0x40014400
 8005b48:	40014800 	.word	0x40014800

08005b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	031b      	lsls	r3, r3, #12
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <TIM_OC4_SetConfig+0x100>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC4_SetConfig+0x6c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <TIM_OC4_SetConfig+0x104>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d10d      	bne.n	8005bd4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <TIM_OC4_SetConfig+0x100>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00f      	beq.n	8005bfc <TIM_OC4_SetConfig+0xb0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <TIM_OC4_SetConfig+0x104>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_OC4_SetConfig+0xb0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1b      	ldr	r2, [pc, #108]	; (8005c54 <TIM_OC4_SetConfig+0x108>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_OC4_SetConfig+0xb0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a1a      	ldr	r2, [pc, #104]	; (8005c58 <TIM_OC4_SetConfig+0x10c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_OC4_SetConfig+0xb0>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <TIM_OC4_SetConfig+0x110>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d113      	bne.n	8005c24 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	019b      	lsls	r3, r3, #6
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	019b      	lsls	r3, r3, #6
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800

08005c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a17      	ldr	r2, [pc, #92]	; (8005d14 <TIM_OC5_SetConfig+0xb4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00f      	beq.n	8005cda <TIM_OC5_SetConfig+0x7a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a16      	ldr	r2, [pc, #88]	; (8005d18 <TIM_OC5_SetConfig+0xb8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00b      	beq.n	8005cda <TIM_OC5_SetConfig+0x7a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <TIM_OC5_SetConfig+0xbc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <TIM_OC5_SetConfig+0x7a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <TIM_OC5_SetConfig+0xc0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_OC5_SetConfig+0x7a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <TIM_OC5_SetConfig+0xc4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d109      	bne.n	8005cee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40013400 	.word	0x40013400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40014400 	.word	0x40014400
 8005d24:	40014800 	.word	0x40014800

08005d28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	051b      	lsls	r3, r3, #20
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <TIM_OC6_SetConfig+0xb8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00f      	beq.n	8005da4 <TIM_OC6_SetConfig+0x7c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <TIM_OC6_SetConfig+0xbc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00b      	beq.n	8005da4 <TIM_OC6_SetConfig+0x7c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <TIM_OC6_SetConfig+0xc0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_OC6_SetConfig+0x7c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a15      	ldr	r2, [pc, #84]	; (8005dec <TIM_OC6_SetConfig+0xc4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_OC6_SetConfig+0x7c>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a14      	ldr	r2, [pc, #80]	; (8005df0 <TIM_OC6_SetConfig+0xc8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d109      	bne.n	8005db8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005daa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	029b      	lsls	r3, r3, #10
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	2201      	movs	r2, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1a      	ldr	r2, [r3, #32]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	401a      	ands	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1a      	ldr	r2, [r3, #32]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e065      	b.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a2c      	ldr	r2, [pc, #176]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2b      	ldr	r2, [pc, #172]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a1b      	ldr	r2, [pc, #108]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d018      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ece:	d013      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a17      	ldr	r2, [pc, #92]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a12      	ldr	r2, [pc, #72]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a13      	ldr	r2, [pc, #76]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10c      	bne.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005efe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40013400 	.word	0x40013400
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40014000 	.word	0x40014000

08005f44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e087      	b.n	8006070 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a27      	ldr	r2, [pc, #156]	; (800607c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a25      	ldr	r2, [pc, #148]	; (8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d106      	bne.n	8005ffc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1d      	ldr	r2, [pc, #116]	; (8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d126      	bne.n	800605e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	051b      	lsls	r3, r3, #20
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0e      	ldr	r2, [pc, #56]	; (800607c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d004      	beq.n	8006050 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a0d      	ldr	r2, [pc, #52]	; (8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d106      	bne.n	800605e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40013400 	.word	0x40013400

08006084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006120:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006124:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	b29a      	uxth	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800613e:	b480      	push	{r7}
 8006140:	b085      	sub	sp, #20
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006146:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800614a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	b29b      	uxth	r3, r3
 8006158:	43db      	mvns	r3, r3
 800615a:	b29b      	uxth	r3, r3
 800615c:	4013      	ands	r3, r2
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006174:	b084      	sub	sp, #16
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	f107 0014 	add.w	r0, r7, #20
 8006182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	b004      	add	sp, #16
 80061b4:	4770      	bx	lr
	...

080061b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b09b      	sub	sp, #108	; 0x6c
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80061da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d81f      	bhi.n	800622a <USB_ActivateEndpoint+0x72>
 80061ea:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <USB_ActivateEndpoint+0x38>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006201 	.word	0x08006201
 80061f4:	0800621d 	.word	0x0800621d
 80061f8:	08006233 	.word	0x08006233
 80061fc:	0800620f 	.word	0x0800620f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006200:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006208:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800620c:	e012      	b.n	8006234 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800620e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006212:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006216:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800621a:	e00b      	b.n	8006234 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800621c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006224:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006228:	e004      	b.n	8006234 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006230:	e000      	b.n	8006234 <USB_ActivateEndpoint+0x7c>
      break;
 8006232:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	b21b      	sxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	b21a      	sxth	r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b21b      	sxth	r3, r3
 8006276:	4313      	orrs	r3, r2
 8006278:	b21b      	sxth	r3, r3
 800627a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800628c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629c:	b29b      	uxth	r3, r3
 800629e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	7b1b      	ldrb	r3, [r3, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 8149 	bne.w	800653c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8084 	beq.w	80063bc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4413      	add	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	00da      	lsls	r2, r3, #3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	88db      	ldrh	r3, [r3, #6]
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	b29b      	uxth	r3, r3
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	81fb      	strh	r3, [r7, #14]
 80062f6:	89fb      	ldrh	r3, [r7, #14]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01b      	beq.n	8006338 <USB_ActivateEndpoint+0x180>
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	81bb      	strh	r3, [r7, #12]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	89bb      	ldrh	r3, [r7, #12]
 8006324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006334:	b29b      	uxth	r3, r3
 8006336:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	78db      	ldrb	r3, [r3, #3]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d020      	beq.n	8006382 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006356:	813b      	strh	r3, [r7, #8]
 8006358:	893b      	ldrh	r3, [r7, #8]
 800635a:	f083 0320 	eor.w	r3, r3, #32
 800635e:	813b      	strh	r3, [r7, #8]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	441a      	add	r2, r3
 800636a:	893b      	ldrh	r3, [r7, #8]
 800636c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637c:	b29b      	uxth	r3, r3
 800637e:	8013      	strh	r3, [r2, #0]
 8006380:	e27f      	b.n	8006882 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006398:	817b      	strh	r3, [r7, #10]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	441a      	add	r2, r3
 80063a4:	897b      	ldrh	r3, [r7, #10]
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]
 80063ba:	e262      	b.n	8006882 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	4413      	add	r3, r2
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	00da      	lsls	r2, r3, #3
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	4413      	add	r3, r2
 80063da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063de:	62bb      	str	r3, [r7, #40]	; 0x28
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	88db      	ldrh	r3, [r3, #6]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	4413      	add	r3, r2
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	00da      	lsls	r2, r3, #3
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	4413      	add	r3, r2
 800640e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d112      	bne.n	8006442 <USB_ActivateEndpoint+0x28a>
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006426:	b29a      	uxth	r2, r3
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643a:	b29a      	uxth	r2, r3
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	e02f      	b.n	80064a2 <USB_ActivateEndpoint+0x2ea>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b3e      	cmp	r3, #62	; 0x3e
 8006448:	d813      	bhi.n	8006472 <USB_ActivateEndpoint+0x2ba>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	663b      	str	r3, [r7, #96]	; 0x60
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <USB_ActivateEndpoint+0x2ac>
 800645e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006460:	3301      	adds	r3, #1
 8006462:	663b      	str	r3, [r7, #96]	; 0x60
 8006464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006466:	b29b      	uxth	r3, r3
 8006468:	029b      	lsls	r3, r3, #10
 800646a:	b29a      	uxth	r2, r3
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e017      	b.n	80064a2 <USB_ActivateEndpoint+0x2ea>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	663b      	str	r3, [r7, #96]	; 0x60
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 031f 	and.w	r3, r3, #31
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <USB_ActivateEndpoint+0x2d4>
 8006486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006488:	3b01      	subs	r3, #1
 800648a:	663b      	str	r3, [r7, #96]	; 0x60
 800648c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800648e:	b29b      	uxth	r3, r3
 8006490:	029b      	lsls	r3, r3, #10
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	83fb      	strh	r3, [r7, #30]
 80064b0:	8bfb      	ldrh	r3, [r7, #30]
 80064b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01b      	beq.n	80064f2 <USB_ActivateEndpoint+0x33a>
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d0:	83bb      	strh	r3, [r7, #28]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	441a      	add	r2, r3
 80064dc:	8bbb      	ldrh	r3, [r7, #28]
 80064de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006508:	837b      	strh	r3, [r7, #26]
 800650a:	8b7b      	ldrh	r3, [r7, #26]
 800650c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006510:	837b      	strh	r3, [r7, #26]
 8006512:	8b7b      	ldrh	r3, [r7, #26]
 8006514:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006518:	837b      	strh	r3, [r7, #26]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	441a      	add	r2, r3
 8006524:	8b7b      	ldrh	r3, [r7, #26]
 8006526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006536:	b29b      	uxth	r3, r3
 8006538:	8013      	strh	r3, [r2, #0]
 800653a:	e1a2      	b.n	8006882 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006574:	b29b      	uxth	r3, r3
 8006576:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	65bb      	str	r3, [r7, #88]	; 0x58
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006582:	b29b      	uxth	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006588:	4413      	add	r3, r2
 800658a:	65bb      	str	r3, [r7, #88]	; 0x58
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	00da      	lsls	r2, r3, #3
 8006592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006594:	4413      	add	r3, r2
 8006596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800659a:	657b      	str	r3, [r7, #84]	; 0x54
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	891b      	ldrh	r3, [r3, #8]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	653b      	str	r3, [r7, #80]	; 0x50
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065bc:	4413      	add	r3, r2
 80065be:	653b      	str	r3, [r7, #80]	; 0x50
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	00da      	lsls	r2, r3, #3
 80065c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	895b      	ldrh	r3, [r3, #10]
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f040 8091 	bne.w	800670c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80065f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01b      	beq.n	800663a <USB_ActivateEndpoint+0x482>
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	877b      	strh	r3, [r7, #58]	; 0x3a
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	b29b      	uxth	r3, r3
 8006638:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	873b      	strh	r3, [r7, #56]	; 0x38
 8006648:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01b      	beq.n	800668a <USB_ActivateEndpoint+0x4d2>
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006668:	86fb      	strh	r3, [r7, #54]	; 0x36
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006682:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006686:	b29b      	uxth	r3, r3
 8006688:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800669c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80066a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80066aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e8:	867b      	strh	r3, [r7, #50]	; 0x32
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80066f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006706:	b29b      	uxth	r3, r3
 8006708:	8013      	strh	r3, [r2, #0]
 800670a:	e0ba      	b.n	8006882 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800671c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01d      	beq.n	8006764 <USB_ActivateEndpoint+0x5ac>
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	441a      	add	r2, r3
 800674c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006774:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01d      	beq.n	80067bc <USB_ActivateEndpoint+0x604>
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	78db      	ldrb	r3, [r3, #3]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d024      	beq.n	800680e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80067de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80067e2:	f083 0320 	eor.w	r3, r3, #32
 80067e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80067f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006808:	b29b      	uxth	r3, r3
 800680a:	8013      	strh	r3, [r2, #0]
 800680c:	e01d      	b.n	800684a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006824:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	441a      	add	r2, r3
 8006832:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006846:	b29b      	uxth	r3, r3
 8006848:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800685c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006860:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800686e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687e:	b29b      	uxth	r3, r3
 8006880:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006882:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006886:	4618      	mov	r0, r3
 8006888:	376c      	adds	r7, #108	; 0x6c
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop

08006894 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006894:	b480      	push	{r7}
 8006896:	b08d      	sub	sp, #52	; 0x34
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	7b1b      	ldrb	r3, [r3, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 808e 	bne.w	80069c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d044      	beq.n	800693a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	81bb      	strh	r3, [r7, #12]
 80068be:	89bb      	ldrh	r3, [r7, #12]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <USB_DeactivateEndpoint+0x6c>
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	817b      	strh	r3, [r7, #10]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	897b      	ldrh	r3, [r7, #10]
 80068ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29b      	uxth	r3, r3
 800690e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006916:	813b      	strh	r3, [r7, #8]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	441a      	add	r2, r3
 8006922:	893b      	ldrh	r3, [r7, #8]
 8006924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800692c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006934:	b29b      	uxth	r3, r3
 8006936:	8013      	strh	r3, [r2, #0]
 8006938:	e192      	b.n	8006c60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	827b      	strh	r3, [r7, #18]
 8006948:	8a7b      	ldrh	r3, [r7, #18]
 800694a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01b      	beq.n	800698a <USB_DeactivateEndpoint+0xf6>
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006968:	823b      	strh	r3, [r7, #16]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	441a      	add	r2, r3
 8006974:	8a3b      	ldrh	r3, [r7, #16]
 8006976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a0:	81fb      	strh	r3, [r7, #14]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	441a      	add	r2, r3
 80069ac:	89fb      	ldrh	r3, [r7, #14]
 80069ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]
 80069c2:	e14d      	b.n	8006c60 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 80a5 	bne.w	8006b18 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	843b      	strh	r3, [r7, #32]
 80069dc:	8c3b      	ldrh	r3, [r7, #32]
 80069de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01b      	beq.n	8006a1e <USB_DeactivateEndpoint+0x18a>
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fc:	83fb      	strh	r3, [r7, #30]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	441a      	add	r2, r3
 8006a08:	8bfb      	ldrh	r3, [r7, #30]
 8006a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	83bb      	strh	r3, [r7, #28]
 8006a2c:	8bbb      	ldrh	r3, [r7, #28]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01b      	beq.n	8006a6e <USB_DeactivateEndpoint+0x1da>
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4c:	837b      	strh	r3, [r7, #26]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	441a      	add	r2, r3
 8006a58:	8b7b      	ldrh	r3, [r7, #26]
 8006a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a84:	833b      	strh	r3, [r7, #24]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	441a      	add	r2, r3
 8006a90:	8b3b      	ldrh	r3, [r7, #24]
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abc:	82fb      	strh	r3, [r7, #22]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	8afb      	ldrh	r3, [r7, #22]
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af4:	82bb      	strh	r3, [r7, #20]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	441a      	add	r2, r3
 8006b00:	8abb      	ldrh	r3, [r7, #20]
 8006b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	8013      	strh	r3, [r2, #0]
 8006b16:	e0a3      	b.n	8006c60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01b      	beq.n	8006b68 <USB_DeactivateEndpoint+0x2d4>
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b46:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01b      	beq.n	8006bb8 <USB_DeactivateEndpoint+0x324>
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b96:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	441a      	add	r2, r3
 8006ba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	441a      	add	r2, r3
 8006bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	441a      	add	r2, r3
 8006c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3734      	adds	r7, #52	; 0x34
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b0cc      	sub	sp, #304	; 0x130
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c7c:	6018      	str	r0, [r3, #0]
 8006c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c86:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	785b      	ldrb	r3, [r3, #1]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	f041 817d 	bne.w	8007f94 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d908      	bls.n	8006cc8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006cc6:	e007      	b.n	8006cd8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	7b1b      	ldrb	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d152      	bne.n	8006d8e <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6959      	ldr	r1, [r3, #20]
 8006cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	88da      	ldrh	r2, [r3, #6]
 8006d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d0a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d0e:	6800      	ldr	r0, [r0, #0]
 8006d10:	f001 ff1f 	bl	8008b52 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d18:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006d1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d20:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006d42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d46:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	00da      	lsls	r2, r3, #3
 8006d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d62:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d72:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d82:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	801a      	strh	r2, [r3, #0]
 8006d8a:	f001 b8b5 	b.w	8007ef8 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	78db      	ldrb	r3, [r3, #3]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	f040 84c6 	bne.w	800772c <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6a1a      	ldr	r2, [r3, #32]
 8006dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	f240 8443 	bls.w	8007644 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e2a:	1ad2      	subs	r2, r2, r3
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 823e 	beq.w	80072dc <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006e68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e6c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	785b      	ldrb	r3, [r3, #1]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f040 809a 	bne.w	8006fba <USB_EPStartXfer+0x34c>
 8006e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e92:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e96:	6812      	ldr	r2, [r2, #0]
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	4619      	mov	r1, r3
 8006eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006eb8:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	00da      	lsls	r2, r3, #3
 8006ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4413      	add	r3, r2
 8006edc:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8006ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d122      	bne.n	8006f38 <USB_EPStartXfer+0x2ca>
 8006ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	801a      	strh	r2, [r3, #0]
 8006f36:	e079      	b.n	800702c <USB_EPStartXfer+0x3be>
 8006f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f3e:	d81b      	bhi.n	8006f78 <USB_EPStartXfer+0x30a>
 8006f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <USB_EPStartXfer+0x2f2>
 8006f56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	029b      	lsls	r3, r3, #10
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	e059      	b.n	800702c <USB_EPStartXfer+0x3be>
 8006f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <USB_EPStartXfer+0x32a>
 8006f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f92:	3b01      	subs	r3, #1
 8006f94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	029b      	lsls	r3, r3, #10
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	e038      	b.n	800702c <USB_EPStartXfer+0x3be>
 8006fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d130      	bne.n	800702c <USB_EPStartXfer+0x3be>
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4619      	mov	r1, r3
 8006fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006fe4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fe8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006fec:	6812      	ldr	r2, [r2, #0]
 8006fee:	440a      	add	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	00da      	lsls	r2, r3, #3
 8007000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007004:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4413      	add	r3, r2
 800700c:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800701e:	b29a      	uxth	r2, r3
 8007020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800702c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	895b      	ldrh	r3, [r3, #10]
 8007038:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800703c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6959      	ldr	r1, [r3, #20]
 8007048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704c:	b29b      	uxth	r3, r3
 800704e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007052:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007056:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800705a:	6800      	ldr	r0, [r0, #0]
 800705c:	f001 fd79 	bl	8008b52 <USB_WritePMA>
            ep->xfer_buff += len;
 8007060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695a      	ldr	r2, [r3, #20]
 800706c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007070:	441a      	add	r2, r3
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6a1a      	ldr	r2, [r3, #32]
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	429a      	cmp	r2, r3
 8007098:	d90f      	bls.n	80070ba <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800709a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6a1a      	ldr	r2, [r3, #32]
 80070a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	621a      	str	r2, [r3, #32]
 80070b8:	e00e      	b.n	80070d8 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80070ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80070ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2200      	movs	r2, #0
 80070d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f040 809a 	bne.w	800721e <USB_EPStartXfer+0x5b0>
 80070ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80070f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070f6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070fa:	6812      	ldr	r2, [r2, #0]
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800710c:	b29b      	uxth	r3, r3
 800710e:	4619      	mov	r1, r3
 8007110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007114:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007118:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800711c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	440a      	add	r2, r1
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	00da      	lsls	r2, r3, #3
 8007134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007138:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4413      	add	r3, r2
 8007140:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007148:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d122      	bne.n	800719c <USB_EPStartXfer+0x52e>
 8007156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007168:	b29a      	uxth	r2, r3
 800716a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718c:	b29a      	uxth	r2, r3
 800718e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007192:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	e083      	b.n	80072a4 <USB_EPStartXfer+0x636>
 800719c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a0:	2b3e      	cmp	r3, #62	; 0x3e
 80071a2:	d81b      	bhi.n	80071dc <USB_EPStartXfer+0x56e>
 80071a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a8:	085b      	lsrs	r3, r3, #1
 80071aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <USB_EPStartXfer+0x556>
 80071ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80071be:	3301      	adds	r3, #1
 80071c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	029b      	lsls	r3, r3, #10
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	801a      	strh	r2, [r3, #0]
 80071da:	e063      	b.n	80072a4 <USB_EPStartXfer+0x636>
 80071dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ea:	f003 031f 	and.w	r3, r3, #31
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d104      	bne.n	80071fc <USB_EPStartXfer+0x58e>
 80071f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80071f6:	3b01      	subs	r3, #1
 80071f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007200:	b29b      	uxth	r3, r3
 8007202:	029b      	lsls	r3, r3, #10
 8007204:	b29b      	uxth	r3, r3
 8007206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720e:	b29a      	uxth	r2, r3
 8007210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007214:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	801a      	strh	r2, [r3, #0]
 800721c:	e042      	b.n	80072a4 <USB_EPStartXfer+0x636>
 800721e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d13a      	bne.n	80072a4 <USB_EPStartXfer+0x636>
 800722e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007232:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007236:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800723a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007246:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007250:	b29b      	uxth	r3, r3
 8007252:	4619      	mov	r1, r3
 8007254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007258:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800725c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007260:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007264:	6812      	ldr	r2, [r2, #0]
 8007266:	440a      	add	r2, r1
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	00da      	lsls	r2, r3, #3
 8007278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4413      	add	r3, r2
 8007284:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007296:	b29a      	uxth	r2, r3
 8007298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	891b      	ldrh	r3, [r3, #8]
 80072b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6959      	ldr	r1, [r3, #20]
 80072c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072ca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072ce:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072d2:	6800      	ldr	r0, [r0, #0]
 80072d4:	f001 fc3d 	bl	8008b52 <USB_WritePMA>
 80072d8:	f000 be0e 	b.w	8007ef8 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	785b      	ldrb	r3, [r3, #1]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d16d      	bne.n	80073c8 <USB_EPStartXfer+0x75a>
 80072ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007306:	b29b      	uxth	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800730c:	4413      	add	r3, r2
 800730e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	00da      	lsls	r2, r3, #3
 800731e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007320:	4413      	add	r3, r2
 8007322:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007326:	647b      	str	r3, [r7, #68]	; 0x44
 8007328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d112      	bne.n	8007356 <USB_EPStartXfer+0x6e8>
 8007330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800733a:	b29a      	uxth	r2, r3
 800733c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800733e:	801a      	strh	r2, [r3, #0]
 8007340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734e:	b29a      	uxth	r2, r3
 8007350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007352:	801a      	strh	r2, [r3, #0]
 8007354:	e063      	b.n	800741e <USB_EPStartXfer+0x7b0>
 8007356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735a:	2b3e      	cmp	r3, #62	; 0x3e
 800735c:	d817      	bhi.n	800738e <USB_EPStartXfer+0x720>
 800735e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007362:	085b      	lsrs	r3, r3, #1
 8007364:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <USB_EPStartXfer+0x710>
 8007374:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007378:	3301      	adds	r3, #1
 800737a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800737e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007382:	b29b      	uxth	r3, r3
 8007384:	029b      	lsls	r3, r3, #10
 8007386:	b29a      	uxth	r2, r3
 8007388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800738a:	801a      	strh	r2, [r3, #0]
 800738c:	e047      	b.n	800741e <USB_EPStartXfer+0x7b0>
 800738e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007392:	095b      	lsrs	r3, r3, #5
 8007394:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739c:	f003 031f 	and.w	r3, r3, #31
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <USB_EPStartXfer+0x740>
 80073a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073a8:	3b01      	subs	r3, #1
 80073aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80073ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	029b      	lsls	r3, r3, #10
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	e02a      	b.n	800741e <USB_EPStartXfer+0x7b0>
 80073c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	785b      	ldrb	r3, [r3, #1]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d122      	bne.n	800741e <USB_EPStartXfer+0x7b0>
 80073d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	653b      	str	r3, [r7, #80]	; 0x50
 80073e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f8:	4413      	add	r3, r2
 80073fa:	653b      	str	r3, [r7, #80]	; 0x50
 80073fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	00da      	lsls	r2, r3, #3
 800740a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800740c:	4413      	add	r3, r2
 800740e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007418:	b29a      	uxth	r2, r3
 800741a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	891b      	ldrh	r3, [r3, #8]
 800742a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800742e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6959      	ldr	r1, [r3, #20]
 800743a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743e:	b29b      	uxth	r3, r3
 8007440:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007444:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007448:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800744c:	6800      	ldr	r0, [r0, #0]
 800744e:	f001 fb80 	bl	8008b52 <USB_WritePMA>
            ep->xfer_buff += len;
 8007452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695a      	ldr	r2, [r3, #20]
 800745e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007462:	441a      	add	r2, r3
 8007464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6a1a      	ldr	r2, [r3, #32]
 800747c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	429a      	cmp	r2, r3
 800748a:	d90f      	bls.n	80074ac <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800748c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6a1a      	ldr	r2, [r3, #32]
 8007498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800749c:	1ad2      	subs	r2, r2, r3
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	621a      	str	r2, [r3, #32]
 80074aa:	e00e      	b.n	80074ca <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80074ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80074bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	643b      	str	r3, [r7, #64]	; 0x40
 80074d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d16d      	bne.n	80075c2 <USB_EPStartXfer+0x954>
 80074e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80074f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007500:	b29b      	uxth	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	4413      	add	r3, r2
 8007508:	63bb      	str	r3, [r7, #56]	; 0x38
 800750a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	00da      	lsls	r2, r3, #3
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	4413      	add	r3, r2
 800751c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
 8007522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d112      	bne.n	8007550 <USB_EPStartXfer+0x8e2>
 800752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007534:	b29a      	uxth	r2, r3
 8007536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007548:	b29a      	uxth	r2, r3
 800754a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	e05d      	b.n	800760c <USB_EPStartXfer+0x99e>
 8007550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007554:	2b3e      	cmp	r3, #62	; 0x3e
 8007556:	d817      	bhi.n	8007588 <USB_EPStartXfer+0x91a>
 8007558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <USB_EPStartXfer+0x90a>
 800756e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007572:	3301      	adds	r3, #1
 8007574:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007578:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800757c:	b29b      	uxth	r3, r3
 800757e:	029b      	lsls	r3, r3, #10
 8007580:	b29a      	uxth	r2, r3
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	e041      	b.n	800760c <USB_EPStartXfer+0x99e>
 8007588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007596:	f003 031f 	and.w	r3, r3, #31
 800759a:	2b00      	cmp	r3, #0
 800759c:	d104      	bne.n	80075a8 <USB_EPStartXfer+0x93a>
 800759e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80075a2:	3b01      	subs	r3, #1
 80075a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80075a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	029b      	lsls	r3, r3, #10
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	e024      	b.n	800760c <USB_EPStartXfer+0x99e>
 80075c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d11c      	bne.n	800760c <USB_EPStartXfer+0x99e>
 80075d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e6:	4413      	add	r3, r2
 80075e8:	643b      	str	r3, [r7, #64]	; 0x40
 80075ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	00da      	lsls	r2, r3, #3
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	4413      	add	r3, r2
 80075fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007606:	b29a      	uxth	r2, r3
 8007608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800760c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	895b      	ldrh	r3, [r3, #10]
 8007618:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800761c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6959      	ldr	r1, [r3, #20]
 8007628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762c:	b29b      	uxth	r3, r3
 800762e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007632:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007636:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800763a:	6800      	ldr	r0, [r0, #0]
 800763c:	f001 fa89 	bl	8008b52 <USB_WritePMA>
 8007640:	f000 bc5a 	b.w	8007ef8 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007658:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	441a      	add	r2, r3
 8007698:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800769c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80076b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076d0:	4413      	add	r3, r2
 80076d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	00da      	lsls	r2, r3, #3
 80076e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076e4:	4413      	add	r3, r2
 80076e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80076ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	891b      	ldrh	r3, [r3, #8]
 8007702:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6959      	ldr	r1, [r3, #20]
 8007712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007716:	b29b      	uxth	r3, r3
 8007718:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800771c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007720:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007724:	6800      	ldr	r0, [r0, #0]
 8007726:	f001 fa14 	bl	8008b52 <USB_WritePMA>
 800772a:	e3e5      	b.n	8007ef8 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800772c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007730:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	441a      	add	r2, r3
 8007770:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800777c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007784:	b29b      	uxth	r3, r3
 8007786:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6a1a      	ldr	r2, [r3, #32]
 8007794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007798:	1ad2      	subs	r2, r2, r3
 800779a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 81bc 	beq.w	8007b46 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d16d      	bne.n	80078c8 <USB_EPStartXfer+0xc5a>
 80077ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80077f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007806:	b29b      	uxth	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800780c:	4413      	add	r3, r2
 800780e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	00da      	lsls	r2, r3, #3
 800781e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007820:	4413      	add	r3, r2
 8007822:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007826:	677b      	str	r3, [r7, #116]	; 0x74
 8007828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d112      	bne.n	8007856 <USB_EPStartXfer+0xbe8>
 8007830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b29b      	uxth	r3, r3
 8007836:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800783a:	b29a      	uxth	r2, r3
 800783c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784e:	b29a      	uxth	r2, r3
 8007850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e060      	b.n	8007918 <USB_EPStartXfer+0xcaa>
 8007856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800785a:	2b3e      	cmp	r3, #62	; 0x3e
 800785c:	d817      	bhi.n	800788e <USB_EPStartXfer+0xc20>
 800785e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007862:	085b      	lsrs	r3, r3, #1
 8007864:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <USB_EPStartXfer+0xc10>
 8007874:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007878:	3301      	adds	r3, #1
 800787a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800787e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007882:	b29b      	uxth	r3, r3
 8007884:	029b      	lsls	r3, r3, #10
 8007886:	b29a      	uxth	r2, r3
 8007888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	e044      	b.n	8007918 <USB_EPStartXfer+0xcaa>
 800788e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <USB_EPStartXfer+0xc40>
 80078a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078a8:	3b01      	subs	r3, #1
 80078aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	029b      	lsls	r3, r3, #10
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c4:	801a      	strh	r2, [r3, #0]
 80078c6:	e027      	b.n	8007918 <USB_EPStartXfer+0xcaa>
 80078c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	785b      	ldrb	r3, [r3, #1]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d11f      	bne.n	8007918 <USB_EPStartXfer+0xcaa>
 80078d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078ee:	4413      	add	r3, r2
 80078f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	00da      	lsls	r2, r3, #3
 8007902:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007906:	4413      	add	r3, r2
 8007908:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800790c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800790e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007912:	b29a      	uxth	r2, r3
 8007914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007916:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	895b      	ldrh	r3, [r3, #10]
 8007924:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6959      	ldr	r1, [r3, #20]
 8007934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007938:	b29b      	uxth	r3, r3
 800793a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800793e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007942:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007946:	6800      	ldr	r0, [r0, #0]
 8007948:	f001 f903 	bl	8008b52 <USB_WritePMA>
          ep->xfer_buff += len;
 800794c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695a      	ldr	r2, [r3, #20]
 8007958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795c:	441a      	add	r2, r3
 800795e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800796a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6a1a      	ldr	r2, [r3, #32]
 8007976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	429a      	cmp	r2, r3
 8007984:	d90f      	bls.n	80079a6 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6a1a      	ldr	r2, [r3, #32]
 8007992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007996:	1ad2      	subs	r2, r2, r3
 8007998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	621a      	str	r2, [r3, #32]
 80079a4:	e00e      	b.n	80079c4 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80079a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80079b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2200      	movs	r2, #0
 80079c2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80079c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8295 	beq.w	8007ef8 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d16d      	bne.n	8007aba <USB_EPStartXfer+0xe4c>
 80079de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80079ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079fe:	4413      	add	r3, r2
 8007a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	00da      	lsls	r2, r3, #3
 8007a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a12:	4413      	add	r3, r2
 8007a14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a18:	667b      	str	r3, [r7, #100]	; 0x64
 8007a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d112      	bne.n	8007a48 <USB_EPStartXfer+0xdda>
 8007a22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a44:	801a      	strh	r2, [r3, #0]
 8007a46:	e063      	b.n	8007b10 <USB_EPStartXfer+0xea2>
 8007a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007a4e:	d817      	bhi.n	8007a80 <USB_EPStartXfer+0xe12>
 8007a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a54:	085b      	lsrs	r3, r3, #1
 8007a56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d004      	beq.n	8007a70 <USB_EPStartXfer+0xe02>
 8007a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	029b      	lsls	r3, r3, #10
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a7c:	801a      	strh	r2, [r3, #0]
 8007a7e:	e047      	b.n	8007b10 <USB_EPStartXfer+0xea2>
 8007a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8e:	f003 031f 	and.w	r3, r3, #31
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d104      	bne.n	8007aa0 <USB_EPStartXfer+0xe32>
 8007a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	029b      	lsls	r3, r3, #10
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab6:	801a      	strh	r2, [r3, #0]
 8007ab8:	e02a      	b.n	8007b10 <USB_EPStartXfer+0xea2>
 8007aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d122      	bne.n	8007b10 <USB_EPStartXfer+0xea2>
 8007aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8007ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aea:	4413      	add	r3, r2
 8007aec:	673b      	str	r3, [r7, #112]	; 0x70
 8007aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	00da      	lsls	r2, r3, #3
 8007afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007afe:	4413      	add	r3, r2
 8007b00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	891b      	ldrh	r3, [r3, #8]
 8007b1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6959      	ldr	r1, [r3, #20]
 8007b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b36:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b3a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b3e:	6800      	ldr	r0, [r0, #0]
 8007b40:	f001 f807 	bl	8008b52 <USB_WritePMA>
 8007b44:	e1d8      	b.n	8007ef8 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d178      	bne.n	8007c48 <USB_EPStartXfer+0xfda>
 8007b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	00da      	lsls	r2, r3, #3
 8007b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b92:	4413      	add	r3, r2
 8007b94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d116      	bne.n	8007bd2 <USB_EPStartXfer+0xf64>
 8007ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bce:	801a      	strh	r2, [r3, #0]
 8007bd0:	e06b      	b.n	8007caa <USB_EPStartXfer+0x103c>
 8007bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8007bd8:	d818      	bhi.n	8007c0c <USB_EPStartXfer+0xf9e>
 8007bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bde:	085b      	lsrs	r3, r3, #1
 8007be0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <USB_EPStartXfer+0xf8c>
 8007bf0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007bfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	029b      	lsls	r3, r3, #10
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c08:	801a      	strh	r2, [r3, #0]
 8007c0a:	e04e      	b.n	8007caa <USB_EPStartXfer+0x103c>
 8007c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1a:	f003 031f 	and.w	r3, r3, #31
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d104      	bne.n	8007c2c <USB_EPStartXfer+0xfbe>
 8007c22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c26:	3b01      	subs	r3, #1
 8007c28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	029b      	lsls	r3, r3, #10
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c44:	801a      	strh	r2, [r3, #0]
 8007c46:	e030      	b.n	8007caa <USB_EPStartXfer+0x103c>
 8007c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d128      	bne.n	8007caa <USB_EPStartXfer+0x103c>
 8007c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	461a      	mov	r2, r3
 8007c78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	00da      	lsls	r2, r3, #3
 8007c90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c94:	4413      	add	r3, r2
 8007c96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ca8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	891b      	ldrh	r3, [r3, #8]
 8007cb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6959      	ldr	r1, [r3, #20]
 8007cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007cd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007cd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007cd8:	6800      	ldr	r0, [r0, #0]
 8007cda:	f000 ff3a 	bl	8008b52 <USB_WritePMA>
          ep->xfer_buff += len;
 8007cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	695a      	ldr	r2, [r3, #20]
 8007cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cee:	441a      	add	r2, r3
 8007cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6a1a      	ldr	r2, [r3, #32]
 8007d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d90f      	bls.n	8007d38 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6a1a      	ldr	r2, [r3, #32]
 8007d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d28:	1ad2      	subs	r2, r2, r3
 8007d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	621a      	str	r2, [r3, #32]
 8007d36:	e00e      	b.n	8007d56 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 80cc 	beq.w	8007ef8 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d178      	bne.n	8007e70 <USB_EPStartXfer+0x1202>
 8007d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007da2:	4413      	add	r3, r2
 8007da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	00da      	lsls	r2, r3, #3
 8007db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dba:	4413      	add	r3, r2
 8007dbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d116      	bne.n	8007dfa <USB_EPStartXfer+0x118c>
 8007dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dde:	801a      	strh	r2, [r3, #0]
 8007de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007df6:	801a      	strh	r2, [r3, #0]
 8007df8:	e064      	b.n	8007ec4 <USB_EPStartXfer+0x1256>
 8007dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8007e00:	d818      	bhi.n	8007e34 <USB_EPStartXfer+0x11c6>
 8007e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d004      	beq.n	8007e22 <USB_EPStartXfer+0x11b4>
 8007e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	029b      	lsls	r3, r3, #10
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	e047      	b.n	8007ec4 <USB_EPStartXfer+0x1256>
 8007e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e42:	f003 031f 	and.w	r3, r3, #31
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d104      	bne.n	8007e54 <USB_EPStartXfer+0x11e6>
 8007e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	029b      	lsls	r3, r3, #10
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e6c:	801a      	strh	r2, [r3, #0]
 8007e6e:	e029      	b.n	8007ec4 <USB_EPStartXfer+0x1256>
 8007e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	785b      	ldrb	r3, [r3, #1]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d121      	bne.n	8007ec4 <USB_EPStartXfer+0x1256>
 8007e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e96:	4413      	add	r3, r2
 8007e98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	00da      	lsls	r2, r3, #3
 8007eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007eae:	4413      	add	r3, r2
 8007eb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007eb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ec2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	895b      	ldrh	r3, [r3, #10]
 8007ed0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6959      	ldr	r1, [r3, #20]
 8007ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007eea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007eee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ef2:	6800      	ldr	r0, [r0, #0]
 8007ef4:	f000 fe2d 	bl	8008b52 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f1a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f26:	8013      	strh	r3, [r2, #0]
 8007f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007f30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f34:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007f38:	8812      	ldrh	r2, [r2, #0]
 8007f3a:	f082 0210 	eor.w	r2, r2, #16
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f44:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007f48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f4c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007f50:	8812      	ldrh	r2, [r2, #0]
 8007f52:	f082 0220 	eor.w	r2, r2, #32
 8007f56:	801a      	strh	r2, [r3, #0]
 8007f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	441a      	add	r2, r3
 8007f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f76:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	8013      	strh	r3, [r2, #0]
 8007f90:	f000 bc9f 	b.w	80088d2 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	7b1b      	ldrb	r3, [r3, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f040 80ae 	bne.w	8008102 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d917      	bls.n	8007ff2 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe2:	1ad2      	subs	r2, r2, r3
 8007fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	619a      	str	r2, [r3, #24]
 8007ff0:	e00e      	b.n	8008010 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2200      	movs	r2, #0
 800800e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800801e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800802c:	b29b      	uxth	r3, r3
 800802e:	461a      	mov	r2, r3
 8008030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008034:	4413      	add	r3, r2
 8008036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800803a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	00da      	lsls	r2, r3, #3
 8008048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800804c:	4413      	add	r3, r2
 800804e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805a:	2b00      	cmp	r3, #0
 800805c:	d116      	bne.n	800808c <USB_EPStartXfer+0x141e>
 800805e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800806a:	b29a      	uxth	r2, r3
 800806c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008070:	801a      	strh	r2, [r3, #0]
 8008072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29b      	uxth	r3, r3
 800807a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800807e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008082:	b29a      	uxth	r2, r3
 8008084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008088:	801a      	strh	r2, [r3, #0]
 800808a:	e3e8      	b.n	800885e <USB_EPStartXfer+0x1bf0>
 800808c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008090:	2b3e      	cmp	r3, #62	; 0x3e
 8008092:	d818      	bhi.n	80080c6 <USB_EPStartXfer+0x1458>
 8008094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008098:	085b      	lsrs	r3, r3, #1
 800809a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800809e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d004      	beq.n	80080b4 <USB_EPStartXfer+0x1446>
 80080aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080ae:	3301      	adds	r3, #1
 80080b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80080b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	029b      	lsls	r3, r3, #10
 80080bc:	b29a      	uxth	r2, r3
 80080be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080c2:	801a      	strh	r2, [r3, #0]
 80080c4:	e3cb      	b.n	800885e <USB_EPStartXfer+0x1bf0>
 80080c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ca:	095b      	lsrs	r3, r3, #5
 80080cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80080d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d104      	bne.n	80080e6 <USB_EPStartXfer+0x1478>
 80080dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080e0:	3b01      	subs	r3, #1
 80080e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80080e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	029b      	lsls	r3, r3, #10
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080fe:	801a      	strh	r2, [r3, #0]
 8008100:	e3ad      	b.n	800885e <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	78db      	ldrb	r3, [r3, #3]
 800810e:	2b02      	cmp	r3, #2
 8008110:	f040 8200 	bne.w	8008514 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b00      	cmp	r3, #0
 8008122:	f040 8091 	bne.w	8008248 <USB_EPStartXfer+0x15da>
 8008126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008138:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008142:	b29b      	uxth	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800814a:	4413      	add	r3, r2
 800814c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	00da      	lsls	r2, r3, #3
 800815e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008162:	4413      	add	r3, r2
 8008164:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800816c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d116      	bne.n	80081aa <USB_EPStartXfer+0x153c>
 800817c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008188:	b29a      	uxth	r2, r3
 800818a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800818e:	801a      	strh	r2, [r3, #0]
 8008190:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800819c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081a6:	801a      	strh	r2, [r3, #0]
 80081a8:	e083      	b.n	80082b2 <USB_EPStartXfer+0x1644>
 80081aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	2b3e      	cmp	r3, #62	; 0x3e
 80081b8:	d820      	bhi.n	80081fc <USB_EPStartXfer+0x158e>
 80081ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	085b      	lsrs	r3, r3, #1
 80081c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d004      	beq.n	80081ea <USB_EPStartXfer+0x157c>
 80081e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e4:	3301      	adds	r3, #1
 80081e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	029b      	lsls	r3, r3, #10
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	e05a      	b.n	80082b2 <USB_EPStartXfer+0x1644>
 80081fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	095b      	lsrs	r3, r3, #5
 800820a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800820e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f003 031f 	and.w	r3, r3, #31
 800821e:	2b00      	cmp	r3, #0
 8008220:	d104      	bne.n	800822c <USB_EPStartXfer+0x15be>
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008226:	3b01      	subs	r3, #1
 8008228:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800822c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008230:	b29b      	uxth	r3, r3
 8008232:	029b      	lsls	r3, r3, #10
 8008234:	b29b      	uxth	r3, r3
 8008236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800823a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800823e:	b29a      	uxth	r2, r3
 8008240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008244:	801a      	strh	r2, [r3, #0]
 8008246:	e034      	b.n	80082b2 <USB_EPStartXfer+0x1644>
 8008248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d12c      	bne.n	80082b2 <USB_EPStartXfer+0x1644>
 8008258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800826a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008274:	b29b      	uxth	r3, r3
 8008276:	461a      	mov	r2, r3
 8008278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800827c:	4413      	add	r3, r2
 800827e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	00da      	lsls	r2, r3, #3
 8008290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008294:	4413      	add	r3, r2
 8008296:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800829a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	785b      	ldrb	r3, [r3, #1]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8091 	bne.w	80083f4 <USB_EPStartXfer+0x1786>
 80082d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	461a      	mov	r2, r3
 80082f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082f6:	4413      	add	r3, r2
 80082f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	00da      	lsls	r2, r3, #3
 800830a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800830e:	4413      	add	r3, r2
 8008310:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d116      	bne.n	8008356 <USB_EPStartXfer+0x16e8>
 8008328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800834c:	b29a      	uxth	r2, r3
 800834e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	e07c      	b.n	8008450 <USB_EPStartXfer+0x17e2>
 8008356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	2b3e      	cmp	r3, #62	; 0x3e
 8008364:	d820      	bhi.n	80083a8 <USB_EPStartXfer+0x173a>
 8008366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800836a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d004      	beq.n	8008396 <USB_EPStartXfer+0x1728>
 800838c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008390:	3301      	adds	r3, #1
 8008392:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008396:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800839a:	b29b      	uxth	r3, r3
 800839c:	029b      	lsls	r3, r3, #10
 800839e:	b29a      	uxth	r2, r3
 80083a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083a4:	801a      	strh	r2, [r3, #0]
 80083a6:	e053      	b.n	8008450 <USB_EPStartXfer+0x17e2>
 80083a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 031f 	and.w	r3, r3, #31
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <USB_EPStartXfer+0x176a>
 80083ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083d2:	3b01      	subs	r3, #1
 80083d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083dc:	b29b      	uxth	r3, r3
 80083de:	029b      	lsls	r3, r3, #10
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083f0:	801a      	strh	r2, [r3, #0]
 80083f2:	e02d      	b.n	8008450 <USB_EPStartXfer+0x17e2>
 80083f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	785b      	ldrb	r3, [r3, #1]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d125      	bne.n	8008450 <USB_EPStartXfer+0x17e2>
 8008404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008412:	b29b      	uxth	r3, r3
 8008414:	461a      	mov	r2, r3
 8008416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800841a:	4413      	add	r3, r2
 800841c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	00da      	lsls	r2, r3, #3
 800842e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008432:	4413      	add	r3, r2
 8008434:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008438:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800843c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	b29a      	uxth	r2, r3
 800844a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800844e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 81fe 	beq.w	800885e <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008466:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008482:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d005      	beq.n	800849a <USB_EPStartXfer+0x182c>
 800848e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10d      	bne.n	80084b6 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800849a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800849e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f040 81db 	bne.w	800885e <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f040 81d4 	bne.w	800885e <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80084b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084dc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80084e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	441a      	add	r2, r3
 80084fa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80084fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800850a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800850e:	b29b      	uxth	r3, r3
 8008510:	8013      	strh	r3, [r2, #0]
 8008512:	e1a4      	b.n	800885e <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	78db      	ldrb	r3, [r3, #3]
 8008520:	2b01      	cmp	r3, #1
 8008522:	f040 819a 	bne.w	800885a <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	699a      	ldr	r2, [r3, #24]
 8008532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	429a      	cmp	r2, r3
 8008540:	d917      	bls.n	8008572 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699a      	ldr	r2, [r3, #24]
 800855e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008562:	1ad2      	subs	r2, r2, r3
 8008564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	619a      	str	r2, [r3, #24]
 8008570:	e00e      	b.n	8008590 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2200      	movs	r2, #0
 800858e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d178      	bne.n	8008692 <USB_EPStartXfer+0x1a24>
 80085a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80085ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085bc:	b29b      	uxth	r3, r3
 80085be:	461a      	mov	r2, r3
 80085c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085c4:	4413      	add	r3, r2
 80085c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80085ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	00da      	lsls	r2, r3, #3
 80085d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085dc:	4413      	add	r3, r2
 80085de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d116      	bne.n	800861c <USB_EPStartXfer+0x19ae>
 80085ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	b29b      	uxth	r3, r3
 800860a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800860e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008612:	b29a      	uxth	r2, r3
 8008614:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008618:	801a      	strh	r2, [r3, #0]
 800861a:	e06b      	b.n	80086f4 <USB_EPStartXfer+0x1a86>
 800861c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008620:	2b3e      	cmp	r3, #62	; 0x3e
 8008622:	d818      	bhi.n	8008656 <USB_EPStartXfer+0x19e8>
 8008624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008628:	085b      	lsrs	r3, r3, #1
 800862a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800862e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <USB_EPStartXfer+0x19d6>
 800863a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800863e:	3301      	adds	r3, #1
 8008640:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008648:	b29b      	uxth	r3, r3
 800864a:	029b      	lsls	r3, r3, #10
 800864c:	b29a      	uxth	r2, r3
 800864e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008652:	801a      	strh	r2, [r3, #0]
 8008654:	e04e      	b.n	80086f4 <USB_EPStartXfer+0x1a86>
 8008656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008664:	f003 031f 	and.w	r3, r3, #31
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <USB_EPStartXfer+0x1a08>
 800866c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008670:	3b01      	subs	r3, #1
 8008672:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800867a:	b29b      	uxth	r3, r3
 800867c:	029b      	lsls	r3, r3, #10
 800867e:	b29b      	uxth	r3, r3
 8008680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008688:	b29a      	uxth	r2, r3
 800868a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800868e:	801a      	strh	r2, [r3, #0]
 8008690:	e030      	b.n	80086f4 <USB_EPStartXfer+0x1a86>
 8008692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	785b      	ldrb	r3, [r3, #1]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d128      	bne.n	80086f4 <USB_EPStartXfer+0x1a86>
 80086a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086be:	b29b      	uxth	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c6:	4413      	add	r3, r2
 80086c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	00da      	lsls	r2, r3, #3
 80086da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086de:	4413      	add	r3, r2
 80086e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d178      	bne.n	8008804 <USB_EPStartXfer+0x1b96>
 8008712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008716:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800872e:	b29b      	uxth	r3, r3
 8008730:	461a      	mov	r2, r3
 8008732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008736:	4413      	add	r3, r2
 8008738:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800873c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	00da      	lsls	r2, r3, #3
 800874a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800874e:	4413      	add	r3, r2
 8008750:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d116      	bne.n	800878e <USB_EPStartXfer+0x1b20>
 8008760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800876c:	b29a      	uxth	r2, r3
 800876e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008772:	801a      	strh	r2, [r3, #0]
 8008774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	b29b      	uxth	r3, r3
 800877c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008784:	b29a      	uxth	r2, r3
 8008786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800878a:	801a      	strh	r2, [r3, #0]
 800878c:	e067      	b.n	800885e <USB_EPStartXfer+0x1bf0>
 800878e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008792:	2b3e      	cmp	r3, #62	; 0x3e
 8008794:	d818      	bhi.n	80087c8 <USB_EPStartXfer+0x1b5a>
 8008796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800879a:	085b      	lsrs	r3, r3, #1
 800879c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <USB_EPStartXfer+0x1b48>
 80087ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087b0:	3301      	adds	r3, #1
 80087b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	029b      	lsls	r3, r3, #10
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087c4:	801a      	strh	r2, [r3, #0]
 80087c6:	e04a      	b.n	800885e <USB_EPStartXfer+0x1bf0>
 80087c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087cc:	095b      	lsrs	r3, r3, #5
 80087ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d6:	f003 031f 	and.w	r3, r3, #31
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d104      	bne.n	80087e8 <USB_EPStartXfer+0x1b7a>
 80087de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087e2:	3b01      	subs	r3, #1
 80087e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	029b      	lsls	r3, r3, #10
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008800:	801a      	strh	r2, [r3, #0]
 8008802:	e02c      	b.n	800885e <USB_EPStartXfer+0x1bf0>
 8008804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	785b      	ldrb	r3, [r3, #1]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d124      	bne.n	800885e <USB_EPStartXfer+0x1bf0>
 8008814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008818:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008822:	b29b      	uxth	r3, r3
 8008824:	461a      	mov	r2, r3
 8008826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882a:	4413      	add	r3, r2
 800882c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	00da      	lsls	r2, r3, #3
 800883e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008842:	4413      	add	r3, r2
 8008844:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800884c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008850:	b29a      	uxth	r2, r3
 8008852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008856:	801a      	strh	r2, [r3, #0]
 8008858:	e001      	b.n	800885e <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e03a      	b.n	80088d4 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800885e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008884:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008888:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800888c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008890:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008894:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008898:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800889c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80088a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	441a      	add	r2, r3
 80088ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80088be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088de:	b480      	push	{r7}
 80088e0:	b085      	sub	sp, #20
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	785b      	ldrb	r3, [r3, #1]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d020      	beq.n	8008932 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008906:	81bb      	strh	r3, [r7, #12]
 8008908:	89bb      	ldrh	r3, [r7, #12]
 800890a:	f083 0310 	eor.w	r3, r3, #16
 800890e:	81bb      	strh	r3, [r7, #12]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	441a      	add	r2, r3
 800891a:	89bb      	ldrh	r3, [r7, #12]
 800891c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892c:	b29b      	uxth	r3, r3
 800892e:	8013      	strh	r3, [r2, #0]
 8008930:	e01f      	b.n	8008972 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008948:	81fb      	strh	r3, [r7, #14]
 800894a:	89fb      	ldrh	r3, [r7, #14]
 800894c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008950:	81fb      	strh	r3, [r7, #14]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	441a      	add	r2, r3
 800895c:	89fb      	ldrh	r3, [r7, #14]
 800895e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800896a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896e:	b29b      	uxth	r3, r3
 8008970:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	7b1b      	ldrb	r3, [r3, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f040 809d 	bne.w	8008ace <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	785b      	ldrb	r3, [r3, #1]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d04c      	beq.n	8008a36 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	823b      	strh	r3, [r7, #16]
 80089aa:	8a3b      	ldrh	r3, [r7, #16]
 80089ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d01b      	beq.n	80089ec <USB_EPClearStall+0x6c>
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ca:	81fb      	strh	r3, [r7, #14]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	441a      	add	r2, r3
 80089d6:	89fb      	ldrh	r3, [r7, #14]
 80089d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	78db      	ldrb	r3, [r3, #3]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d06c      	beq.n	8008ace <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a0a:	81bb      	strh	r3, [r7, #12]
 8008a0c:	89bb      	ldrh	r3, [r7, #12]
 8008a0e:	f083 0320 	eor.w	r3, r3, #32
 8008a12:	81bb      	strh	r3, [r7, #12]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	441a      	add	r2, r3
 8008a1e:	89bb      	ldrh	r3, [r7, #12]
 8008a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	8013      	strh	r3, [r2, #0]
 8008a34:	e04b      	b.n	8008ace <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	82fb      	strh	r3, [r7, #22]
 8008a44:	8afb      	ldrh	r3, [r7, #22]
 8008a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d01b      	beq.n	8008a86 <USB_EPClearStall+0x106>
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a64:	82bb      	strh	r3, [r7, #20]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	441a      	add	r2, r3
 8008a70:	8abb      	ldrh	r3, [r7, #20]
 8008a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9c:	827b      	strh	r3, [r7, #18]
 8008a9e:	8a7b      	ldrh	r3, [r7, #18]
 8008aa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008aa4:	827b      	strh	r3, [r7, #18]
 8008aa6:	8a7b      	ldrh	r3, [r7, #18]
 8008aa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008aac:	827b      	strh	r3, [r7, #18]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	441a      	add	r2, r3
 8008ab8:	8a7b      	ldrh	r3, [r7, #18]
 8008aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	371c      	adds	r7, #28
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d103      	bne.n	8008af6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2280      	movs	r2, #128	; 0x80
 8008af2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b44:	68fb      	ldr	r3, [r7, #12]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b08d      	sub	sp, #52	; 0x34
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	60b9      	str	r1, [r7, #8]
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	461a      	mov	r2, r3
 8008b60:	460b      	mov	r3, r1
 8008b62:	80fb      	strh	r3, [r7, #6]
 8008b64:	4613      	mov	r3, r2
 8008b66:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b68:	88bb      	ldrh	r3, [r7, #4]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	085b      	lsrs	r3, r3, #1
 8008b6e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b78:	88fa      	ldrh	r2, [r7, #6]
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b82:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b88:	e01b      	b.n	8008bc2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	3301      	adds	r3, #1
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	3302      	adds	r3, #2
 8008bb4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	3301      	adds	r3, #1
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e0      	bne.n	8008b8a <USB_WritePMA+0x38>
  }
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	3734      	adds	r7, #52	; 0x34
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b08b      	sub	sp, #44	; 0x2c
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	60f8      	str	r0, [r7, #12]
 8008bde:	60b9      	str	r1, [r7, #8]
 8008be0:	4611      	mov	r1, r2
 8008be2:	461a      	mov	r2, r3
 8008be4:	460b      	mov	r3, r1
 8008be6:	80fb      	strh	r3, [r7, #6]
 8008be8:	4613      	mov	r3, r2
 8008bea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008bec:	88bb      	ldrh	r3, [r7, #4]
 8008bee:	085b      	lsrs	r3, r3, #1
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bfc:	88fa      	ldrh	r2, [r7, #6]
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c06:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c0c:	e018      	b.n	8008c40 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	3302      	adds	r3, #2
 8008c1a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	3301      	adds	r3, #1
 8008c28:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	0a1b      	lsrs	r3, r3, #8
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	3301      	adds	r3, #1
 8008c38:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e3      	bne.n	8008c0e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008c46:	88bb      	ldrh	r3, [r7, #4]
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d007      	beq.n	8008c62 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	701a      	strb	r2, [r3, #0]
  }
}
 8008c62:	bf00      	nop
 8008c64:	372c      	adds	r7, #44	; 0x2c
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c7a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c7e:	f002 f8eb 	bl	800ae58 <USBD_static_malloc>
 8008c82:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008c92:	2302      	movs	r3, #2
 8008c94:	e066      	b.n	8008d64 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	7c1b      	ldrb	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d119      	bne.n	8008cda <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008caa:	2202      	movs	r2, #2
 8008cac:	2181      	movs	r1, #129	; 0x81
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f001 ff77 	bl	800aba2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 ff6d 	bl	800aba2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2210      	movs	r2, #16
 8008cd4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008cd8:	e016      	b.n	8008d08 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cda:	2340      	movs	r3, #64	; 0x40
 8008cdc:	2202      	movs	r2, #2
 8008cde:	2181      	movs	r1, #129	; 0x81
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 ff5e 	bl	800aba2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cec:	2340      	movs	r3, #64	; 0x40
 8008cee:	2202      	movs	r2, #2
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 ff55 	bl	800aba2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2210      	movs	r2, #16
 8008d04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d08:	2308      	movs	r3, #8
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	2182      	movs	r1, #130	; 0x82
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 ff47 	bl	800aba2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	7c1b      	ldrb	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d48:	2101      	movs	r1, #1
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f002 f819 	bl	800ad82 <USBD_LL_PrepareReceive>
 8008d50:	e007      	b.n	8008d62 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d58:	2340      	movs	r3, #64	; 0x40
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f002 f810 	bl	800ad82 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d78:	2181      	movs	r1, #129	; 0x81
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 ff37 	bl	800abee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d86:	2101      	movs	r1, #1
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 ff30 	bl	800abee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d96:	2182      	movs	r1, #130	; 0x82
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 ff28 	bl	800abee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00e      	beq.n	8008dd6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f002 f853 	bl	800ae74 <USBD_static_free>
    pdev->pClassData = NULL;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008df0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e0af      	b.n	8008f68 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d03f      	beq.n	8008e94 <USBD_CDC_Setup+0xb4>
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	f040 809f 	bne.w	8008f58 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	88db      	ldrh	r3, [r3, #6]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d02e      	beq.n	8008e80 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	b25b      	sxtb	r3, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	da16      	bge.n	8008e5a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008e38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	88d2      	ldrh	r2, [r2, #6]
 8008e3e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	88db      	ldrh	r3, [r3, #6]
 8008e44:	2b07      	cmp	r3, #7
 8008e46:	bf28      	it	cs
 8008e48:	2307      	movcs	r3, #7
 8008e4a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	89fa      	ldrh	r2, [r7, #14]
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 facf 	bl	800a3f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008e58:	e085      	b.n	8008f66 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	785a      	ldrb	r2, [r3, #1]
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	88db      	ldrh	r3, [r3, #6]
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008e70:	6939      	ldr	r1, [r7, #16]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	88db      	ldrh	r3, [r3, #6]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 fae8 	bl	800a44e <USBD_CtlPrepareRx>
      break;
 8008e7e:	e072      	b.n	8008f66 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	7850      	ldrb	r0, [r2, #1]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	4798      	blx	r3
      break;
 8008e92:	e068      	b.n	8008f66 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	785b      	ldrb	r3, [r3, #1]
 8008e98:	2b0b      	cmp	r3, #11
 8008e9a:	d852      	bhi.n	8008f42 <USBD_CDC_Setup+0x162>
 8008e9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <USBD_CDC_Setup+0xc4>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008ed5 	.word	0x08008ed5
 8008ea8:	08008f51 	.word	0x08008f51
 8008eac:	08008f43 	.word	0x08008f43
 8008eb0:	08008f43 	.word	0x08008f43
 8008eb4:	08008f43 	.word	0x08008f43
 8008eb8:	08008f43 	.word	0x08008f43
 8008ebc:	08008f43 	.word	0x08008f43
 8008ec0:	08008f43 	.word	0x08008f43
 8008ec4:	08008f43 	.word	0x08008f43
 8008ec8:	08008f43 	.word	0x08008f43
 8008ecc:	08008eff 	.word	0x08008eff
 8008ed0:	08008f29 	.word	0x08008f29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d107      	bne.n	8008ef0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ee0:	f107 030a 	add.w	r3, r7, #10
 8008ee4:	2202      	movs	r2, #2
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f001 fa84 	bl	800a3f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eee:	e032      	b.n	8008f56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f001 fa0e 	bl	800a314 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	75fb      	strb	r3, [r7, #23]
          break;
 8008efc:	e02b      	b.n	8008f56 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d107      	bne.n	8008f1a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f0a:	f107 030d 	add.w	r3, r7, #13
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 fa6f 	bl	800a3f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f18:	e01d      	b.n	8008f56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f9f9 	bl	800a314 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f22:	2303      	movs	r3, #3
 8008f24:	75fb      	strb	r3, [r7, #23]
          break;
 8008f26:	e016      	b.n	8008f56 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d00f      	beq.n	8008f54 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 f9ec 	bl	800a314 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f40:	e008      	b.n	8008f54 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 f9e5 	bl	800a314 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f4e:	e002      	b.n	8008f56 <USBD_CDC_Setup+0x176>
          break;
 8008f50:	bf00      	nop
 8008f52:	e008      	b.n	8008f66 <USBD_CDC_Setup+0x186>
          break;
 8008f54:	bf00      	nop
      }
      break;
 8008f56:	e006      	b.n	8008f66 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f001 f9da 	bl	800a314 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f60:	2303      	movs	r3, #3
 8008f62:	75fb      	strb	r3, [r7, #23]
      break;
 8008f64:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e04f      	b.n	8009032 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	3318      	adds	r3, #24
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d029      	beq.n	8009004 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008fb0:	78fa      	ldrb	r2, [r7, #3]
 8008fb2:	6879      	ldr	r1, [r7, #4]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	440b      	add	r3, r1
 8008fbe:	3318      	adds	r3, #24
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	78f9      	ldrb	r1, [r7, #3]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	440b      	add	r3, r1
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	4403      	add	r3, r0
 8008fd0:	3338      	adds	r3, #56	; 0x38
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fd8:	fb01 f303 	mul.w	r3, r1, r3
 8008fdc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d110      	bne.n	8009004 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008fe2:	78fa      	ldrb	r2, [r7, #3]
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	440b      	add	r3, r1
 8008ff0:	3318      	adds	r3, #24
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ff6:	78f9      	ldrb	r1, [r7, #3]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 fe9f 	bl	800ad40 <USBD_LL_Transmit>
 8009002:	e015      	b.n	8009030 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2200      	movs	r2, #0
 8009008:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800902c:	78fa      	ldrb	r2, [r7, #3]
 800902e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	460b      	mov	r3, r1
 8009044:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800904c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009058:	2303      	movs	r3, #3
 800905a:	e015      	b.n	8009088 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 feaf 	bl	800adc4 <USBD_LL_GetRxDataSize>
 8009066:	4602      	mov	r2, r0
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009082:	4611      	mov	r1, r2
 8009084:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800909e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e01b      	b.n	80090e2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d015      	beq.n	80090e0 <USBD_CDC_EP0_RxReady+0x50>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80090ba:	2bff      	cmp	r3, #255	; 0xff
 80090bc:	d010      	beq.n	80090e0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80090cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80090d4:	b292      	uxth	r2, r2
 80090d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	22ff      	movs	r2, #255	; 0xff
 80090dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2243      	movs	r2, #67	; 0x43
 80090f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80090fa:	4b03      	ldr	r3, [pc, #12]	; (8009108 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	200000bc 	.word	0x200000bc

0800910c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2243      	movs	r2, #67	; 0x43
 8009118:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800911a:	4b03      	ldr	r3, [pc, #12]	; (8009128 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	20000078 	.word	0x20000078

0800912c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2243      	movs	r2, #67	; 0x43
 8009138:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800913a:	4b03      	ldr	r3, [pc, #12]	; (8009148 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	20000100 	.word	0x20000100

0800914c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	220a      	movs	r2, #10
 8009158:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800915a:	4b03      	ldr	r3, [pc, #12]	; (8009168 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800915c:	4618      	mov	r0, r3
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	20000034 	.word	0x20000034

0800916c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800917c:	2303      	movs	r3, #3
 800917e:	e004      	b.n	800918a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009196:	b480      	push	{r7}
 8009198:	b087      	sub	sp, #28
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091a8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e008      	b.n	80091c6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b085      	sub	sp, #20
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e004      	b.n	80091f8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009212:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009214:	2301      	movs	r3, #1
 8009216:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009222:	2303      	movs	r3, #3
 8009224:	e01a      	b.n	800925c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800922c:	2b00      	cmp	r3, #0
 800922e:	d114      	bne.n	800925a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2201      	movs	r2, #1
 8009234:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800924e:	2181      	movs	r1, #129	; 0x81
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f001 fd75 	bl	800ad40 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800925a:	7bfb      	ldrb	r3, [r7, #15]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009272:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800927e:	2303      	movs	r3, #3
 8009280:	e016      	b.n	80092b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	7c1b      	ldrb	r3, [r3, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d109      	bne.n	800929e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009294:	2101      	movs	r1, #1
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 fd73 	bl	800ad82 <USBD_LL_PrepareReceive>
 800929c:	e007      	b.n	80092ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092a4:	2340      	movs	r3, #64	; 0x40
 80092a6:	2101      	movs	r1, #1
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 fd6a 	bl	800ad82 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e01f      	b.n	8009310 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	79fa      	ldrb	r2, [r7, #7]
 8009302:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f001 fbd1 	bl	800aaac <USBD_LL_Init>
 800930a:	4603      	mov	r3, r0
 800930c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800930e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800932c:	2303      	movs	r3, #3
 800932e:	e016      	b.n	800935e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00b      	beq.n	800935c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934c:	f107 020e 	add.w	r2, r7, #14
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
 8009354:	4602      	mov	r2, r0
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f001 fbfc 	bl	800ab6c <USBD_LL_Start>
 8009374:	4603      	mov	r3, r0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80093a0:	2303      	movs	r3, #3
 80093a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	78fa      	ldrb	r2, [r7, #3]
 80093b8:	4611      	mov	r1, r2
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	4798      	blx	r3
 80093be:	4603      	mov	r3, r0
 80093c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d007      	beq.n	80093f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	78fa      	ldrb	r2, [r7, #3]
 80093ec:	4611      	mov	r1, r2
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	4798      	blx	r3
  }

  return USBD_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 ff46 	bl	800a2a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009422:	461a      	mov	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009430:	f003 031f 	and.w	r3, r3, #31
 8009434:	2b02      	cmp	r3, #2
 8009436:	d01a      	beq.n	800946e <USBD_LL_SetupStage+0x72>
 8009438:	2b02      	cmp	r3, #2
 800943a:	d822      	bhi.n	8009482 <USBD_LL_SetupStage+0x86>
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <USBD_LL_SetupStage+0x4a>
 8009440:	2b01      	cmp	r3, #1
 8009442:	d00a      	beq.n	800945a <USBD_LL_SetupStage+0x5e>
 8009444:	e01d      	b.n	8009482 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f9ee 	bl	8009830 <USBD_StdDevReq>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]
      break;
 8009458:	e020      	b.n	800949c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009460:	4619      	mov	r1, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fa52 	bl	800990c <USBD_StdItfReq>
 8009468:	4603      	mov	r3, r0
 800946a:	73fb      	strb	r3, [r7, #15]
      break;
 800946c:	e016      	b.n	800949c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fa91 	bl	800999e <USBD_StdEPReq>
 800947c:	4603      	mov	r3, r0
 800947e:	73fb      	strb	r3, [r7, #15]
      break;
 8009480:	e00c      	b.n	800949c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009488:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800948c:	b2db      	uxtb	r3, r3
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f001 fbcb 	bl	800ac2c <USBD_LL_StallEP>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]
      break;
 800949a:	bf00      	nop
  }

  return ret;
 800949c:	7bfb      	ldrb	r3, [r7, #15]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b086      	sub	sp, #24
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	460b      	mov	r3, r1
 80094b0:	607a      	str	r2, [r7, #4]
 80094b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80094b4:	7afb      	ldrb	r3, [r7, #11]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d138      	bne.n	800952c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80094c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d14a      	bne.n	8009562 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d913      	bls.n	8009500 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	689a      	ldr	r2, [r3, #8]
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	1ad2      	subs	r2, r2, r3
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	4293      	cmp	r3, r2
 80094f0:	bf28      	it	cs
 80094f2:	4613      	movcs	r3, r2
 80094f4:	461a      	mov	r2, r3
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 ffc5 	bl	800a488 <USBD_CtlContinueRx>
 80094fe:	e030      	b.n	8009562 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b03      	cmp	r3, #3
 800950a:	d10b      	bne.n	8009524 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d005      	beq.n	8009524 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 ffc0 	bl	800a4aa <USBD_CtlSendStatus>
 800952a:	e01a      	b.n	8009562 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b03      	cmp	r3, #3
 8009536:	d114      	bne.n	8009562 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00e      	beq.n	8009562 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	7afa      	ldrb	r2, [r7, #11]
 800954e:	4611      	mov	r1, r2
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	4798      	blx	r3
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	e000      	b.n	8009564 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	460b      	mov	r3, r1
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d16b      	bne.n	8009658 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3314      	adds	r3, #20
 8009584:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800958c:	2b02      	cmp	r3, #2
 800958e:	d156      	bne.n	800963e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	429a      	cmp	r2, r3
 800959a:	d914      	bls.n	80095c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	1ad2      	subs	r2, r2, r3
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	461a      	mov	r2, r3
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 ff3a 	bl	800a42c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095b8:	2300      	movs	r3, #0
 80095ba:	2200      	movs	r2, #0
 80095bc:	2100      	movs	r1, #0
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f001 fbdf 	bl	800ad82 <USBD_LL_PrepareReceive>
 80095c4:	e03b      	b.n	800963e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	68da      	ldr	r2, [r3, #12]
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d11c      	bne.n	800960c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80095da:	429a      	cmp	r2, r3
 80095dc:	d316      	bcc.n	800960c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d20f      	bcs.n	800960c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095ec:	2200      	movs	r2, #0
 80095ee:	2100      	movs	r1, #0
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 ff1b 	bl	800a42c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095fe:	2300      	movs	r3, #0
 8009600:	2200      	movs	r2, #0
 8009602:	2100      	movs	r1, #0
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f001 fbbc 	bl	800ad82 <USBD_LL_PrepareReceive>
 800960a:	e018      	b.n	800963e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b03      	cmp	r3, #3
 8009616:	d10b      	bne.n	8009630 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d005      	beq.n	8009630 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009630:	2180      	movs	r1, #128	; 0x80
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f001 fafa 	bl	800ac2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 ff49 	bl	800a4d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009644:	2b01      	cmp	r3, #1
 8009646:	d122      	bne.n	800968e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff fe98 	bl	800937e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009656:	e01a      	b.n	800968e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b03      	cmp	r3, #3
 8009662:	d114      	bne.n	800968e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00e      	beq.n	800968e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	7afa      	ldrb	r2, [r7, #11]
 800967a:	4611      	mov	r1, r2
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	4798      	blx	r3
 8009680:	4603      	mov	r3, r0
 8009682:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009684:	7dfb      	ldrb	r3, [r7, #23]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	e000      	b.n	8009690 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e02f      	b.n	800972c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00f      	beq.n	80096f6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d009      	beq.n	80096f6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	6852      	ldr	r2, [r2, #4]
 80096ee:	b2d2      	uxtb	r2, r2
 80096f0:	4611      	mov	r1, r2
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096f6:	2340      	movs	r3, #64	; 0x40
 80096f8:	2200      	movs	r2, #0
 80096fa:	2100      	movs	r1, #0
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 fa50 	bl	800aba2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2240      	movs	r2, #64	; 0x40
 800970e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009712:	2340      	movs	r3, #64	; 0x40
 8009714:	2200      	movs	r2, #0
 8009716:	2180      	movs	r1, #128	; 0x80
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 fa42 	bl	800aba2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2240      	movs	r2, #64	; 0x40
 8009728:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009762:	b2da      	uxtb	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2204      	movs	r2, #4
 800976e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b04      	cmp	r3, #4
 8009792:	d106      	bne.n	80097a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800979a:	b2da      	uxtb	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e012      	b.n	80097ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d10b      	bne.n	80097ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d005      	beq.n	80097ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	3301      	adds	r3, #1
 800980a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009812:	8a3b      	ldrh	r3, [r7, #16]
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	b21a      	sxth	r2, r3
 8009818:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800981c:	4313      	orrs	r3, r2
 800981e:	b21b      	sxth	r3, r3
 8009820:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009822:	89fb      	ldrh	r3, [r7, #14]
}
 8009824:	4618      	mov	r0, r3
 8009826:	371c      	adds	r7, #28
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009846:	2b40      	cmp	r3, #64	; 0x40
 8009848:	d005      	beq.n	8009856 <USBD_StdDevReq+0x26>
 800984a:	2b40      	cmp	r3, #64	; 0x40
 800984c:	d853      	bhi.n	80098f6 <USBD_StdDevReq+0xc6>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00b      	beq.n	800986a <USBD_StdDevReq+0x3a>
 8009852:	2b20      	cmp	r3, #32
 8009854:	d14f      	bne.n	80098f6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	4798      	blx	r3
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]
      break;
 8009868:	e04a      	b.n	8009900 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	2b09      	cmp	r3, #9
 8009870:	d83b      	bhi.n	80098ea <USBD_StdDevReq+0xba>
 8009872:	a201      	add	r2, pc, #4	; (adr r2, 8009878 <USBD_StdDevReq+0x48>)
 8009874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009878:	080098cd 	.word	0x080098cd
 800987c:	080098e1 	.word	0x080098e1
 8009880:	080098eb 	.word	0x080098eb
 8009884:	080098d7 	.word	0x080098d7
 8009888:	080098eb 	.word	0x080098eb
 800988c:	080098ab 	.word	0x080098ab
 8009890:	080098a1 	.word	0x080098a1
 8009894:	080098eb 	.word	0x080098eb
 8009898:	080098c3 	.word	0x080098c3
 800989c:	080098b5 	.word	0x080098b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f9de 	bl	8009c64 <USBD_GetDescriptor>
          break;
 80098a8:	e024      	b.n	80098f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fb6d 	bl	8009f8c <USBD_SetAddress>
          break;
 80098b2:	e01f      	b.n	80098f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fbac 	bl	800a014 <USBD_SetConfig>
 80098bc:	4603      	mov	r3, r0
 80098be:	73fb      	strb	r3, [r7, #15]
          break;
 80098c0:	e018      	b.n	80098f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fc4b 	bl	800a160 <USBD_GetConfig>
          break;
 80098ca:	e013      	b.n	80098f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fc7c 	bl	800a1cc <USBD_GetStatus>
          break;
 80098d4:	e00e      	b.n	80098f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fcab 	bl	800a234 <USBD_SetFeature>
          break;
 80098de:	e009      	b.n	80098f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fcba 	bl	800a25c <USBD_ClrFeature>
          break;
 80098e8:	e004      	b.n	80098f4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fd11 	bl	800a314 <USBD_CtlError>
          break;
 80098f2:	bf00      	nop
      }
      break;
 80098f4:	e004      	b.n	8009900 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fd0b 	bl	800a314 <USBD_CtlError>
      break;
 80098fe:	bf00      	nop
  }

  return ret;
 8009900:	7bfb      	ldrb	r3, [r7, #15]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop

0800990c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009922:	2b40      	cmp	r3, #64	; 0x40
 8009924:	d005      	beq.n	8009932 <USBD_StdItfReq+0x26>
 8009926:	2b40      	cmp	r3, #64	; 0x40
 8009928:	d82f      	bhi.n	800998a <USBD_StdItfReq+0x7e>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <USBD_StdItfReq+0x26>
 800992e:	2b20      	cmp	r3, #32
 8009930:	d12b      	bne.n	800998a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009938:	b2db      	uxtb	r3, r3
 800993a:	3b01      	subs	r3, #1
 800993c:	2b02      	cmp	r3, #2
 800993e:	d81d      	bhi.n	800997c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	889b      	ldrh	r3, [r3, #4]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b01      	cmp	r3, #1
 8009948:	d813      	bhi.n	8009972 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	4798      	blx	r3
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	88db      	ldrh	r3, [r3, #6]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d110      	bne.n	8009986 <USBD_StdItfReq+0x7a>
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10d      	bne.n	8009986 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fd9d 	bl	800a4aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009970:	e009      	b.n	8009986 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fccd 	bl	800a314 <USBD_CtlError>
          break;
 800997a:	e004      	b.n	8009986 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fcc8 	bl	800a314 <USBD_CtlError>
          break;
 8009984:	e000      	b.n	8009988 <USBD_StdItfReq+0x7c>
          break;
 8009986:	bf00      	nop
      }
      break;
 8009988:	e004      	b.n	8009994 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fcc1 	bl	800a314 <USBD_CtlError>
      break;
 8009992:	bf00      	nop
  }

  return ret;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	889b      	ldrh	r3, [r3, #4]
 80099b0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099ba:	2b40      	cmp	r3, #64	; 0x40
 80099bc:	d007      	beq.n	80099ce <USBD_StdEPReq+0x30>
 80099be:	2b40      	cmp	r3, #64	; 0x40
 80099c0:	f200 8145 	bhi.w	8009c4e <USBD_StdEPReq+0x2b0>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00c      	beq.n	80099e2 <USBD_StdEPReq+0x44>
 80099c8:	2b20      	cmp	r3, #32
 80099ca:	f040 8140 	bne.w	8009c4e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	4798      	blx	r3
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
      break;
 80099e0:	e13a      	b.n	8009c58 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	785b      	ldrb	r3, [r3, #1]
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d007      	beq.n	80099fa <USBD_StdEPReq+0x5c>
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	f300 8129 	bgt.w	8009c42 <USBD_StdEPReq+0x2a4>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d07f      	beq.n	8009af4 <USBD_StdEPReq+0x156>
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d03c      	beq.n	8009a72 <USBD_StdEPReq+0xd4>
 80099f8:	e123      	b.n	8009c42 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d002      	beq.n	8009a0c <USBD_StdEPReq+0x6e>
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d016      	beq.n	8009a38 <USBD_StdEPReq+0x9a>
 8009a0a:	e02c      	b.n	8009a66 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00d      	beq.n	8009a2e <USBD_StdEPReq+0x90>
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	2b80      	cmp	r3, #128	; 0x80
 8009a16:	d00a      	beq.n	8009a2e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f001 f905 	bl	800ac2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a22:	2180      	movs	r1, #128	; 0x80
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f001 f901 	bl	800ac2c <USBD_LL_StallEP>
 8009a2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a2c:	e020      	b.n	8009a70 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fc6f 	bl	800a314 <USBD_CtlError>
              break;
 8009a36:	e01b      	b.n	8009a70 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	885b      	ldrh	r3, [r3, #2]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10e      	bne.n	8009a5e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00b      	beq.n	8009a5e <USBD_StdEPReq+0xc0>
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	2b80      	cmp	r3, #128	; 0x80
 8009a4a:	d008      	beq.n	8009a5e <USBD_StdEPReq+0xc0>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	88db      	ldrh	r3, [r3, #6]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f001 f8e7 	bl	800ac2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fd23 	bl	800a4aa <USBD_CtlSendStatus>

              break;
 8009a64:	e004      	b.n	8009a70 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fc53 	bl	800a314 <USBD_CtlError>
              break;
 8009a6e:	bf00      	nop
          }
          break;
 8009a70:	e0ec      	b.n	8009c4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d002      	beq.n	8009a84 <USBD_StdEPReq+0xe6>
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d016      	beq.n	8009ab0 <USBD_StdEPReq+0x112>
 8009a82:	e030      	b.n	8009ae6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00d      	beq.n	8009aa6 <USBD_StdEPReq+0x108>
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
 8009a8c:	2b80      	cmp	r3, #128	; 0x80
 8009a8e:	d00a      	beq.n	8009aa6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f001 f8c9 	bl	800ac2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a9a:	2180      	movs	r1, #128	; 0x80
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f001 f8c5 	bl	800ac2c <USBD_LL_StallEP>
 8009aa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009aa4:	e025      	b.n	8009af2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fc33 	bl	800a314 <USBD_CtlError>
              break;
 8009aae:	e020      	b.n	8009af2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	885b      	ldrh	r3, [r3, #2]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d11b      	bne.n	8009af0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
 8009aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d004      	beq.n	8009acc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f001 f8cf 	bl	800ac6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fcec 	bl	800a4aa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	4798      	blx	r3
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009ae4:	e004      	b.n	8009af0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fc13 	bl	800a314 <USBD_CtlError>
              break;
 8009aee:	e000      	b.n	8009af2 <USBD_StdEPReq+0x154>
              break;
 8009af0:	bf00      	nop
          }
          break;
 8009af2:	e0ab      	b.n	8009c4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d002      	beq.n	8009b06 <USBD_StdEPReq+0x168>
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d032      	beq.n	8009b6a <USBD_StdEPReq+0x1cc>
 8009b04:	e097      	b.n	8009c36 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <USBD_StdEPReq+0x17e>
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b80      	cmp	r3, #128	; 0x80
 8009b10:	d004      	beq.n	8009b1c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fbfd 	bl	800a314 <USBD_CtlError>
                break;
 8009b1a:	e091      	b.n	8009c40 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	da0b      	bge.n	8009b3c <USBD_StdEPReq+0x19e>
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	3310      	adds	r3, #16
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	4413      	add	r3, r2
 8009b38:	3304      	adds	r3, #4
 8009b3a:	e00b      	b.n	8009b54 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
 8009b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b42:	4613      	mov	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	4413      	add	r3, r2
 8009b52:	3304      	adds	r3, #4
 8009b54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fc47 	bl	800a3f6 <USBD_CtlSendData>
              break;
 8009b68:	e06a      	b.n	8009c40 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	da11      	bge.n	8009b96 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b72:	7bbb      	ldrb	r3, [r7, #14]
 8009b74:	f003 020f 	and.w	r2, r3, #15
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	3324      	adds	r3, #36	; 0x24
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d117      	bne.n	8009bbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fbc0 	bl	800a314 <USBD_CtlError>
                  break;
 8009b94:	e054      	b.n	8009c40 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b96:	7bbb      	ldrb	r3, [r7, #14]
 8009b98:	f003 020f 	and.w	r2, r3, #15
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d104      	bne.n	8009bbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fbad 	bl	800a314 <USBD_CtlError>
                  break;
 8009bba:	e041      	b.n	8009c40 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	da0b      	bge.n	8009bdc <USBD_StdEPReq+0x23e>
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
 8009bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	3310      	adds	r3, #16
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	3304      	adds	r3, #4
 8009bda:	e00b      	b.n	8009bf4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bdc:	7bbb      	ldrb	r3, [r7, #14]
 8009bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009be2:	4613      	mov	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <USBD_StdEPReq+0x264>
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	2b80      	cmp	r3, #128	; 0x80
 8009c00:	d103      	bne.n	8009c0a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	e00e      	b.n	8009c28 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f001 f84a 	bl	800aca8 <USBD_LL_IsStallEP>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	e002      	b.n	8009c28 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fbe1 	bl	800a3f6 <USBD_CtlSendData>
              break;
 8009c34:	e004      	b.n	8009c40 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fb6b 	bl	800a314 <USBD_CtlError>
              break;
 8009c3e:	bf00      	nop
          }
          break;
 8009c40:	e004      	b.n	8009c4c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fb65 	bl	800a314 <USBD_CtlError>
          break;
 8009c4a:	bf00      	nop
      }
      break;
 8009c4c:	e004      	b.n	8009c58 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fb5f 	bl	800a314 <USBD_CtlError>
      break;
 8009c56:	bf00      	nop
  }

  return ret;
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
	...

08009c64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	885b      	ldrh	r3, [r3, #2]
 8009c7e:	0a1b      	lsrs	r3, r3, #8
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	3b01      	subs	r3, #1
 8009c84:	2b0e      	cmp	r3, #14
 8009c86:	f200 8152 	bhi.w	8009f2e <USBD_GetDescriptor+0x2ca>
 8009c8a:	a201      	add	r2, pc, #4	; (adr r2, 8009c90 <USBD_GetDescriptor+0x2c>)
 8009c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c90:	08009d01 	.word	0x08009d01
 8009c94:	08009d19 	.word	0x08009d19
 8009c98:	08009d59 	.word	0x08009d59
 8009c9c:	08009f2f 	.word	0x08009f2f
 8009ca0:	08009f2f 	.word	0x08009f2f
 8009ca4:	08009ecf 	.word	0x08009ecf
 8009ca8:	08009efb 	.word	0x08009efb
 8009cac:	08009f2f 	.word	0x08009f2f
 8009cb0:	08009f2f 	.word	0x08009f2f
 8009cb4:	08009f2f 	.word	0x08009f2f
 8009cb8:	08009f2f 	.word	0x08009f2f
 8009cbc:	08009f2f 	.word	0x08009f2f
 8009cc0:	08009f2f 	.word	0x08009f2f
 8009cc4:	08009f2f 	.word	0x08009f2f
 8009cc8:	08009ccd 	.word	0x08009ccd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
 8009ce4:	f107 0108 	add.w	r1, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cee:	e126      	b.n	8009f3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fb0e 	bl	800a314 <USBD_CtlError>
        err++;
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	72fb      	strb	r3, [r7, #11]
      break;
 8009cfe:	e11e      	b.n	8009f3e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	7c12      	ldrb	r2, [r2, #16]
 8009d0c:	f107 0108 	add.w	r1, r7, #8
 8009d10:	4610      	mov	r0, r2
 8009d12:	4798      	blx	r3
 8009d14:	60f8      	str	r0, [r7, #12]
      break;
 8009d16:	e112      	b.n	8009f3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	7c1b      	ldrb	r3, [r3, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10d      	bne.n	8009d3c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d28:	f107 0208 	add.w	r2, r7, #8
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	4798      	blx	r3
 8009d30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3301      	adds	r3, #1
 8009d36:	2202      	movs	r2, #2
 8009d38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d3a:	e100      	b.n	8009f3e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	f107 0208 	add.w	r2, r7, #8
 8009d48:	4610      	mov	r0, r2
 8009d4a:	4798      	blx	r3
 8009d4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3301      	adds	r3, #1
 8009d52:	2202      	movs	r2, #2
 8009d54:	701a      	strb	r2, [r3, #0]
      break;
 8009d56:	e0f2      	b.n	8009f3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	885b      	ldrh	r3, [r3, #2]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b05      	cmp	r3, #5
 8009d60:	f200 80ac 	bhi.w	8009ebc <USBD_GetDescriptor+0x258>
 8009d64:	a201      	add	r2, pc, #4	; (adr r2, 8009d6c <USBD_GetDescriptor+0x108>)
 8009d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6a:	bf00      	nop
 8009d6c:	08009d85 	.word	0x08009d85
 8009d70:	08009db9 	.word	0x08009db9
 8009d74:	08009ded 	.word	0x08009ded
 8009d78:	08009e21 	.word	0x08009e21
 8009d7c:	08009e55 	.word	0x08009e55
 8009d80:	08009e89 	.word	0x08009e89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00b      	beq.n	8009da8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	7c12      	ldrb	r2, [r2, #16]
 8009d9c:	f107 0108 	add.w	r1, r7, #8
 8009da0:	4610      	mov	r0, r2
 8009da2:	4798      	blx	r3
 8009da4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009da6:	e091      	b.n	8009ecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fab2 	bl	800a314 <USBD_CtlError>
            err++;
 8009db0:	7afb      	ldrb	r3, [r7, #11]
 8009db2:	3301      	adds	r3, #1
 8009db4:	72fb      	strb	r3, [r7, #11]
          break;
 8009db6:	e089      	b.n	8009ecc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00b      	beq.n	8009ddc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	7c12      	ldrb	r2, [r2, #16]
 8009dd0:	f107 0108 	add.w	r1, r7, #8
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4798      	blx	r3
 8009dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dda:	e077      	b.n	8009ecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fa98 	bl	800a314 <USBD_CtlError>
            err++;
 8009de4:	7afb      	ldrb	r3, [r7, #11]
 8009de6:	3301      	adds	r3, #1
 8009de8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dea:	e06f      	b.n	8009ecc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00b      	beq.n	8009e10 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	7c12      	ldrb	r2, [r2, #16]
 8009e04:	f107 0108 	add.w	r1, r7, #8
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4798      	blx	r3
 8009e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e0e:	e05d      	b.n	8009ecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa7e 	bl	800a314 <USBD_CtlError>
            err++;
 8009e18:	7afb      	ldrb	r3, [r7, #11]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e1e:	e055      	b.n	8009ecc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00b      	beq.n	8009e44 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	7c12      	ldrb	r2, [r2, #16]
 8009e38:	f107 0108 	add.w	r1, r7, #8
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	4798      	blx	r3
 8009e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e42:	e043      	b.n	8009ecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fa64 	bl	800a314 <USBD_CtlError>
            err++;
 8009e4c:	7afb      	ldrb	r3, [r7, #11]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	72fb      	strb	r3, [r7, #11]
          break;
 8009e52:	e03b      	b.n	8009ecc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	7c12      	ldrb	r2, [r2, #16]
 8009e6c:	f107 0108 	add.w	r1, r7, #8
 8009e70:	4610      	mov	r0, r2
 8009e72:	4798      	blx	r3
 8009e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e76:	e029      	b.n	8009ecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fa4a 	bl	800a314 <USBD_CtlError>
            err++;
 8009e80:	7afb      	ldrb	r3, [r7, #11]
 8009e82:	3301      	adds	r3, #1
 8009e84:	72fb      	strb	r3, [r7, #11]
          break;
 8009e86:	e021      	b.n	8009ecc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	7c12      	ldrb	r2, [r2, #16]
 8009ea0:	f107 0108 	add.w	r1, r7, #8
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4798      	blx	r3
 8009ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eaa:	e00f      	b.n	8009ecc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fa30 	bl	800a314 <USBD_CtlError>
            err++;
 8009eb4:	7afb      	ldrb	r3, [r7, #11]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eba:	e007      	b.n	8009ecc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fa28 	bl	800a314 <USBD_CtlError>
          err++;
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009eca:	bf00      	nop
      }
      break;
 8009ecc:	e037      	b.n	8009f3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	7c1b      	ldrb	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d109      	bne.n	8009eea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ede:	f107 0208 	add.w	r2, r7, #8
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	4798      	blx	r3
 8009ee6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ee8:	e029      	b.n	8009f3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fa11 	bl	800a314 <USBD_CtlError>
        err++;
 8009ef2:	7afb      	ldrb	r3, [r7, #11]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ef8:	e021      	b.n	8009f3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	7c1b      	ldrb	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10d      	bne.n	8009f1e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	f107 0208 	add.w	r2, r7, #8
 8009f0e:	4610      	mov	r0, r2
 8009f10:	4798      	blx	r3
 8009f12:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	3301      	adds	r3, #1
 8009f18:	2207      	movs	r2, #7
 8009f1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f1c:	e00f      	b.n	8009f3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f9f7 	bl	800a314 <USBD_CtlError>
        err++;
 8009f26:	7afb      	ldrb	r3, [r7, #11]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8009f2c:	e007      	b.n	8009f3e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f9ef 	bl	800a314 <USBD_CtlError>
      err++;
 8009f36:	7afb      	ldrb	r3, [r7, #11]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8009f3c:	bf00      	nop
  }

  if (err != 0U)
 8009f3e:	7afb      	ldrb	r3, [r7, #11]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d11e      	bne.n	8009f82 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	88db      	ldrh	r3, [r3, #6]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d016      	beq.n	8009f7a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009f4c:	893b      	ldrh	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00e      	beq.n	8009f70 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	88da      	ldrh	r2, [r3, #6]
 8009f56:	893b      	ldrh	r3, [r7, #8]
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	bf28      	it	cs
 8009f5c:	4613      	movcs	r3, r2
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f62:	893b      	ldrh	r3, [r7, #8]
 8009f64:	461a      	mov	r2, r3
 8009f66:	68f9      	ldr	r1, [r7, #12]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fa44 	bl	800a3f6 <USBD_CtlSendData>
 8009f6e:	e009      	b.n	8009f84 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f9ce 	bl	800a314 <USBD_CtlError>
 8009f78:	e004      	b.n	8009f84 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fa95 	bl	800a4aa <USBD_CtlSendStatus>
 8009f80:	e000      	b.n	8009f84 <USBD_GetDescriptor+0x320>
    return;
 8009f82:	bf00      	nop
  }
}
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop

08009f8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	889b      	ldrh	r3, [r3, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d131      	bne.n	800a002 <USBD_SetAddress+0x76>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	88db      	ldrh	r3, [r3, #6]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d12d      	bne.n	800a002 <USBD_SetAddress+0x76>
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	885b      	ldrh	r3, [r3, #2]
 8009faa:	2b7f      	cmp	r3, #127	; 0x7f
 8009fac:	d829      	bhi.n	800a002 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	885b      	ldrh	r3, [r3, #2]
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d104      	bne.n	8009fd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f9a3 	bl	800a314 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fce:	e01d      	b.n	800a00c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	7bfa      	ldrb	r2, [r7, #15]
 8009fd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fe90 	bl	800ad02 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fa61 	bl	800a4aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d004      	beq.n	8009ff8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff6:	e009      	b.n	800a00c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a000:	e004      	b.n	800a00c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f985 	bl	800a314 <USBD_CtlError>
  }
}
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	885b      	ldrh	r3, [r3, #2]
 800a026:	b2da      	uxtb	r2, r3
 800a028:	4b4c      	ldr	r3, [pc, #304]	; (800a15c <USBD_SetConfig+0x148>)
 800a02a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a02c:	4b4b      	ldr	r3, [pc, #300]	; (800a15c <USBD_SetConfig+0x148>)
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d905      	bls.n	800a040 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f96c 	bl	800a314 <USBD_CtlError>
    return USBD_FAIL;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e088      	b.n	800a152 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d002      	beq.n	800a052 <USBD_SetConfig+0x3e>
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d025      	beq.n	800a09c <USBD_SetConfig+0x88>
 800a050:	e071      	b.n	800a136 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a052:	4b42      	ldr	r3, [pc, #264]	; (800a15c <USBD_SetConfig+0x148>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d01c      	beq.n	800a094 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a05a:	4b40      	ldr	r3, [pc, #256]	; (800a15c <USBD_SetConfig+0x148>)
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a064:	4b3d      	ldr	r3, [pc, #244]	; (800a15c <USBD_SetConfig+0x148>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff f992 	bl	8009394 <USBD_SetClassConfig>
 800a070:	4603      	mov	r3, r0
 800a072:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f949 	bl	800a314 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a082:	e065      	b.n	800a150 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fa10 	bl	800a4aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2203      	movs	r2, #3
 800a08e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a092:	e05d      	b.n	800a150 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fa08 	bl	800a4aa <USBD_CtlSendStatus>
      break;
 800a09a:	e059      	b.n	800a150 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a09c:	4b2f      	ldr	r3, [pc, #188]	; (800a15c <USBD_SetConfig+0x148>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d112      	bne.n	800a0ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2202      	movs	r2, #2
 800a0a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a0ac:	4b2b      	ldr	r3, [pc, #172]	; (800a15c <USBD_SetConfig+0x148>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0b6:	4b29      	ldr	r3, [pc, #164]	; (800a15c <USBD_SetConfig+0x148>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7ff f985 	bl	80093cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f9f1 	bl	800a4aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0c8:	e042      	b.n	800a150 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a0ca:	4b24      	ldr	r3, [pc, #144]	; (800a15c <USBD_SetConfig+0x148>)
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d02a      	beq.n	800a12e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7ff f973 	bl	80093cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a0e6:	4b1d      	ldr	r3, [pc, #116]	; (800a15c <USBD_SetConfig+0x148>)
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0f0:	4b1a      	ldr	r3, [pc, #104]	; (800a15c <USBD_SetConfig+0x148>)
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff f94c 	bl	8009394 <USBD_SetClassConfig>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00f      	beq.n	800a126 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f903 	bl	800a314 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7ff f958 	bl	80093cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a124:	e014      	b.n	800a150 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f9bf 	bl	800a4aa <USBD_CtlSendStatus>
      break;
 800a12c:	e010      	b.n	800a150 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f9bb 	bl	800a4aa <USBD_CtlSendStatus>
      break;
 800a134:	e00c      	b.n	800a150 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f8eb 	bl	800a314 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a13e:	4b07      	ldr	r3, [pc, #28]	; (800a15c <USBD_SetConfig+0x148>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7ff f941 	bl	80093cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a14a:	2303      	movs	r3, #3
 800a14c:	73fb      	strb	r3, [r7, #15]
      break;
 800a14e:	bf00      	nop
  }

  return ret;
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	2000044c 	.word	0x2000044c

0800a160 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	88db      	ldrh	r3, [r3, #6]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d004      	beq.n	800a17c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f8cd 	bl	800a314 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a17a:	e023      	b.n	800a1c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b02      	cmp	r3, #2
 800a186:	dc02      	bgt.n	800a18e <USBD_GetConfig+0x2e>
 800a188:	2b00      	cmp	r3, #0
 800a18a:	dc03      	bgt.n	800a194 <USBD_GetConfig+0x34>
 800a18c:	e015      	b.n	800a1ba <USBD_GetConfig+0x5a>
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d00b      	beq.n	800a1aa <USBD_GetConfig+0x4a>
 800a192:	e012      	b.n	800a1ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3308      	adds	r3, #8
 800a19e:	2201      	movs	r2, #1
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f927 	bl	800a3f6 <USBD_CtlSendData>
        break;
 800a1a8:	e00c      	b.n	800a1c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f91f 	bl	800a3f6 <USBD_CtlSendData>
        break;
 800a1b8:	e004      	b.n	800a1c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f8a9 	bl	800a314 <USBD_CtlError>
        break;
 800a1c2:	bf00      	nop
}
 800a1c4:	bf00      	nop
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d81e      	bhi.n	800a222 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	88db      	ldrh	r3, [r3, #6]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d004      	beq.n	800a1f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f890 	bl	800a314 <USBD_CtlError>
        break;
 800a1f4:	e01a      	b.n	800a22c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	f043 0202 	orr.w	r2, r3, #2
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	330c      	adds	r3, #12
 800a216:	2202      	movs	r2, #2
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f8eb 	bl	800a3f6 <USBD_CtlSendData>
      break;
 800a220:	e004      	b.n	800a22c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f875 	bl	800a314 <USBD_CtlError>
      break;
 800a22a:	bf00      	nop
  }
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	885b      	ldrh	r3, [r3, #2]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d106      	bne.n	800a254 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f92b 	bl	800a4aa <USBD_CtlSendStatus>
  }
}
 800a254:	bf00      	nop
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	3b01      	subs	r3, #1
 800a270:	2b02      	cmp	r3, #2
 800a272:	d80b      	bhi.n	800a28c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	885b      	ldrh	r3, [r3, #2]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d10c      	bne.n	800a296 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f910 	bl	800a4aa <USBD_CtlSendStatus>
      }
      break;
 800a28a:	e004      	b.n	800a296 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f840 	bl	800a314 <USBD_CtlError>
      break;
 800a294:	e000      	b.n	800a298 <USBD_ClrFeature+0x3c>
      break;
 800a296:	bf00      	nop
  }
}
 800a298:	bf00      	nop
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	781a      	ldrb	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	781a      	ldrb	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f7ff fa92 	bl	80097f4 <SWAPBYTE>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff fa85 	bl	80097f4 <SWAPBYTE>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f7ff fa78 	bl	80097f4 <SWAPBYTE>
 800a304:	4603      	mov	r3, r0
 800a306:	461a      	mov	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	80da      	strh	r2, [r3, #6]
}
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a31e:	2180      	movs	r1, #128	; 0x80
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fc83 	bl	800ac2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a326:	2100      	movs	r1, #0
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fc7f 	bl	800ac2c <USBD_LL_StallEP>
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b086      	sub	sp, #24
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d036      	beq.n	800a3ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a350:	6938      	ldr	r0, [r7, #16]
 800a352:	f000 f836 	bl	800a3c2 <USBD_GetLen>
 800a356:	4603      	mov	r3, r0
 800a358:	3301      	adds	r3, #1
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	005b      	lsls	r3, r3, #1
 800a35e:	b29a      	uxth	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a364:	7dfb      	ldrb	r3, [r7, #23]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	4413      	add	r3, r2
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	7812      	ldrb	r2, [r2, #0]
 800a36e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a370:	7dfb      	ldrb	r3, [r7, #23]
 800a372:	3301      	adds	r3, #1
 800a374:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a376:	7dfb      	ldrb	r3, [r7, #23]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	4413      	add	r3, r2
 800a37c:	2203      	movs	r2, #3
 800a37e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a380:	7dfb      	ldrb	r3, [r7, #23]
 800a382:	3301      	adds	r3, #1
 800a384:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a386:	e013      	b.n	800a3b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	4413      	add	r3, r2
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	7812      	ldrb	r2, [r2, #0]
 800a392:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	3301      	adds	r3, #1
 800a398:	613b      	str	r3, [r7, #16]
    idx++;
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
 800a39c:	3301      	adds	r3, #1
 800a39e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a3a0:	7dfb      	ldrb	r3, [r7, #23]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	701a      	strb	r2, [r3, #0]
    idx++;
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e7      	bne.n	800a388 <USBD_GetString+0x52>
 800a3b8:	e000      	b.n	800a3bc <USBD_GetString+0x86>
    return;
 800a3ba:	bf00      	nop
  }
}
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b085      	sub	sp, #20
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a3d2:	e005      	b.n	800a3e0 <USBD_GetLen+0x1e>
  {
    len++;
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1f5      	bne.n	800a3d4 <USBD_GetLen+0x12>
  }

  return len;
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b084      	sub	sp, #16
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	60f8      	str	r0, [r7, #12]
 800a3fe:	60b9      	str	r1, [r7, #8]
 800a400:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2202      	movs	r2, #2
 800a406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	2100      	movs	r1, #0
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 fc8f 	bl	800ad40 <USBD_LL_Transmit>

  return USBD_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	2100      	movs	r1, #0
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 fc7e 	bl	800ad40 <USBD_LL_Transmit>

  return USBD_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	60f8      	str	r0, [r7, #12]
 800a456:	60b9      	str	r1, [r7, #8]
 800a458:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2203      	movs	r2, #3
 800a45e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	2100      	movs	r1, #0
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 fc82 	bl	800ad82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	2100      	movs	r1, #0
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f000 fc71 	bl	800ad82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2204      	movs	r2, #4
 800a4b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2100      	movs	r1, #0
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fc3d 	bl	800ad40 <USBD_LL_Transmit>

  return USBD_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2205      	movs	r2, #5
 800a4dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fc4b 	bl	800ad82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
	...

0800a4f8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4912      	ldr	r1, [pc, #72]	; (800a548 <MX_USB_Device_Init+0x50>)
 800a500:	4812      	ldr	r0, [pc, #72]	; (800a54c <MX_USB_Device_Init+0x54>)
 800a502:	f7fe fed9 	bl	80092b8 <USBD_Init>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a50c:	f7f6 fbc0 	bl	8000c90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a510:	490f      	ldr	r1, [pc, #60]	; (800a550 <MX_USB_Device_Init+0x58>)
 800a512:	480e      	ldr	r0, [pc, #56]	; (800a54c <MX_USB_Device_Init+0x54>)
 800a514:	f7fe ff00 	bl	8009318 <USBD_RegisterClass>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a51e:	f7f6 fbb7 	bl	8000c90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a522:	490c      	ldr	r1, [pc, #48]	; (800a554 <MX_USB_Device_Init+0x5c>)
 800a524:	4809      	ldr	r0, [pc, #36]	; (800a54c <MX_USB_Device_Init+0x54>)
 800a526:	f7fe fe21 	bl	800916c <USBD_CDC_RegisterInterface>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a530:	f7f6 fbae 	bl	8000c90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a534:	4805      	ldr	r0, [pc, #20]	; (800a54c <MX_USB_Device_Init+0x54>)
 800a536:	f7fe ff16 	bl	8009366 <USBD_Start>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a540:	f7f6 fba6 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a544:	bf00      	nop
 800a546:	bd80      	pop	{r7, pc}
 800a548:	20000158 	.word	0x20000158
 800a54c:	20000450 	.word	0x20000450
 800a550:	20000040 	.word	0x20000040
 800a554:	20000144 	.word	0x20000144

0800a558 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a55c:	2200      	movs	r2, #0
 800a55e:	4905      	ldr	r1, [pc, #20]	; (800a574 <CDC_Init_FS+0x1c>)
 800a560:	4805      	ldr	r0, [pc, #20]	; (800a578 <CDC_Init_FS+0x20>)
 800a562:	f7fe fe18 	bl	8009196 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a566:	4905      	ldr	r1, [pc, #20]	; (800a57c <CDC_Init_FS+0x24>)
 800a568:	4803      	ldr	r0, [pc, #12]	; (800a578 <CDC_Init_FS+0x20>)
 800a56a:	f7fe fe32 	bl	80091d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a56e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a570:	4618      	mov	r0, r3
 800a572:	bd80      	pop	{r7, pc}
 800a574:	20000b08 	.word	0x20000b08
 800a578:	20000450 	.word	0x20000450
 800a57c:	20000720 	.word	0x20000720

0800a580 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a580:	b480      	push	{r7}
 800a582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a584:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a586:	4618      	mov	r0, r3
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	6039      	str	r1, [r7, #0]
 800a59a:	71fb      	strb	r3, [r7, #7]
 800a59c:	4613      	mov	r3, r2
 800a59e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a5a0:	79fb      	ldrb	r3, [r7, #7]
 800a5a2:	2b23      	cmp	r3, #35	; 0x23
 800a5a4:	d84a      	bhi.n	800a63c <CDC_Control_FS+0xac>
 800a5a6:	a201      	add	r2, pc, #4	; (adr r2, 800a5ac <CDC_Control_FS+0x1c>)
 800a5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ac:	0800a63d 	.word	0x0800a63d
 800a5b0:	0800a63d 	.word	0x0800a63d
 800a5b4:	0800a63d 	.word	0x0800a63d
 800a5b8:	0800a63d 	.word	0x0800a63d
 800a5bc:	0800a63d 	.word	0x0800a63d
 800a5c0:	0800a63d 	.word	0x0800a63d
 800a5c4:	0800a63d 	.word	0x0800a63d
 800a5c8:	0800a63d 	.word	0x0800a63d
 800a5cc:	0800a63d 	.word	0x0800a63d
 800a5d0:	0800a63d 	.word	0x0800a63d
 800a5d4:	0800a63d 	.word	0x0800a63d
 800a5d8:	0800a63d 	.word	0x0800a63d
 800a5dc:	0800a63d 	.word	0x0800a63d
 800a5e0:	0800a63d 	.word	0x0800a63d
 800a5e4:	0800a63d 	.word	0x0800a63d
 800a5e8:	0800a63d 	.word	0x0800a63d
 800a5ec:	0800a63d 	.word	0x0800a63d
 800a5f0:	0800a63d 	.word	0x0800a63d
 800a5f4:	0800a63d 	.word	0x0800a63d
 800a5f8:	0800a63d 	.word	0x0800a63d
 800a5fc:	0800a63d 	.word	0x0800a63d
 800a600:	0800a63d 	.word	0x0800a63d
 800a604:	0800a63d 	.word	0x0800a63d
 800a608:	0800a63d 	.word	0x0800a63d
 800a60c:	0800a63d 	.word	0x0800a63d
 800a610:	0800a63d 	.word	0x0800a63d
 800a614:	0800a63d 	.word	0x0800a63d
 800a618:	0800a63d 	.word	0x0800a63d
 800a61c:	0800a63d 	.word	0x0800a63d
 800a620:	0800a63d 	.word	0x0800a63d
 800a624:	0800a63d 	.word	0x0800a63d
 800a628:	0800a63d 	.word	0x0800a63d
 800a62c:	0800a63d 	.word	0x0800a63d
 800a630:	0800a63d 	.word	0x0800a63d
 800a634:	0800a63d 	.word	0x0800a63d
 800a638:	0800a63d 	.word	0x0800a63d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a63c:	bf00      	nop
  }

  return (USBD_OK);
 800a63e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7f5 fddd 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a65e:	6879      	ldr	r1, [r7, #4]
 800a660:	4805      	ldr	r0, [pc, #20]	; (800a678 <CDC_Receive_FS+0x2c>)
 800a662:	f7fe fdb6 	bl	80091d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a666:	4804      	ldr	r0, [pc, #16]	; (800a678 <CDC_Receive_FS+0x2c>)
 800a668:	f7fe fdfc 	bl	8009264 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a66c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20000450 	.word	0x20000450

0800a67c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	460b      	mov	r3, r1
 800a686:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a688:	2300      	movs	r3, #0
 800a68a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a68c:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <CDC_Transmit_FS+0x48>)
 800a68e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a692:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e00b      	b.n	800a6ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a6a2:	887b      	ldrh	r3, [r7, #2]
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	4806      	ldr	r0, [pc, #24]	; (800a6c4 <CDC_Transmit_FS+0x48>)
 800a6aa:	f7fe fd74 	bl	8009196 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a6ae:	4805      	ldr	r0, [pc, #20]	; (800a6c4 <CDC_Transmit_FS+0x48>)
 800a6b0:	f7fe fda8 	bl	8009204 <USBD_CDC_TransmitPacket>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20000450 	.word	0x20000450

0800a6c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a6da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
	...

0800a6ec <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	6039      	str	r1, [r7, #0]
 800a6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2212      	movs	r2, #18
 800a6fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a6fe:	4b03      	ldr	r3, [pc, #12]	; (800a70c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	20000178 	.word	0x20000178

0800a710 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	4603      	mov	r3, r0
 800a718:	6039      	str	r1, [r7, #0]
 800a71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2204      	movs	r2, #4
 800a720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a722:	4b03      	ldr	r3, [pc, #12]	; (800a730 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	2000018c 	.word	0x2000018c

0800a734 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	6039      	str	r1, [r7, #0]
 800a73e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d105      	bne.n	800a752 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	4907      	ldr	r1, [pc, #28]	; (800a768 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a74a:	4808      	ldr	r0, [pc, #32]	; (800a76c <USBD_CDC_ProductStrDescriptor+0x38>)
 800a74c:	f7ff fdf3 	bl	800a336 <USBD_GetString>
 800a750:	e004      	b.n	800a75c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	4904      	ldr	r1, [pc, #16]	; (800a768 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a756:	4805      	ldr	r0, [pc, #20]	; (800a76c <USBD_CDC_ProductStrDescriptor+0x38>)
 800a758:	f7ff fded 	bl	800a336 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	20000ef0 	.word	0x20000ef0
 800a76c:	0800af78 	.word	0x0800af78

0800a770 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	6039      	str	r1, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	4904      	ldr	r1, [pc, #16]	; (800a790 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a780:	4804      	ldr	r0, [pc, #16]	; (800a794 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a782:	f7ff fdd8 	bl	800a336 <USBD_GetString>
  return USBD_StrDesc;
 800a786:	4b02      	ldr	r3, [pc, #8]	; (800a790 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	20000ef0 	.word	0x20000ef0
 800a794:	0800af90 	.word	0x0800af90

0800a798 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	6039      	str	r1, [r7, #0]
 800a7a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	221a      	movs	r2, #26
 800a7a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7aa:	f000 f843 	bl	800a834 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a7ae:	4b02      	ldr	r3, [pc, #8]	; (800a7b8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	20000190 	.word	0x20000190

0800a7bc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	6039      	str	r1, [r7, #0]
 800a7c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7c8:	79fb      	ldrb	r3, [r7, #7]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d105      	bne.n	800a7da <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	4907      	ldr	r1, [pc, #28]	; (800a7f0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a7d2:	4808      	ldr	r0, [pc, #32]	; (800a7f4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a7d4:	f7ff fdaf 	bl	800a336 <USBD_GetString>
 800a7d8:	e004      	b.n	800a7e4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	4904      	ldr	r1, [pc, #16]	; (800a7f0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a7de:	4805      	ldr	r0, [pc, #20]	; (800a7f4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a7e0:	f7ff fda9 	bl	800a336 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7e4:	4b02      	ldr	r3, [pc, #8]	; (800a7f0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	20000ef0 	.word	0x20000ef0
 800a7f4:	0800afa4 	.word	0x0800afa4

0800a7f8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	4603      	mov	r3, r0
 800a800:	6039      	str	r1, [r7, #0]
 800a802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a804:	79fb      	ldrb	r3, [r7, #7]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d105      	bne.n	800a816 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	4907      	ldr	r1, [pc, #28]	; (800a82c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a80e:	4808      	ldr	r0, [pc, #32]	; (800a830 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a810:	f7ff fd91 	bl	800a336 <USBD_GetString>
 800a814:	e004      	b.n	800a820 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	4904      	ldr	r1, [pc, #16]	; (800a82c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a81a:	4805      	ldr	r0, [pc, #20]	; (800a830 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a81c:	f7ff fd8b 	bl	800a336 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a820:	4b02      	ldr	r3, [pc, #8]	; (800a82c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20000ef0 	.word	0x20000ef0
 800a830:	0800afb0 	.word	0x0800afb0

0800a834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a83a:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <Get_SerialNum+0x44>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a840:	4b0e      	ldr	r3, [pc, #56]	; (800a87c <Get_SerialNum+0x48>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a846:	4b0e      	ldr	r3, [pc, #56]	; (800a880 <Get_SerialNum+0x4c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4413      	add	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d009      	beq.n	800a86e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a85a:	2208      	movs	r2, #8
 800a85c:	4909      	ldr	r1, [pc, #36]	; (800a884 <Get_SerialNum+0x50>)
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f000 f814 	bl	800a88c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a864:	2204      	movs	r2, #4
 800a866:	4908      	ldr	r1, [pc, #32]	; (800a888 <Get_SerialNum+0x54>)
 800a868:	68b8      	ldr	r0, [r7, #8]
 800a86a:	f000 f80f 	bl	800a88c <IntToUnicode>
  }
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	1fff7590 	.word	0x1fff7590
 800a87c:	1fff7594 	.word	0x1fff7594
 800a880:	1fff7598 	.word	0x1fff7598
 800a884:	20000192 	.word	0x20000192
 800a888:	200001a2 	.word	0x200001a2

0800a88c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	4613      	mov	r3, r2
 800a898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a89e:	2300      	movs	r3, #0
 800a8a0:	75fb      	strb	r3, [r7, #23]
 800a8a2:	e027      	b.n	800a8f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	0f1b      	lsrs	r3, r3, #28
 800a8a8:	2b09      	cmp	r3, #9
 800a8aa:	d80b      	bhi.n	800a8c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	0f1b      	lsrs	r3, r3, #28
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	005b      	lsls	r3, r3, #1
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	440b      	add	r3, r1
 800a8bc:	3230      	adds	r2, #48	; 0x30
 800a8be:	b2d2      	uxtb	r2, r2
 800a8c0:	701a      	strb	r2, [r3, #0]
 800a8c2:	e00a      	b.n	800a8da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	0f1b      	lsrs	r3, r3, #28
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	440b      	add	r3, r1
 800a8d4:	3237      	adds	r2, #55	; 0x37
 800a8d6:	b2d2      	uxtb	r2, r2
 800a8d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	011b      	lsls	r3, r3, #4
 800a8de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8e0:	7dfb      	ldrb	r3, [r7, #23]
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8ee:	7dfb      	ldrb	r3, [r7, #23]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	75fb      	strb	r3, [r7, #23]
 800a8f4:	7dfa      	ldrb	r2, [r7, #23]
 800a8f6:	79fb      	ldrb	r3, [r7, #7]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d3d3      	bcc.n	800a8a4 <IntToUnicode+0x18>
  }
}
 800a8fc:	bf00      	nop
 800a8fe:	bf00      	nop
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
	...

0800a90c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a0d      	ldr	r2, [pc, #52]	; (800a950 <HAL_PCD_MspInit+0x44>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d113      	bne.n	800a946 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a91e:	4b0d      	ldr	r3, [pc, #52]	; (800a954 <HAL_PCD_MspInit+0x48>)
 800a920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a922:	4a0c      	ldr	r2, [pc, #48]	; (800a954 <HAL_PCD_MspInit+0x48>)
 800a924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a928:	6593      	str	r3, [r2, #88]	; 0x58
 800a92a:	4b0a      	ldr	r3, [pc, #40]	; (800a954 <HAL_PCD_MspInit+0x48>)
 800a92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a92e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a936:	2200      	movs	r2, #0
 800a938:	2100      	movs	r1, #0
 800a93a:	2014      	movs	r0, #20
 800a93c:	f7f6 fd61 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a940:	2014      	movs	r0, #20
 800a942:	f7f6 fd78 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a946:	bf00      	nop
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	40005c00 	.word	0x40005c00
 800a954:	40021000 	.word	0x40021000

0800a958 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a96c:	4619      	mov	r1, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	f7fe fd44 	bl	80093fc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a98e:	78fa      	ldrb	r2, [r7, #3]
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	4613      	mov	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	440b      	add	r3, r1
 800a99c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	78fb      	ldrb	r3, [r7, #3]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	f7fe fd7e 	bl	80094a6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b082      	sub	sp, #8
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a9c4:	78fa      	ldrb	r2, [r7, #3]
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4413      	add	r3, r2
 800a9ce:	00db      	lsls	r3, r3, #3
 800a9d0:	440b      	add	r3, r1
 800a9d2:	333c      	adds	r3, #60	; 0x3c
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	78fb      	ldrb	r3, [r7, #3]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	f7fe fdc7 	bl	800956c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a9de:	bf00      	nop
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fedb 	bl	80097b0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a9fa:	bf00      	nop
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d001      	beq.n	800aa1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa16:	f7f6 f93b 	bl	8000c90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa20:	7bfa      	ldrb	r2, [r7, #15]
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fe fe85 	bl	8009734 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fe31 	bl	8009698 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800aa36:	bf00      	nop
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fe fe80 	bl	8009754 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d005      	beq.n	800aa68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa5c:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <HAL_PCD_SuspendCallback+0x30>)
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	4a03      	ldr	r2, [pc, #12]	; (800aa70 <HAL_PCD_SuspendCallback+0x30>)
 800aa62:	f043 0306 	orr.w	r3, r3, #6
 800aa66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800aa68:	bf00      	nop
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	e000ed00 	.word	0xe000ed00

0800aa74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d007      	beq.n	800aa94 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa84:	4b08      	ldr	r3, [pc, #32]	; (800aaa8 <HAL_PCD_ResumeCallback+0x34>)
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	4a07      	ldr	r2, [pc, #28]	; (800aaa8 <HAL_PCD_ResumeCallback+0x34>)
 800aa8a:	f023 0306 	bic.w	r3, r3, #6
 800aa8e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800aa90:	f000 f9fa 	bl	800ae88 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fe fe70 	bl	8009780 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	e000ed00 	.word	0xe000ed00

0800aaac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800aab4:	4a2b      	ldr	r2, [pc, #172]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a29      	ldr	r2, [pc, #164]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aac0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800aac4:	4b27      	ldr	r3, [pc, #156]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aac6:	4a28      	ldr	r2, [pc, #160]	; (800ab68 <USBD_LL_Init+0xbc>)
 800aac8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aaca:	4b26      	ldr	r3, [pc, #152]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aacc:	2208      	movs	r2, #8
 800aace:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aad0:	4b24      	ldr	r3, [pc, #144]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aad2:	2202      	movs	r2, #2
 800aad4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aad6:	4b23      	ldr	r3, [pc, #140]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aad8:	2202      	movs	r2, #2
 800aada:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800aadc:	4b21      	ldr	r3, [pc, #132]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aade:	2200      	movs	r2, #0
 800aae0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aae2:	4b20      	ldr	r3, [pc, #128]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aae8:	4b1e      	ldr	r3, [pc, #120]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aaee:	4b1d      	ldr	r3, [pc, #116]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aaf4:	481b      	ldr	r0, [pc, #108]	; (800ab64 <USBD_LL_Init+0xb8>)
 800aaf6:	f7f7 f8c5 	bl	8001c84 <HAL_PCD_Init>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ab00:	f7f6 f8c6 	bl	8000c90 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab0a:	2318      	movs	r3, #24
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2100      	movs	r1, #0
 800ab10:	f7f8 fcdf 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab1a:	2358      	movs	r3, #88	; 0x58
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2180      	movs	r1, #128	; 0x80
 800ab20:	f7f8 fcd7 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab2a:	23c0      	movs	r3, #192	; 0xc0
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2181      	movs	r1, #129	; 0x81
 800ab30:	f7f8 fccf 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab3a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ab3e:	2200      	movs	r2, #0
 800ab40:	2101      	movs	r1, #1
 800ab42:	f7f8 fcc6 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab50:	2200      	movs	r2, #0
 800ab52:	2182      	movs	r1, #130	; 0x82
 800ab54:	f7f8 fcbd 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	200010f0 	.word	0x200010f0
 800ab68:	40005c00 	.word	0x40005c00

0800ab6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7f7 f963 	bl	8001e4e <HAL_PCD_Start>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 f980 	bl	800ae94 <USBD_Get_USB_Status>
 800ab94:	4603      	mov	r3, r0
 800ab96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	4608      	mov	r0, r1
 800abac:	4611      	mov	r1, r2
 800abae:	461a      	mov	r2, r3
 800abb0:	4603      	mov	r3, r0
 800abb2:	70fb      	strb	r3, [r7, #3]
 800abb4:	460b      	mov	r3, r1
 800abb6:	70bb      	strb	r3, [r7, #2]
 800abb8:	4613      	mov	r3, r2
 800abba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800abca:	78bb      	ldrb	r3, [r7, #2]
 800abcc:	883a      	ldrh	r2, [r7, #0]
 800abce:	78f9      	ldrb	r1, [r7, #3]
 800abd0:	f7f7 fad2 	bl	8002178 <HAL_PCD_EP_Open>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 f95a 	bl	800ae94 <USBD_Get_USB_Status>
 800abe0:	4603      	mov	r3, r0
 800abe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b084      	sub	sp, #16
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	460b      	mov	r3, r1
 800abf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac08:	78fa      	ldrb	r2, [r7, #3]
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7f7 fb19 	bl	8002244 <HAL_PCD_EP_Close>
 800ac12:	4603      	mov	r3, r0
 800ac14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 f93b 	bl	800ae94 <USBD_Get_USB_Status>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac46:	78fa      	ldrb	r2, [r7, #3]
 800ac48:	4611      	mov	r1, r2
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7f7 fbda 	bl	8002404 <HAL_PCD_EP_SetStall>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 f91c 	bl	800ae94 <USBD_Get_USB_Status>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	460b      	mov	r3, r1
 800ac74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac84:	78fa      	ldrb	r2, [r7, #3]
 800ac86:	4611      	mov	r1, r2
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7f7 fc0d 	bl	80024a8 <HAL_PCD_EP_ClrStall>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac92:	7bfb      	ldrb	r3, [r7, #15]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 f8fd 	bl	800ae94 <USBD_Get_USB_Status>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	da0c      	bge.n	800acde <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acc4:	78fb      	ldrb	r3, [r7, #3]
 800acc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acca:	68f9      	ldr	r1, [r7, #12]
 800accc:	1c5a      	adds	r2, r3, #1
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	440b      	add	r3, r1
 800acd8:	3302      	adds	r3, #2
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	e00b      	b.n	800acf6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acde:	78fb      	ldrb	r3, [r7, #3]
 800ace0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ace4:	68f9      	ldr	r1, [r7, #12]
 800ace6:	4613      	mov	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	440b      	add	r3, r1
 800acf0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800acf4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad1c:	78fa      	ldrb	r2, [r7, #3]
 800ad1e:	4611      	mov	r1, r2
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7f7 fa04 	bl	800212e <HAL_PCD_SetAddress>
 800ad26:	4603      	mov	r3, r0
 800ad28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 f8b1 	bl	800ae94 <USBD_Get_USB_Status>
 800ad32:	4603      	mov	r3, r0
 800ad34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	607a      	str	r2, [r7, #4]
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad5e:	7af9      	ldrb	r1, [r7, #11]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	f7f7 fb0b 	bl	800237e <HAL_PCD_EP_Transmit>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 f890 	bl	800ae94 <USBD_Get_USB_Status>
 800ad74:	4603      	mov	r3, r0
 800ad76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b086      	sub	sp, #24
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
 800ad8e:	460b      	mov	r3, r1
 800ad90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ada0:	7af9      	ldrb	r1, [r7, #11]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	f7f7 fa95 	bl	80022d4 <HAL_PCD_EP_Receive>
 800adaa:	4603      	mov	r3, r0
 800adac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 f86f 	bl	800ae94 <USBD_Get_USB_Status>
 800adb6:	4603      	mov	r3, r0
 800adb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adba:	7dbb      	ldrb	r3, [r7, #22]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3718      	adds	r7, #24
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	460b      	mov	r3, r1
 800adce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800add6:	78fa      	ldrb	r2, [r7, #3]
 800add8:	4611      	mov	r1, r2
 800adda:	4618      	mov	r0, r3
 800addc:	f7f7 fab7 	bl	800234e <HAL_PCD_EP_GetRxCount>
 800ade0:	4603      	mov	r3, r0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800adf8:	78fb      	ldrb	r3, [r7, #3]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d002      	beq.n	800ae04 <HAL_PCDEx_LPM_Callback+0x18>
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d013      	beq.n	800ae2a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ae02:	e023      	b.n	800ae4c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d007      	beq.n	800ae1c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ae0c:	f000 f83c 	bl	800ae88 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae10:	4b10      	ldr	r3, [pc, #64]	; (800ae54 <HAL_PCDEx_LPM_Callback+0x68>)
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	4a0f      	ldr	r2, [pc, #60]	; (800ae54 <HAL_PCDEx_LPM_Callback+0x68>)
 800ae16:	f023 0306 	bic.w	r3, r3, #6
 800ae1a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fe fcac 	bl	8009780 <USBD_LL_Resume>
    break;
 800ae28:	e010      	b.n	800ae4c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fe fc8f 	bl	8009754 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d005      	beq.n	800ae4a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae3e:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <HAL_PCDEx_LPM_Callback+0x68>)
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	4a04      	ldr	r2, [pc, #16]	; (800ae54 <HAL_PCDEx_LPM_Callback+0x68>)
 800ae44:	f043 0306 	orr.w	r3, r3, #6
 800ae48:	6113      	str	r3, [r2, #16]
    break;
 800ae4a:	bf00      	nop
}
 800ae4c:	bf00      	nop
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	e000ed00 	.word	0xe000ed00

0800ae58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae60:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <USBD_static_malloc+0x18>)
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	200013e4 	.word	0x200013e4

0800ae74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]

}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ae8c:	f7f5 fb76 	bl	800057c <SystemClock_Config>
}
 800ae90:	bf00      	nop
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	2b03      	cmp	r3, #3
 800aea6:	d817      	bhi.n	800aed8 <USBD_Get_USB_Status+0x44>
 800aea8:	a201      	add	r2, pc, #4	; (adr r2, 800aeb0 <USBD_Get_USB_Status+0x1c>)
 800aeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeae:	bf00      	nop
 800aeb0:	0800aec1 	.word	0x0800aec1
 800aeb4:	0800aec7 	.word	0x0800aec7
 800aeb8:	0800aecd 	.word	0x0800aecd
 800aebc:	0800aed3 	.word	0x0800aed3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	73fb      	strb	r3, [r7, #15]
    break;
 800aec4:	e00b      	b.n	800aede <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aec6:	2303      	movs	r3, #3
 800aec8:	73fb      	strb	r3, [r7, #15]
    break;
 800aeca:	e008      	b.n	800aede <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aecc:	2301      	movs	r3, #1
 800aece:	73fb      	strb	r3, [r7, #15]
    break;
 800aed0:	e005      	b.n	800aede <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aed2:	2303      	movs	r3, #3
 800aed4:	73fb      	strb	r3, [r7, #15]
    break;
 800aed6:	e002      	b.n	800aede <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aed8:	2303      	movs	r3, #3
 800aeda:	73fb      	strb	r3, [r7, #15]
    break;
 800aedc:	bf00      	nop
  }
  return usb_status;
 800aede:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <__libc_init_array>:
 800aeec:	b570      	push	{r4, r5, r6, lr}
 800aeee:	4d0d      	ldr	r5, [pc, #52]	; (800af24 <__libc_init_array+0x38>)
 800aef0:	4c0d      	ldr	r4, [pc, #52]	; (800af28 <__libc_init_array+0x3c>)
 800aef2:	1b64      	subs	r4, r4, r5
 800aef4:	10a4      	asrs	r4, r4, #2
 800aef6:	2600      	movs	r6, #0
 800aef8:	42a6      	cmp	r6, r4
 800aefa:	d109      	bne.n	800af10 <__libc_init_array+0x24>
 800aefc:	4d0b      	ldr	r5, [pc, #44]	; (800af2c <__libc_init_array+0x40>)
 800aefe:	4c0c      	ldr	r4, [pc, #48]	; (800af30 <__libc_init_array+0x44>)
 800af00:	f000 f82e 	bl	800af60 <_init>
 800af04:	1b64      	subs	r4, r4, r5
 800af06:	10a4      	asrs	r4, r4, #2
 800af08:	2600      	movs	r6, #0
 800af0a:	42a6      	cmp	r6, r4
 800af0c:	d105      	bne.n	800af1a <__libc_init_array+0x2e>
 800af0e:	bd70      	pop	{r4, r5, r6, pc}
 800af10:	f855 3b04 	ldr.w	r3, [r5], #4
 800af14:	4798      	blx	r3
 800af16:	3601      	adds	r6, #1
 800af18:	e7ee      	b.n	800aef8 <__libc_init_array+0xc>
 800af1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af1e:	4798      	blx	r3
 800af20:	3601      	adds	r6, #1
 800af22:	e7f2      	b.n	800af0a <__libc_init_array+0x1e>
 800af24:	0800afd0 	.word	0x0800afd0
 800af28:	0800afd0 	.word	0x0800afd0
 800af2c:	0800afd0 	.word	0x0800afd0
 800af30:	0800afd4 	.word	0x0800afd4

0800af34 <memcpy>:
 800af34:	440a      	add	r2, r1
 800af36:	4291      	cmp	r1, r2
 800af38:	f100 33ff 	add.w	r3, r0, #4294967295
 800af3c:	d100      	bne.n	800af40 <memcpy+0xc>
 800af3e:	4770      	bx	lr
 800af40:	b510      	push	{r4, lr}
 800af42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af4a:	4291      	cmp	r1, r2
 800af4c:	d1f9      	bne.n	800af42 <memcpy+0xe>
 800af4e:	bd10      	pop	{r4, pc}

0800af50 <memset>:
 800af50:	4402      	add	r2, r0
 800af52:	4603      	mov	r3, r0
 800af54:	4293      	cmp	r3, r2
 800af56:	d100      	bne.n	800af5a <memset+0xa>
 800af58:	4770      	bx	lr
 800af5a:	f803 1b01 	strb.w	r1, [r3], #1
 800af5e:	e7f9      	b.n	800af54 <memset+0x4>

0800af60 <_init>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	bf00      	nop
 800af64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af66:	bc08      	pop	{r3}
 800af68:	469e      	mov	lr, r3
 800af6a:	4770      	bx	lr

0800af6c <_fini>:
 800af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6e:	bf00      	nop
 800af70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af72:	bc08      	pop	{r3}
 800af74:	469e      	mov	lr, r3
 800af76:	4770      	bx	lr
