
BTS_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a720  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a950  0800a950  000201ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800a950  0800a950  000201ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a950  0800a950  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a950  0800a950  0001a950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a954  0800a954  0001a954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  0800a958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  200001ac  0800ab04  000201ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001600  0800ab04  00021600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9ec  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1a  00000000  00000000  0003dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  000416e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  00042ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d88  00000000  00000000  00043d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172e0  00000000  00000000  00064aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5db4  00000000  00000000  0007bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141b3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005250  00000000  00000000  00141b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001ac 	.word	0x200001ac
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a8e0 	.word	0x0800a8e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b0 	.word	0x200001b0
 8000214:	0800a8e0 	.word	0x0800a8e0

08000218 <CDC_On_Receive>:


Command command = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .throwerSpeed = 0, .delimiter = 0}; // (4) Instance of received data.
volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) { // (7) Check if received data has the same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f00a fb40 	bl	800a8b4 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001c8 	.word	0x200001c8
 8000254:	200001d2 	.word	0x200001d2

08000258 <clampValue>:


int32_t clampValue(int32_t value, int32_t minValue, int32_t maxValue) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (value < minValue) {
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	429a      	cmp	r2, r3
 800026a:	da01      	bge.n	8000270 <clampValue+0x18>
		return minValue;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	e006      	b.n	800027e <clampValue+0x26>
	}
	if (value > maxValue) {
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	dd01      	ble.n	800027c <clampValue+0x24>
		return maxValue;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	e000      	b.n	800027e <clampValue+0x26>
	}

	return value;
 800027c:	68fb      	ldr	r3, [r7, #12]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
	...

0800028c <controlMotor>:


int32_t controlMotor(MotorControl* motorControl, int16_t position, int16_t setpoint) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
 8000298:	4613      	mov	r3, r2
 800029a:	803b      	strh	r3, [r7, #0]
	motorControl->positionChange = position - motorControl->position;
 800029c:	887a      	ldrh	r2, [r7, #2]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	b29b      	uxth	r3, r3
 80002aa:	b21a      	sxth	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	801a      	strh	r2, [r3, #0]
	motorControl->position = position;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	887a      	ldrh	r2, [r7, #2]
 80002b4:	805a      	strh	r2, [r3, #2]
	int32_t error = setpoint - motorControl->positionChange;
 80002b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80002c0:	1a9b      	subs	r3, r3, r2
 80002c2:	60fb      	str	r3, [r7, #12]
	motorControl->integral += error;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	689a      	ldr	r2, [r3, #8]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	441a      	add	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	609a      	str	r2, [r3, #8]
	clampValue(motorControl->integral, -70000 / motorControl->gainI, 70000 / motorControl->gainI);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	6898      	ldr	r0, [r3, #8]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <controlMotor+0x94>)
 80002de:	fb93 f1f2 	sdiv	r1, r3, r2
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <controlMotor+0x98>)
 80002ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80002f0:	461a      	mov	r2, r3
 80002f2:	f7ff ffb1 	bl	8000258 <clampValue>

	return error * motorControl->gainP + motorControl->gainI * motorControl->integral;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80002fc:	461a      	mov	r2, r3
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	fb03 f202 	mul.w	r2, r3, r2
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800030a:	4619      	mov	r1, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	fb03 f301 	mul.w	r3, r3, r1
 8000314:	4413      	add	r3, r2

}
 8000316:	4618      	mov	r0, r3
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	fffeee90 	.word	0xfffeee90
 8000324:	00011170 	.word	0x00011170

08000328 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  // Motor control calculations can be called from here
	int32_t motorPwm_1 = clampValue(controlMotor(&motorControl_1, (int16_t)TIM4->CNT, command.speed1), -65535, 65535);
 8000330:	4b42      	ldr	r3, [pc, #264]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000334:	b21b      	sxth	r3, r3
 8000336:	4a42      	ldr	r2, [pc, #264]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000338:	f9b2 2000 	ldrsh.w	r2, [r2]
 800033c:	4619      	mov	r1, r3
 800033e:	4841      	ldr	r0, [pc, #260]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000340:	f7ff ffa4 	bl	800028c <controlMotor>
 8000344:	4603      	mov	r3, r0
 8000346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800034a:	493f      	ldr	r1, [pc, #252]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff83 	bl	8000258 <clampValue>
 8000352:	6178      	str	r0, [r7, #20]
	int32_t motorPwm_2 = clampValue(controlMotor(&motorControl_2, (int16_t)TIM3->CNT, command.speed2), -65535, 65535);
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000358:	b21b      	sxth	r3, r3
 800035a:	4a39      	ldr	r2, [pc, #228]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800035c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000360:	4619      	mov	r1, r3
 8000362:	483b      	ldr	r0, [pc, #236]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000364:	f7ff ff92 	bl	800028c <controlMotor>
 8000368:	4603      	mov	r3, r0
 800036a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800036e:	4936      	ldr	r1, [pc, #216]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff71 	bl	8000258 <clampValue>
 8000376:	6138      	str	r0, [r7, #16]
	int32_t motorPwm_3 = clampValue(controlMotor(&motorControl_3, (int16_t)TIM1->CNT, command.speed3), -65535, 65535);
 8000378:	4b36      	ldr	r3, [pc, #216]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800037a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037c:	b21b      	sxth	r3, r3
 800037e:	4a30      	ldr	r2, [pc, #192]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000380:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000384:	4619      	mov	r1, r3
 8000386:	4834      	ldr	r0, [pc, #208]	; (8000458 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000388:	f7ff ff80 	bl	800028c <controlMotor>
 800038c:	4603      	mov	r3, r0
 800038e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000392:	492d      	ldr	r1, [pc, #180]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ff5f 	bl	8000258 <clampValue>
 800039a:	60f8      	str	r0, [r7, #12]

	if (motorPwm_1 < 0) {
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	da0b      	bge.n	80003ba <HAL_TIM_PeriodElapsedCallback+0x92>
		TIM2->CCR2 = -motorPwm_1;
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	425a      	negs	r2, r3
 80003a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003aa:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2101      	movs	r1, #1
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b4:	f001 fc4e 	bl	8001c54 <HAL_GPIO_WritePin>
 80003b8:	e009      	b.n	80003ce <HAL_TIM_PeriodElapsedCallback+0xa6>
	} else {
		TIM2->CCR2 = motorPwm_1;
 80003ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2101      	movs	r1, #1
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f001 fc43 	bl	8001c54 <HAL_GPIO_WritePin>
	}

	if (motorPwm_2 < 0) {
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	da0b      	bge.n	80003ec <HAL_TIM_PeriodElapsedCallback+0xc4>
		TIM2->CCR4 = -motorPwm_2;
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	425a      	negs	r2, r3
 80003d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003dc:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2104      	movs	r1, #4
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f001 fc35 	bl	8001c54 <HAL_GPIO_WritePin>
 80003ea:	e009      	b.n	8000400 <HAL_TIM_PeriodElapsedCallback+0xd8>
	} else {
		TIM2->CCR4 = motorPwm_2;
 80003ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2104      	movs	r1, #4
 80003f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fc:	f001 fc2a 	bl	8001c54 <HAL_GPIO_WritePin>
	}

	if (motorPwm_3 < 0) {
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2b00      	cmp	r3, #0
 8000404:	da0b      	bge.n	800041e <HAL_TIM_PeriodElapsedCallback+0xf6>
		TIM2->CCR1 = -motorPwm_3;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	425a      	negs	r2, r3
 800040a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800040e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	2110      	movs	r1, #16
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f001 fc1c 	bl	8001c54 <HAL_GPIO_WritePin>
	} else {
		TIM2->CCR1 = motorPwm_3;
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
	}
}
 800041c:	e009      	b.n	8000432 <HAL_TIM_PeriodElapsedCallback+0x10a>
		TIM2->CCR1 = motorPwm_3;
 800041e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 8000426:	2201      	movs	r2, #1
 8000428:	2110      	movs	r1, #16
 800042a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042e:	f001 fc11 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40000800 	.word	0x40000800
 8000440:	200001c8 	.word	0x200001c8
 8000444:	20000000 	.word	0x20000000
 8000448:	ffff0001 	.word	0xffff0001
 800044c:	40000400 	.word	0x40000400
 8000450:	2000000c 	.word	0x2000000c
 8000454:	40012c00 	.word	0x40012c00
 8000458:	20000018 	.word	0x20000018

0800045c <enableMotorDrivers>:

void enableMotorDrivers(){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, nsleepPwmValues, 2);
 8000460:	2302      	movs	r3, #2
 8000462:	4a03      	ldr	r2, [pc, #12]	; (8000470 <enableMotorDrivers+0x14>)
 8000464:	2100      	movs	r1, #0
 8000466:	4803      	ldr	r0, [pc, #12]	; (8000474 <enableMotorDrivers+0x18>)
 8000468:	f004 fa5a 	bl	8004920 <HAL_TIM_PWM_Start_DMA>

}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000024 	.word	0x20000024
 8000474:	200003f4 	.word	0x200003f4

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047e:	f000 fe74 	bl	800116a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000482:	f000 f87b 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 fbc5 	bl	8000c14 <MX_GPIO_Init>
  MX_DMA_Init();
 800048a:	f000 fb99 	bl	8000bc0 <MX_DMA_Init>
  MX_USB_Device_Init();
 800048e:	f009 fcf3 	bl	8009e78 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000492:	f000 f8db 	bl	800064c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000496:	f000 f9a3 	bl	80007e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800049a:	f000 f9f7 	bl	800088c <MX_TIM4_Init>
  MX_TIM2_Init();
 800049e:	f000 f92f 	bl	8000700 <MX_TIM2_Init>
  MX_TIM16_Init();
 80004a2:	f000 fb13 	bl	8000acc <MX_TIM16_Init>
  MX_TIM6_Init();
 80004a6:	f000 fa47 	bl	8000938 <MX_TIM6_Init>
  MX_TIM8_Init();
 80004aa:	f000 fa7b 	bl	80009a4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = { // (1)
 80004ae:	2300      	movs	r3, #0
 80004b0:	803b      	strh	r3, [r7, #0]
 80004b2:	2300      	movs	r3, #0
 80004b4:	807b      	strh	r3, [r7, #2]
 80004b6:	2300      	movs	r3, #0
 80004b8:	80bb      	strh	r3, [r7, #4]
 80004ba:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80004be:	80fb      	strh	r3, [r7, #6]
        .speed3 = 0,
        .delimiter = 0xAAAA
    };

// TIMER
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004c0:	2104      	movs	r1, #4
 80004c2:	4822      	ldr	r0, [pc, #136]	; (800054c <main+0xd4>)
 80004c4:	f004 fce4 	bl	8004e90 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004c8:	2104      	movs	r1, #4
 80004ca:	4821      	ldr	r0, [pc, #132]	; (8000550 <main+0xd8>)
 80004cc:	f004 fce0 	bl	8004e90 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004d0:	2104      	movs	r1, #4
 80004d2:	4820      	ldr	r0, [pc, #128]	; (8000554 <main+0xdc>)
 80004d4:	f004 fcdc 	bl	8004e90 <HAL_TIM_Encoder_Start>

// PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004d8:	2100      	movs	r1, #0
 80004da:	481f      	ldr	r0, [pc, #124]	; (8000558 <main+0xe0>)
 80004dc:	f004 f920 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004e0:	2104      	movs	r1, #4
 80004e2:	481d      	ldr	r0, [pc, #116]	; (8000558 <main+0xe0>)
 80004e4:	f004 f91c 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80004e8:	210c      	movs	r1, #12
 80004ea:	481b      	ldr	r0, [pc, #108]	; (8000558 <main+0xe0>)
 80004ec:	f004 f918 	bl	8004720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80004f0:	2100      	movs	r1, #0
 80004f2:	481a      	ldr	r0, [pc, #104]	; (800055c <main+0xe4>)
 80004f4:	f004 f914 	bl	8004720 <HAL_TIM_PWM_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 80004f8:	4819      	ldr	r0, [pc, #100]	; (8000560 <main+0xe8>)
 80004fa:	f004 f84f 	bl	800459c <HAL_TIM_Base_Start_IT>
  enableMotorDrivers();
 80004fe:	f7ff ffad 	bl	800045c <enableMotorDrivers>

  TIM16->CCR1 = 1800;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <main+0xec>)
 8000504:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isCommandReceived) { // (2)
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <main+0xf0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0fa      	beq.n	800050a <main+0x92>
	        isCommandReceived = 0;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <main+0xf0>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]

	        enableMotorDrivers();
 800051a:	f7ff ff9f 	bl	800045c <enableMotorDrivers>

	        feedback.speed1 = motorControl_1.positionChange; // (4)
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <main+0xf4>)
 8000520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000524:	803b      	strh	r3, [r7, #0]
			feedback.speed2 = motorControl_2.positionChange;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <main+0xf8>)
 8000528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800052c:	807b      	strh	r3, [r7, #2]
			feedback.speed3 = motorControl_3.positionChange;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <main+0xfc>)
 8000530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000534:	80bb      	strh	r3, [r7, #4]

			TIM16->CCR1 = command.throwerSpeed;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <main+0x100>)
 8000538:	88da      	ldrh	r2, [r3, #6]
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <main+0xec>)
 800053c:	635a      	str	r2, [r3, #52]	; 0x34

	        CDC_Transmit_FS((uint8_t*)&feedback, (uint16_t)sizeof(feedback)); // (5)
 800053e:	463b      	mov	r3, r7
 8000540:	2108      	movs	r1, #8
 8000542:	4618      	mov	r0, r3
 8000544:	f009 fd5a 	bl	8009ffc <CDC_Transmit_FS>
	  if (isCommandReceived) { // (2)
 8000548:	e7df      	b.n	800050a <main+0x92>
 800054a:	bf00      	nop
 800054c:	20000584 	.word	0x20000584
 8000550:	200004ec 	.word	0x200004ec
 8000554:	20000440 	.word	0x20000440
 8000558:	200005d0 	.word	0x200005d0
 800055c:	2000061c 	.word	0x2000061c
 8000560:	20000538 	.word	0x20000538
 8000564:	40014400 	.word	0x40014400
 8000568:	200001d2 	.word	0x200001d2
 800056c:	20000000 	.word	0x20000000
 8000570:	2000000c 	.word	0x2000000c
 8000574:	20000018 	.word	0x20000018
 8000578:	200001c8 	.word	0x200001c8

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b0a4      	sub	sp, #144	; 0x90
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000586:	2238      	movs	r2, #56	; 0x38
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f00a f9a0 	bl	800a8d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2244      	movs	r2, #68	; 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f00a f992 	bl	800a8d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f002 fffd 	bl	80035ac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005b2:	2322      	movs	r3, #34	; 0x22
 80005b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2340      	movs	r3, #64	; 0x40
 80005be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005d0:	2314      	movs	r3, #20
 80005d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 f891 	bl	8003714 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f8:	f000 fb4a 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000610:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000614:	2104      	movs	r1, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fb94 	bl	8003d44 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000622:	f000 fb35 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800062c:	2300      	movs	r3, #0
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fd6a 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063e:	f000 fb27 	bl	8000c90 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3790      	adds	r7, #144	; 0x90
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2224      	movs	r2, #36	; 0x24
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00a f938 	bl	800a8d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <MX_TIM1_Init+0xac>)
 800066c:	4a23      	ldr	r2, [pc, #140]	; (80006fc <MX_TIM1_Init+0xb0>)
 800066e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_TIM1_Init+0xac>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <MX_TIM1_Init+0xac>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_TIM1_Init+0xac>)
 800067e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000682:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_TIM1_Init+0xac>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_TIM1_Init+0xac>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_TIM1_Init+0xac>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000696:	2303      	movs	r3, #3
 8000698:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006ae:	2301      	movs	r3, #1
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_TIM1_Init+0xac>)
 80006c2:	f004 fb3f 	bl	8004d44 <HAL_TIM_Encoder_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80006cc:	f000 fae0 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_TIM1_Init+0xac>)
 80006e2:	f005 fbad 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006ec:	f000 fad0 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3730      	adds	r7, #48	; 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000584 	.word	0x20000584
 80006fc:	40012c00 	.word	0x40012c00

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]
 8000722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000724:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_TIM2_Init+0xdc>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_TIM2_Init+0xdc>)
 800073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <MX_TIM2_Init+0xdc>)
 800074e:	f003 ff8f 	bl	8004670 <HAL_TIM_PWM_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 fa9a 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	481c      	ldr	r0, [pc, #112]	; (80007dc <MX_TIM2_Init+0xdc>)
 800076c:	f005 fb68 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000776:	f000 fa8b 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077a:	2360      	movs	r3, #96	; 0x60
 800077c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <MX_TIM2_Init+0xdc>)
 8000792:	f004 fd8b 	bl	80052ac <HAL_TIM_PWM_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800079c:	f000 fa78 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	2204      	movs	r2, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_TIM2_Init+0xdc>)
 80007a8:	f004 fd80 	bl	80052ac <HAL_TIM_PWM_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80007b2:	f000 fa6d 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	220c      	movs	r2, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <MX_TIM2_Init+0xdc>)
 80007be:	f004 fd75 	bl	80052ac <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80007c8:	f000 fa62 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <MX_TIM2_Init+0xdc>)
 80007ce:	f000 fbc7 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200005d0 	.word	0x200005d0

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2224      	movs	r2, #36	; 0x24
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f00a f86e 	bl	800a8d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <MX_TIM3_Init+0xa8>)
 8000802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_TIM3_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM3_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000824:	2303      	movs	r3, #3
 8000826:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800082c:	2301      	movs	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800083c:	2301      	movs	r3, #1
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000850:	f004 fa78 	bl	8004d44 <HAL_TIM_Encoder_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800085a:	f000 fa19 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_TIM3_Init+0xa4>)
 800086c:	f005 fae8 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000876:	f000 fa0b 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3730      	adds	r7, #48	; 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200004ec 	.word	0x200004ec
 8000888:	40000400 	.word	0x40000400

0800088c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2224      	movs	r2, #36	; 0x24
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f00a f818 	bl	800a8d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008ac:	4a21      	ldr	r2, [pc, #132]	; (8000934 <MX_TIM4_Init+0xa8>)
 80008ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	2301      	movs	r3, #1
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008fc:	f004 fa22 	bl	8004d44 <HAL_TIM_Encoder_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000906:	f000 f9c3 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_TIM4_Init+0xa4>)
 8000918:	f005 fa92 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000922:	f000 f9b5 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	; 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000440 	.word	0x20000440
 8000934:	40000800 	.word	0x40000800

08000938 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_TIM6_Init+0x64>)
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <MX_TIM6_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_TIM6_Init+0x64>)
 8000950:	2218      	movs	r2, #24
 8000952:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_TIM6_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_TIM6_Init+0x64>)
 800095c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000960:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_TIM6_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_TIM6_Init+0x64>)
 800096a:	f003 fdbf 	bl	80044ec <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000974:	f000 f98c 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_TIM6_Init+0x64>)
 8000986:	f005 fa5b 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000990:	f000 f97e 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000538 	.word	0x20000538
 80009a0:	40001000 	.word	0x40001000

080009a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b098      	sub	sp, #96	; 0x60
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2234      	movs	r2, #52	; 0x34
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f009 ff7d 	bl	800a8d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009d6:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009d8:	4a3b      	ldr	r2, [pc, #236]	; (8000ac8 <MX_TIM8_Init+0x124>)
 80009da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009dc:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 15999;
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009ea:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80009ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009f6:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <MX_TIM8_Init+0x120>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a02:	4830      	ldr	r0, [pc, #192]	; (8000ac4 <MX_TIM8_Init+0x120>)
 8000a04:	f003 fe34 	bl	8004670 <HAL_TIM_PWM_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 f93f 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a22:	4619      	mov	r1, r3
 8000a24:	4827      	ldr	r0, [pc, #156]	; (8000ac4 <MX_TIM8_Init+0x120>)
 8000a26:	f005 fa0b 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000a30:	f000 f92e 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a40:	2300      	movs	r3, #0
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a56:	2200      	movs	r2, #0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <MX_TIM8_Init+0x120>)
 8000a5c:	f004 fc26 	bl	80052ac <HAL_TIM_PWM_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000a66:	f000 f913 	bl	8000c90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <MX_TIM8_Init+0x120>)
 8000aa8:	f005 fa4c 	bl	8005f44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8000ab2:	f000 f8ed 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <MX_TIM8_Init+0x120>)
 8000ab8:	f000 fa52 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000abc:	bf00      	nop
 8000abe:	3760      	adds	r7, #96	; 0x60
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200003f4 	.word	0x200003f4
 8000ac8:	40013400 	.word	0x40013400

08000acc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	; 0x50
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2234      	movs	r2, #52	; 0x34
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f009 feef 	bl	800a8d0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000af2:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000af4:	4a31      	ldr	r2, [pc, #196]	; (8000bbc <MX_TIM16_Init+0xf0>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8000af8:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000afa:	224f      	movs	r2, #79	; 0x4f
 8000afc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 39999;
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b06:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000b0a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b1e:	4826      	ldr	r0, [pc, #152]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b20:	f003 fce4 	bl	80044ec <HAL_TIM_Base_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b2a:	f000 f8b1 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b2e:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b30:	f003 fd9e 	bl	8004670 <HAL_TIM_PWM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b3a:	f000 f8a9 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3e:	2360      	movs	r3, #96	; 0x60
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	4815      	ldr	r0, [pc, #84]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b64:	f004 fba2 	bl	80052ac <HAL_TIM_PWM_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b6e:	f000 f88f 	bl	8000c90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	4619      	mov	r1, r3
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000b9a:	f005 f9d3 	bl	8005f44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000ba4:	f000 f874 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <MX_TIM16_Init+0xec>)
 8000baa:	f000 f9d9 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	; 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000061c 	.word	0x2000061c
 8000bbc:	40014400 	.word	0x40014400

08000bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_DMA_Init+0x50>)
 8000bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <MX_DMA_Init+0x50>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6493      	str	r3, [r2, #72]	; 0x48
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_DMA_Init+0x50>)
 8000bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_DMA_Init+0x50>)
 8000be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <MX_DMA_Init+0x50>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_DMA_Init+0x50>)
 8000bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	200b      	movs	r0, #11
 8000bfc:	f000 fc01 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c00:	200b      	movs	r0, #11
 8000c02:	f000 fc18 	bl	8001436 <HAL_NVIC_EnableIRQ>

}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_GPIO_Init+0x78>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M2_DIR_Pin|M3_DIR_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2115      	movs	r1, #21
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f000 fff7 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M2_DIR_Pin M3_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|M3_DIR_Pin;
 8000c66:	2315      	movs	r3, #21
 8000c68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f000 fe66 	bl	8001950 <HAL_GPIO_Init>

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6613      	str	r3, [r2, #96]	; 0x60
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cd2:	f002 fd0f 	bl	80036f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a46      	ldr	r2, [pc, #280]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x138>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12a      	bne.n	8000d5c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a45      	ldr	r2, [pc, #276]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a3f      	ldr	r2, [pc, #252]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f000 fdfb 	bl	8001950 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d5a:	e05a      	b.n	8000e12 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <HAL_TIM_Encoder_MspInit+0x140>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d128      	bne.n	8000db8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	4a2d      	ldr	r2, [pc, #180]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6593      	str	r3, [r2, #88]	; 0x58
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d96:	2330      	movs	r3, #48	; 0x30
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000da6:	2302      	movs	r3, #2
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	481d      	ldr	r0, [pc, #116]	; (8000e28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000db2:	f000 fdcd 	bl	8001950 <HAL_GPIO_Init>
}
 8000db6:	e02c      	b.n	8000e12 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <HAL_TIM_Encoder_MspInit+0x148>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d127      	bne.n	8000e12 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e02:	2302      	movs	r3, #2
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e0e:	f000 fd9f 	bl	8001950 <HAL_GPIO_Init>
}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012c00 	.word	0x40012c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40000400 	.word	0x40000400
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	40000800 	.word	0x40000800

08000e30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e40:	d10c      	bne.n	8000e5c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	4a25      	ldr	r2, [pc, #148]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000e5a:	e03b      	b.n	8000ed4 <HAL_TIM_PWM_MspInit+0xa4>
  else if(htim_pwm->Instance==TIM8)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d136      	bne.n	8000ed4 <HAL_TIM_PWM_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e70:	6613      	str	r3, [r2, #96]	; 0x60
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_TIM_PWM_MspInit+0xac>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA1_Channel1;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_TIM_PWM_MspInit+0xb8>)
 8000e82:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e86:	2231      	movs	r2, #49	; 0x31
 8000e88:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea2:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eaa:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000eba:	f000 fad7 	bl	800146c <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_TIM_PWM_MspInit+0x98>
      Error_Handler();
 8000ec4:	f7ff fee4 	bl	8000c90 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40013400 	.word	0x40013400
 8000ee4:	2000048c 	.word	0x2000048c
 8000ee8:	40020008 	.word	0x40020008

08000eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <HAL_TIM_Base_MspInit+0x68>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d114      	bne.n	8000f28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2036      	movs	r0, #54	; 0x36
 8000f1c:	f000 fa71 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f20:	2036      	movs	r0, #54	; 0x36
 8000f22:	f000 fa88 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000f26:	e010      	b.n	8000f4a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_TIM_Base_MspInit+0x70>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10b      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_TIM_Base_MspInit+0x6c>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40001000 	.word	0x40001000
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40014400 	.word	0x40014400

08000f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f80:	d11d      	bne.n	8000fbe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b34      	ldr	r3, [pc, #208]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a33      	ldr	r2, [pc, #204]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin;
 8000f9a:	232a      	movs	r3, #42	; 0x2a
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000faa:	2301      	movs	r3, #1
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f000 fcca 	bl	8001950 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000fbc:	e045      	b.n	800104a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a25      	ldr	r2, [pc, #148]	; (8001058 <HAL_TIM_MspPostInit+0xf8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d11e      	bne.n	8001006 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f000 fca6 	bl	8001950 <HAL_GPIO_Init>
}
 8001004:	e021      	b.n	800104a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM16)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_TIM_MspPostInit+0xfc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d11c      	bne.n	800104a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = THROWER_Pin;
 8001028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800103a:	2301      	movs	r3, #1
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(THROWER_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <HAL_TIM_MspPostInit+0x100>)
 8001046:	f000 fc83 	bl	8001950 <HAL_GPIO_Init>
}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	40013400 	.word	0x40013400
 800105c:	40014400 	.word	0x40014400
 8001060:	48000400 	.word	0x48000400

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 f8ae 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <DMA1_Channel1_IRQHandler+0x10>)
 80010be:	f000 faf8 	bl	80016b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000048c 	.word	0x2000048c

080010cc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <USB_LP_IRQHandler+0x10>)
 80010d2:	f000 fede 	bl	8001e92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000130c 	.word	0x2000130c

080010e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM6_DAC_IRQHandler+0x10>)
 80010e6:	f003 ff61 	bl	8004fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000538 	.word	0x20000538

080010f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800111a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopForever+0x6>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopForever+0xe>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopForever+0x16>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001142:	f7ff ffd7 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f009 fb91 	bl	800a86c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114a:	f7ff f995 	bl	8000478 <main>

0800114e <LoopForever>:

LoopForever:
    b LoopForever
 800114e:	e7fe      	b.n	800114e <LoopForever>
  ldr   r0, =_estack
 8001150:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 800115c:	0800a958 	.word	0x0800a958
  ldr r2, =_sbss
 8001160:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001164:	20001600 	.word	0x20001600

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>

0800116a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 f939 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f80e 	bl	800119c <HAL_InitTick>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	e001      	b.n	8001190 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118c:	f7ff fd86 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001190:	79fb      	ldrb	r3, [r7, #7]

}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_InitTick+0x68>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d022      	beq.n	80011f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_InitTick+0x6c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_InitTick+0x68>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f944 	bl	8001452 <HAL_SYSTICK_Config>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10f      	bne.n	80011f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	d809      	bhi.n	80011ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d6:	2200      	movs	r2, #0
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	f04f 30ff 	mov.w	r0, #4294967295
 80011de:	f000 f910 	bl	8001402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_InitTick+0x70>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e007      	b.n	80011fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e004      	b.n	80011fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e001      	b.n	80011fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000030 	.word	0x20000030
 8001208:	20000028 	.word	0x20000028
 800120c:	2000002c 	.word	0x2000002c

08001210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x1c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x20>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4413      	add	r3, r2
 800121e:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_IncTick+0x1c>)
 8001220:	6013      	str	r3, [r2, #0]
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	20000668 	.word	0x20000668
 8001230:	20000030 	.word	0x20000030

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000668 	.word	0x20000668

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <__NVIC_EnableIRQ+0x38>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff8e 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff29 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff40 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff90 	bl	8001340 <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5f 	bl	80012ec <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff33 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa4 	bl	80013a8 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e08d      	b.n	800159a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_DMA_Init+0x138>)
 8001486:	429a      	cmp	r2, r3
 8001488:	d80f      	bhi.n	80014aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <HAL_DMA_Init+0x13c>)
 8001492:	4413      	add	r3, r2
 8001494:	4a45      	ldr	r2, [pc, #276]	; (80015ac <HAL_DMA_Init+0x140>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	009a      	lsls	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a42      	ldr	r2, [pc, #264]	; (80015b0 <HAL_DMA_Init+0x144>)
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
 80014a8:	e00e      	b.n	80014c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <HAL_DMA_Init+0x148>)
 80014b2:	4413      	add	r3, r2
 80014b4:	4a3d      	ldr	r2, [pc, #244]	; (80015ac <HAL_DMA_Init+0x140>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	009a      	lsls	r2, r3, #2
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a3c      	ldr	r2, [pc, #240]	; (80015b8 <HAL_DMA_Init+0x14c>)
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2202      	movs	r2, #2
 80014cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f9b6 	bl	800188c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001528:	d102      	bne.n	8001530 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001544:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d010      	beq.n	8001570 <HAL_DMA_Init+0x104>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b04      	cmp	r3, #4
 8001554:	d80c      	bhi.n	8001570 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f9d6 	bl	8001908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	e008      	b.n	8001582 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020407 	.word	0x40020407
 80015a8:	bffdfff8 	.word	0xbffdfff8
 80015ac:	cccccccd 	.word	0xcccccccd
 80015b0:	40020000 	.word	0x40020000
 80015b4:	bffdfbf8 	.word	0xbffdfbf8
 80015b8:	40020400 	.word	0x40020400

080015bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_DMA_Start_IT+0x20>
 80015d8:	2302      	movs	r3, #2
 80015da:	e066      	b.n	80016aa <HAL_DMA_Start_IT+0xee>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d155      	bne.n	800169c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2202      	movs	r2, #2
 80015f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0201 	bic.w	r2, r2, #1
 800160c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f8fb 	bl	8001810 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 020e 	orr.w	r2, r2, #14
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e00f      	b.n	8001654 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0204 	bic.w	r2, r2, #4
 8001642:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 020a 	orr.w	r2, r2, #10
 8001652:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001670:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001688:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e005      	b.n	80016a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016a4:	2302      	movs	r3, #2
 80016a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	2204      	movs	r2, #4
 80016d4:	409a      	lsls	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d026      	beq.n	800172c <HAL_DMA_IRQHandler+0x7a>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d021      	beq.n	800172c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0204 	bic.w	r2, r2, #4
 8001704:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f003 021f 	and.w	r2, r3, #31
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2104      	movs	r1, #4
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	2b00      	cmp	r3, #0
 8001720:	d071      	beq.n	8001806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800172a:	e06c      	b.n	8001806 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	2202      	movs	r2, #2
 8001736:	409a      	lsls	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d02e      	beq.n	800179e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d029      	beq.n	800179e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10b      	bne.n	8001770 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 020a 	bic.w	r2, r2, #10
 8001766:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	2102      	movs	r1, #2
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d038      	beq.n	8001806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800179c:	e033      	b.n	8001806 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	2208      	movs	r2, #8
 80017a8:	409a      	lsls	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d02a      	beq.n	8001808 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d025      	beq.n	8001808 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 020e 	bic.w	r2, r2, #14
 80017ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001806:	bf00      	nop
 8001808:	bf00      	nop
}
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001826:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001838:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f003 021f 	and.w	r2, r3, #31
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d108      	bne.n	8001870 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800186e:	e007      	b.n	8001880 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	60da      	str	r2, [r3, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800189c:	429a      	cmp	r2, r3
 800189e:	d802      	bhi.n	80018a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e001      	b.n	80018aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80018a8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	3b08      	subs	r3, #8
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	009a      	lsls	r2, r3, #2
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4413      	add	r3, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80018d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	2201      	movs	r2, #1
 80018e0:	409a      	lsls	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40020407 	.word	0x40020407
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020820 	.word	0x40020820
 8001900:	cccccccd 	.word	0xcccccccd
 8001904:	40020880 	.word	0x40020880

08001908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a08      	ldr	r2, [pc, #32]	; (800194c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800192a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3b01      	subs	r3, #1
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	2201      	movs	r2, #1
 8001936:	409a      	lsls	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	1000823f 	.word	0x1000823f
 800194c:	40020940 	.word	0x40020940

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800195e:	e15a      	b.n	8001c16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2101      	movs	r1, #1
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 814c 	beq.w	8001c10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d00b      	beq.n	8001998 <HAL_GPIO_Init+0x48>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d007      	beq.n	8001998 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800198c:	2b11      	cmp	r3, #17
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b12      	cmp	r3, #18
 8001996:	d130      	bne.n	80019fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 0201 	and.w	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0xea>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d123      	bne.n	8001a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	6939      	ldr	r1, [r7, #16]
 8001a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0203 	and.w	r2, r3, #3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80a6 	beq.w	8001c10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac4:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <HAL_GPIO_Init+0x2e4>)
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac8:	4a5a      	ldr	r2, [pc, #360]	; (8001c34 <HAL_GPIO_Init+0x2e4>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad0:	4b58      	ldr	r3, [pc, #352]	; (8001c34 <HAL_GPIO_Init+0x2e4>)
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001adc:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b06:	d01f      	beq.n	8001b48 <HAL_GPIO_Init+0x1f8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d019      	beq.n	8001b44 <HAL_GPIO_Init+0x1f4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <HAL_GPIO_Init+0x2f0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_GPIO_Init+0x1f0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <HAL_GPIO_Init+0x2f4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00d      	beq.n	8001b3c <HAL_GPIO_Init+0x1ec>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_GPIO_Init+0x2f8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d007      	beq.n	8001b38 <HAL_GPIO_Init+0x1e8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <HAL_GPIO_Init+0x2fc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b30:	2305      	movs	r3, #5
 8001b32:	e00a      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b34:	2306      	movs	r3, #6
 8001b36:	e008      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e006      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e004      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e002      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	f002 0203 	and.w	r2, r2, #3
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	4093      	lsls	r3, r2
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b5a:	4937      	ldr	r1, [pc, #220]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b8c:	4a30      	ldr	r2, [pc, #192]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb6:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f47f ae9d 	bne.w	8001960 <HAL_GPIO_Init+0x10>
  }
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	48000400 	.word	0x48000400
 8001c40:	48000800 	.word	0x48000800
 8001c44:	48000c00 	.word	0x48000c00
 8001c48:	48001000 	.word	0x48001000
 8001c4c:	48001400 	.word	0x48001400
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b08b      	sub	sp, #44	; 0x2c
 8001c88:	af06      	add	r7, sp, #24
 8001c8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0d7      	b.n	8001e46 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f008 faee 	bl	800a28c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 fa3e 	bl	800613e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	e04c      	b.n	8001d62 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3301      	adds	r3, #1
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	b298      	uxth	r0, r3
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	440b      	add	r3, r1
 8001d04:	3336      	adds	r3, #54	; 0x36
 8001d06:	4602      	mov	r2, r0
 8001d08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	3303      	adds	r3, #3
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3338      	adds	r3, #56	; 0x38
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	333c      	adds	r3, #60	; 0x3c
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	3340      	adds	r3, #64	; 0x40
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d3ad      	bcc.n	8001cc8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e044      	b.n	8001dfc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d3b5      	bcc.n	8001d72 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	687e      	ldr	r6, [r7, #4]
 8001e0e:	466d      	mov	r5, sp
 8001e10:	f106 0410 	add.w	r4, r6, #16
 8001e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	602b      	str	r3, [r5, #0]
 8001e1c:	1d33      	adds	r3, r6, #4
 8001e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f004 f9a7 	bl	8006174 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f001 fb8a 	bl	8003558 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_PCD_Start+0x16>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e012      	b.n	8001e8a <HAL_PCD_Start+0x3c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 f94d 	bl	8006110 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f006 fb01 	bl	8008482 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f006 fb06 	bl	80084b0 <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eae:	d102      	bne.n	8001eb6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fb4d 	bl	8002550 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f006 faf8 	bl	80084b0 <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eca:	d112      	bne.n	8001ef2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f008 fa4c 	bl	800a382 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001eea:	2100      	movs	r1, #0
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f91e 	bl	800212e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f006 fada 	bl	80084b0 <USB_ReadInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f06:	d10b      	bne.n	8001f20 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f1a:	b292      	uxth	r2, r2
 8001f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f006 fac3 	bl	80084b0 <USB_ReadInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f34:	d10b      	bne.n	8001f4e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f006 faac 	bl	80084b0 <USB_ReadInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f62:	d133      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	b292      	uxth	r2, r2
 8001f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0208 	bic.w	r2, r2, #8
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f008 fbdf 	bl	800a76c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f008 fa20 	bl	800a3f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f006 fa6d 	bl	80084b0 <USB_ReadInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fe0:	d126      	bne.n	8002030 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0208 	orr.w	r2, r2, #8
 8001ff4:	b292      	uxth	r2, r2
 8001ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200c:	b292      	uxth	r2, r2
 800200e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0204 	orr.w	r2, r2, #4
 8002024:	b292      	uxth	r2, r2
 8002026:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f008 f9c8 	bl	800a3c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f006 fa3b 	bl	80084b0 <USB_ReadInterrupts>
 800203a:	4603      	mov	r3, r0
 800203c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	d13f      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002056:	b292      	uxth	r2, r2
 8002058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d12b      	bne.n	80020be <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800206e:	b29a      	uxth	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0204 	orr.w	r2, r2, #4
 8002078:	b292      	uxth	r2, r2
 800207a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002086:	b29a      	uxth	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0208 	orr.w	r2, r2, #8
 8002090:	b292      	uxth	r2, r2
 8002092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020b4:	2101      	movs	r1, #1
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f008 fb58 	bl	800a76c <HAL_PCDEx_LPM_Callback>
 80020bc:	e002      	b.n	80020c4 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f008 f97e 	bl	800a3c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f006 f9f1 	bl	80084b0 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d8:	d10e      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020ec:	b292      	uxth	r2, r2
 80020ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f008 f937 	bl	800a366 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f006 f9d7 	bl	80084b0 <USB_ReadInterrupts>
 8002102:	4603      	mov	r3, r0
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800210c:	d10b      	bne.n	8002126 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002116:	b29a      	uxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002120:	b292      	uxth	r2, r2
 8002122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_PCD_SetAddress+0x1a>
 8002144:	2302      	movs	r3, #2
 8002146:	e013      	b.n	8002170 <HAL_PCD_SetAddress+0x42>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f006 f97a 	bl	800845a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	70fb      	strb	r3, [r7, #3]
 800218a:	460b      	mov	r3, r1
 800218c:	803b      	strh	r3, [r7, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da0e      	bge.n	80021bc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	705a      	strb	r2, [r3, #1]
 80021ba:	e00e      	b.n	80021da <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 0207 	and.w	r2, r3, #7
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021e6:	883a      	ldrh	r2, [r7, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	78ba      	ldrb	r2, [r7, #2]
 80021f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002204:	78bb      	ldrb	r3, [r7, #2]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d102      	bne.n	8002210 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_PCD_EP_Open+0xa6>
 800221a:	2302      	movs	r3, #2
 800221c:	e00e      	b.n	800223c <HAL_PCD_EP_Open+0xc4>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68f9      	ldr	r1, [r7, #12]
 800222c:	4618      	mov	r0, r3
 800222e:	f003 ffc3 	bl	80061b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800223a:	7afb      	ldrb	r3, [r7, #11]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002254:	2b00      	cmp	r3, #0
 8002256:	da0e      	bge.n	8002276 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	705a      	strb	r2, [r3, #1]
 8002274:	e00e      	b.n	8002294 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	f003 0207 	and.w	r2, r3, #7
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	b2da      	uxtb	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_PCD_EP_Close+0x6a>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e00e      	b.n	80022cc <HAL_PCD_EP_Close+0x88>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68f9      	ldr	r1, [r7, #12]
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 fae9 	bl	8006894 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	460b      	mov	r3, r1
 80022e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	f003 0207 	and.w	r2, r3, #7
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4413      	add	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2200      	movs	r2, #0
 8002312:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	b2da      	uxtb	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002320:	7afb      	ldrb	r3, [r7, #11]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6979      	ldr	r1, [r7, #20]
 8002330:	4618      	mov	r0, r3
 8002332:	f004 fc9c 	bl	8006c6e <USB_EPStartXfer>
 8002336:	e005      	b.n	8002344 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6979      	ldr	r1, [r7, #20]
 800233e:	4618      	mov	r0, r3
 8002340:	f004 fc95 	bl	8006c6e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 0207 	and.w	r2, r3, #7
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002370:	681b      	ldr	r3, [r3, #0]
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	460b      	mov	r3, r1
 800238c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4413      	add	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2200      	movs	r2, #0
 80023c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2201      	movs	r2, #1
 80023c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ca:	7afb      	ldrb	r3, [r7, #11]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6979      	ldr	r1, [r7, #20]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 fc41 	bl	8006c6e <USB_EPStartXfer>
 80023ec:	e005      	b.n	80023fa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6979      	ldr	r1, [r7, #20]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 fc3a 	bl	8006c6e <USB_EPStartXfer>
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 0207 	and.w	r2, r3, #7
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	d901      	bls.n	8002422 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e03e      	b.n	80024a0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002422:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002426:	2b00      	cmp	r3, #0
 8002428:	da0e      	bge.n	8002448 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	705a      	strb	r2, [r3, #1]
 8002446:	e00c      	b.n	8002462 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_PCD_EP_SetStall+0x7e>
 800247e:	2302      	movs	r3, #2
 8002480:	e00e      	b.n	80024a0 <HAL_PCD_EP_SetStall+0x9c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68f9      	ldr	r1, [r7, #12]
 8002490:	4618      	mov	r0, r3
 8002492:	f005 fee3 	bl	800825c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 020f 	and.w	r2, r3, #15
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d901      	bls.n	80024c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e040      	b.n	8002548 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	da0e      	bge.n	80024ec <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	705a      	strb	r2, [r3, #1]
 80024ea:	e00e      	b.n	800250a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	f003 0207 	and.w	r2, r3, #7
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	b2da      	uxtb	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_PCD_EP_ClrStall+0x82>
 8002526:	2302      	movs	r3, #2
 8002528:	e00e      	b.n	8002548 <HAL_PCD_EP_ClrStall+0xa0>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68f9      	ldr	r1, [r7, #12]
 8002538:	4618      	mov	r0, r3
 800253a:	f005 fee0 	bl	80082fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08e      	sub	sp, #56	; 0x38
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002558:	e2d6      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002562:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002564:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002570:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002574:	2b00      	cmp	r3, #0
 8002576:	f040 815b 	bne.w	8002830 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800257a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d150      	bne.n	8002626 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002594:	81fb      	strh	r3, [r7, #14]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	89fb      	ldrh	r3, [r7, #14]
 800259c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3328      	adds	r3, #40	; 0x28
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	441a      	add	r2, r3
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025e4:	2100      	movs	r1, #0
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f007 fea3 	bl	800a332 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8287 	beq.w	8002b08 <PCD_EP_ISR_Handler+0x5b8>
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 8282 	bne.w	8002b08 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002610:	b2da      	uxtb	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b292      	uxth	r2, r2
 8002618:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002624:	e270      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002636:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800263c:	2b00      	cmp	r3, #0
 800263e:	d032      	beq.n	80026a6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4413      	add	r3, r2
 800265a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800267a:	b29b      	uxth	r3, r3
 800267c:	f005 ff6a 	bl	8008554 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29a      	uxth	r2, r3
 8002688:	f640 738f 	movw	r3, #3983	; 0xf8f
 800268c:	4013      	ands	r3, r2
 800268e:	823b      	strh	r3, [r7, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	8a3a      	ldrh	r2, [r7, #16]
 8002696:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800269a:	b292      	uxth	r2, r2
 800269c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f007 fe1a 	bl	800a2d8 <HAL_PCD_SetupStageCallback>
 80026a4:	e230      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f280 822c 	bge.w	8002b08 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026bc:	4013      	ands	r3, r2
 80026be:	83bb      	strh	r3, [r7, #28]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	8bba      	ldrh	r2, [r7, #28]
 80026c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ca:	b292      	uxth	r2, r2
 80026cc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <PCD_EP_ISR_Handler+0x1e2>
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	6959      	ldr	r1, [r3, #20]
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002716:	b29b      	uxth	r3, r3
 8002718:	f005 ff1c 	bl	8008554 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	441a      	add	r2, r3
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800272a:	2100      	movs	r1, #0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f007 fde5 	bl	800a2fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 81e2 	bne.w	8002b08 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4413      	add	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d112      	bne.n	8002792 <PCD_EP_ISR_Handler+0x242>
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002776:	b29a      	uxth	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	801a      	strh	r2, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278a:	b29a      	uxth	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	e02f      	b.n	80027f2 <PCD_EP_ISR_Handler+0x2a2>
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b3e      	cmp	r3, #62	; 0x3e
 8002798:	d813      	bhi.n	80027c2 <PCD_EP_ISR_Handler+0x272>
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <PCD_EP_ISR_Handler+0x264>
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	3301      	adds	r3, #1
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	029b      	lsls	r3, r3, #10
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	801a      	strh	r2, [r3, #0]
 80027c0:	e017      	b.n	80027f2 <PCD_EP_ISR_Handler+0x2a2>
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <PCD_EP_ISR_Handler+0x28c>
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	3b01      	subs	r3, #1
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	b29b      	uxth	r3, r3
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002802:	827b      	strh	r3, [r7, #18]
 8002804:	8a7b      	ldrh	r3, [r7, #18]
 8002806:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800280a:	827b      	strh	r3, [r7, #18]
 800280c:	8a7b      	ldrh	r3, [r7, #18]
 800280e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002812:	827b      	strh	r3, [r7, #18]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	8a7b      	ldrh	r3, [r7, #18]
 800281a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	b29b      	uxth	r3, r3
 800282c:	8013      	strh	r3, [r2, #0]
 800282e:	e16b      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002842:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002846:	2b00      	cmp	r3, #0
 8002848:	f280 80e4 	bge.w	8002a14 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29a      	uxth	r2, r3
 800285e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002862:	4013      	ands	r3, r2
 8002864:	853b      	strh	r3, [r7, #40]	; 0x28
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800287a:	b292      	uxth	r2, r2
 800287c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800287e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	7b1b      	ldrb	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d120      	bne.n	80028de <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80028c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8083 	beq.w	80029d0 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	6959      	ldr	r1, [r3, #20]
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	88da      	ldrh	r2, [r3, #6]
 80028d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028d8:	f005 fe3c 	bl	8008554 <USB_ReadPMA>
 80028dc:	e078      	b.n	80029d0 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	78db      	ldrb	r3, [r3, #3]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d108      	bne.n	80028f8 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028e8:	461a      	mov	r2, r3
 80028ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f919 	bl	8002b24 <HAL_PCD_EP_DB_Receive>
 80028f2:	4603      	mov	r3, r0
 80028f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028f6:	e06b      	b.n	80029d0 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002912:	847b      	strh	r3, [r7, #34]	; 0x22
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800292c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002930:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002934:	b29b      	uxth	r3, r3
 8002936:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01f      	beq.n	8002992 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	4413      	add	r3, r2
 800296c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002976:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002978:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800297a:	2b00      	cmp	r3, #0
 800297c:	d028      	beq.n	80029d0 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	6959      	ldr	r1, [r3, #20]
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	891a      	ldrh	r2, [r3, #8]
 800298a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800298c:	f005 fde2 	bl	8008554 <USB_ReadPMA>
 8002990:	e01e      	b.n	80029d0 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	6959      	ldr	r1, [r3, #20]
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	895a      	ldrh	r2, [r3, #10]
 80029ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029cc:	f005 fdc2 	bl	8008554 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029d6:	441a      	add	r2, r3
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029e2:	441a      	add	r2, r3
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <PCD_EP_ISR_Handler+0x4aa>
 80029f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d206      	bcs.n	8002a08 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4619      	mov	r1, r3
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f007 fc7b 	bl	800a2fc <HAL_PCD_DataOutStageCallback>
 8002a06:	e005      	b.n	8002a14 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 f92d 	bl	8006c6e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d074      	beq.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4c:	843b      	strh	r3, [r7, #32]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	441a      	add	r2, r3
 8002a5c:	8c3b      	ldrh	r3, [r7, #32]
 8002a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	78db      	ldrb	r3, [r3, #3]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d144      	bne.n	8002afc <PCD_EP_ISR_Handler+0x5ac>
 8002a72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d13f      	bne.n	8002afc <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	4413      	add	r3, r2
 8002a96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	8bfb      	ldrh	r3, [r7, #30]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d906      	bls.n	8002aba <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	699a      	ldr	r2, [r3, #24]
 8002ab0:	8bfb      	ldrh	r3, [r7, #30]
 8002ab2:	1ad2      	subs	r2, r2, r3
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	619a      	str	r2, [r3, #24]
 8002ab8:	e002      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d106      	bne.n	8002ad6 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f007 fc2f 	bl	800a332 <HAL_PCD_DataInStageCallback>
 8002ad4:	e018      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	8bfb      	ldrh	r3, [r7, #30]
 8002adc:	441a      	add	r2, r3
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	8bfb      	ldrh	r3, [r7, #30]
 8002ae8:	441a      	add	r2, r3
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 f8ba 	bl	8006c6e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002afa:	e005      	b.n	8002b08 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002afc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002afe:	461a      	mov	r2, r3
 8002b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f917 	bl	8002d36 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	b21b      	sxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f6ff ad20 	blt.w	800255a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3738      	adds	r7, #56	; 0x38
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d07c      	beq.n	8002c36 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b60:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	8b7b      	ldrh	r3, [r7, #26]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d306      	bcc.n	8002b7a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	8b7b      	ldrh	r3, [r7, #26]
 8002b72:	1ad2      	subs	r2, r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	619a      	str	r2, [r3, #24]
 8002b78:	e002      	b.n	8002b80 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d123      	bne.n	8002bd0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	833b      	strh	r3, [r7, #24]
 8002ba4:	8b3b      	ldrh	r3, [r7, #24]
 8002ba6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002baa:	833b      	strh	r3, [r7, #24]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	8b3b      	ldrh	r3, [r7, #24]
 8002bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01f      	beq.n	8002c1a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf4:	82fb      	strh	r3, [r7, #22]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	441a      	add	r2, r3
 8002c04:	8afb      	ldrh	r3, [r7, #22]
 8002c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c1a:	8b7b      	ldrh	r3, [r7, #26]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8085 	beq.w	8002d2c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6959      	ldr	r1, [r3, #20]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	891a      	ldrh	r2, [r3, #8]
 8002c2e:	8b7b      	ldrh	r3, [r7, #26]
 8002c30:	f005 fc90 	bl	8008554 <USB_ReadPMA>
 8002c34:	e07a      	b.n	8002d2c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c5a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	8b7b      	ldrh	r3, [r7, #26]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d306      	bcc.n	8002c74 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	8b7b      	ldrh	r3, [r7, #26]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	619a      	str	r2, [r3, #24]
 8002c72:	e002      	b.n	8002c7a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d123      	bne.n	8002cca <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9c:	83fb      	strh	r3, [r7, #30]
 8002c9e:	8bfb      	ldrh	r3, [r7, #30]
 8002ca0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ca4:	83fb      	strh	r3, [r7, #30]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	441a      	add	r2, r3
 8002cb4:	8bfb      	ldrh	r3, [r7, #30]
 8002cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11f      	bne.n	8002d14 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	83bb      	strh	r3, [r7, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	441a      	add	r2, r3
 8002cfe:	8bbb      	ldrh	r3, [r7, #28]
 8002d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d14:	8b7b      	ldrh	r3, [r7, #26]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6959      	ldr	r1, [r3, #20]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	895a      	ldrh	r2, [r3, #10]
 8002d26:	8b7b      	ldrh	r3, [r7, #26]
 8002d28:	f005 fc14 	bl	8008554 <USB_ReadPMA>
    }
  }

  return count;
 8002d2c:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b0a2      	sub	sp, #136	; 0x88
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 81c5 	beq.w	80030da <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d907      	bls.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d8c:	1ad2      	subs	r2, r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	619a      	str	r2, [r3, #24]
 8002d92:	e002      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2200      	movs	r2, #0
 8002d98:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 80b9 	bne.w	8002f16 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d126      	bne.n	8002dfa <HAL_PCD_EP_DB_Transmit+0xc4>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	4413      	add	r3, r2
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	00da      	lsls	r2, r3, #3
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	4413      	add	r3, r2
 8002dce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	e01a      	b.n	8002e30 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	785b      	ldrb	r3, [r3, #1]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d116      	bne.n	8002e30 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	4413      	add	r3, r2
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	00da      	lsls	r2, r3, #3
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	4413      	add	r3, r2
 8002e24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	623b      	str	r3, [r7, #32]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	785b      	ldrb	r3, [r3, #1]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d126      	bne.n	8002e8c <HAL_PCD_EP_DB_Transmit+0x156>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4413      	add	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	00da      	lsls	r2, r3, #3
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	801a      	strh	r2, [r3, #0]
 8002e8a:	e017      	b.n	8002ebc <HAL_PCD_EP_DB_Transmit+0x186>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d113      	bne.n	8002ebc <HAL_PCD_EP_DB_Transmit+0x186>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	00da      	lsls	r2, r3, #3
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f007 fa35 	bl	800a332 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 82d2 	beq.w	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	827b      	strh	r3, [r7, #18]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	441a      	add	r2, r3
 8002efe:	8a7b      	ldrh	r3, [r7, #18]
 8002f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	8013      	strh	r3, [r2, #0]
 8002f14:	e2b0      	b.n	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d021      	beq.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	f040 8284 	bne.w	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f78:	441a      	add	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f86:	441a      	add	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6a1a      	ldr	r2, [r3, #32]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d309      	bcc.n	8002fac <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa4:	1ad2      	subs	r2, r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	621a      	str	r2, [r3, #32]
 8002faa:	e015      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8002fb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fb8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fc2:	e009      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	785b      	ldrb	r3, [r3, #1]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d155      	bne.n	800308c <HAL_PCD_EP_DB_Transmit+0x356>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	4413      	add	r3, r2
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	00da      	lsls	r2, r3, #3
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	4413      	add	r3, r2
 8003002:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003006:	637b      	str	r3, [r7, #52]	; 0x34
 8003008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300a:	2b00      	cmp	r3, #0
 800300c:	d112      	bne.n	8003034 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003018:	b29a      	uxth	r2, r3
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800302c:	b29a      	uxth	r2, r3
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	801a      	strh	r2, [r3, #0]
 8003032:	e047      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	2b3e      	cmp	r3, #62	; 0x3e
 8003038:	d811      	bhi.n	800305e <HAL_PCD_EP_DB_Transmit+0x328>
 800303a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_PCD_EP_DB_Transmit+0x31a>
 800304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304c:	3301      	adds	r3, #1
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003052:	b29b      	uxth	r3, r3
 8003054:	029b      	lsls	r3, r3, #10
 8003056:	b29a      	uxth	r2, r3
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	e032      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800305e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
 8003064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_PCD_EP_DB_Transmit+0x33e>
 800306e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003070:	3b01      	subs	r3, #1
 8003072:	64bb      	str	r3, [r7, #72]	; 0x48
 8003074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003076:	b29b      	uxth	r3, r3
 8003078:	029b      	lsls	r3, r3, #10
 800307a:	b29b      	uxth	r3, r3
 800307c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003084:	b29a      	uxth	r2, r3
 8003086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003088:	801a      	strh	r2, [r3, #0]
 800308a:	e01b      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d117      	bne.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	643b      	str	r3, [r7, #64]	; 0x40
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a8:	4413      	add	r3, r2
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	00da      	lsls	r2, r3, #3
 80030b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b4:	4413      	add	r3, r2
 80030b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030be:	b29a      	uxth	r2, r3
 80030c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6959      	ldr	r1, [r3, #20]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	891a      	ldrh	r2, [r3, #8]
 80030d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f005 f9fc 	bl	80084d0 <USB_WritePMA>
 80030d8:	e1ce      	b.n	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800310a:	429a      	cmp	r2, r3
 800310c:	d307      	bcc.n	800311e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003116:	1ad2      	subs	r2, r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	619a      	str	r2, [r3, #24]
 800311c:	e002      	b.n	8003124 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 80c4 	bne.w	80032b6 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d126      	bne.n	8003184 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003144:	b29b      	uxth	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314a:	4413      	add	r3, r2
 800314c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	00da      	lsls	r2, r3, #3
 8003154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003156:	4413      	add	r3, r2
 8003158:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800315c:	66bb      	str	r3, [r7, #104]	; 0x68
 800315e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003168:	b29a      	uxth	r2, r3
 800316a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800316c:	801a      	strh	r2, [r3, #0]
 800316e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317c:	b29a      	uxth	r2, r3
 800317e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	e01a      	b.n	80031ba <HAL_PCD_EP_DB_Transmit+0x484>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d116      	bne.n	80031ba <HAL_PCD_EP_DB_Transmit+0x484>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	677b      	str	r3, [r7, #116]	; 0x74
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a0:	4413      	add	r3, r2
 80031a2:	677b      	str	r3, [r7, #116]	; 0x74
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	00da      	lsls	r2, r3, #3
 80031aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ac:	4413      	add	r3, r2
 80031ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031b2:	673b      	str	r3, [r7, #112]	; 0x70
 80031b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b6:	2200      	movs	r2, #0
 80031b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	67bb      	str	r3, [r7, #120]	; 0x78
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	785b      	ldrb	r3, [r3, #1]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d12f      	bne.n	8003228 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d8:	b29b      	uxth	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e0:	4413      	add	r3, r2
 80031e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	00da      	lsls	r2, r3, #3
 80031ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f0:	4413      	add	r3, r2
 80031f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	b29b      	uxth	r3, r3
 8003202:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003206:	b29a      	uxth	r2, r3
 8003208:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800321e:	b29a      	uxth	r2, r3
 8003220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	e017      	b.n	8003258 <HAL_PCD_EP_DB_Transmit+0x522>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d113      	bne.n	8003258 <HAL_PCD_EP_DB_Transmit+0x522>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003238:	b29b      	uxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323e:	4413      	add	r3, r2
 8003240:	67bb      	str	r3, [r7, #120]	; 0x78
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	00da      	lsls	r2, r3, #3
 8003248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324a:	4413      	add	r3, r2
 800324c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003250:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003254:	2200      	movs	r2, #0
 8003256:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f007 f867 	bl	800a332 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 8104 	bne.w	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	441a      	add	r2, r3
 800329c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	8013      	strh	r3, [r2, #0]
 80032b4:	e0e0      	b.n	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d121      	bne.n	8003304 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	441a      	add	r2, r3
 80032ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003300:	b29b      	uxth	r3, r3
 8003302:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800330a:	2b01      	cmp	r3, #1
 800330c:	f040 80b4 	bne.w	8003478 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003318:	441a      	add	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003326:	441a      	add	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	429a      	cmp	r2, r3
 8003336:	d309      	bcc.n	800334c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6a1a      	ldr	r2, [r3, #32]
 8003342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003344:	1ad2      	subs	r2, r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	621a      	str	r2, [r3, #32]
 800334a:	e015      	b.n	8003378 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d107      	bne.n	8003364 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8003354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003358:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003362:	e009      	b.n	8003378 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	667b      	str	r3, [r7, #100]	; 0x64
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	785b      	ldrb	r3, [r3, #1]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d155      	bne.n	8003432 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339a:	4413      	add	r3, r2
 800339c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	00da      	lsls	r2, r3, #3
 80033a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a6:	4413      	add	r3, r2
 80033a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d112      	bne.n	80033da <HAL_PCD_EP_DB_Transmit+0x6a4>
 80033b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033be:	b29a      	uxth	r2, r3
 80033c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c2:	801a      	strh	r2, [r3, #0]
 80033c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d6:	801a      	strh	r2, [r3, #0]
 80033d8:	e044      	b.n	8003464 <HAL_PCD_EP_DB_Transmit+0x72e>
 80033da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033dc:	2b3e      	cmp	r3, #62	; 0x3e
 80033de:	d811      	bhi.n	8003404 <HAL_PCD_EP_DB_Transmit+0x6ce>
 80033e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	657b      	str	r3, [r7, #84]	; 0x54
 80033e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x6c0>
 80033f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f2:	3301      	adds	r3, #1
 80033f4:	657b      	str	r3, [r7, #84]	; 0x54
 80033f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	e02f      	b.n	8003464 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	657b      	str	r3, [r7, #84]	; 0x54
 800340a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <HAL_PCD_EP_DB_Transmit+0x6e4>
 8003414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003416:	3b01      	subs	r3, #1
 8003418:	657b      	str	r3, [r7, #84]	; 0x54
 800341a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341c:	b29b      	uxth	r3, r3
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	b29b      	uxth	r3, r3
 8003422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342a:	b29a      	uxth	r2, r3
 800342c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800342e:	801a      	strh	r2, [r3, #0]
 8003430:	e018      	b.n	8003464 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d114      	bne.n	8003464 <HAL_PCD_EP_DB_Transmit+0x72e>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003448:	4413      	add	r3, r2
 800344a:	667b      	str	r3, [r7, #100]	; 0x64
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	00da      	lsls	r2, r3, #3
 8003452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003454:	4413      	add	r3, r2
 8003456:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800345a:	663b      	str	r3, [r7, #96]	; 0x60
 800345c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345e:	b29a      	uxth	r2, r3
 8003460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003462:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6959      	ldr	r1, [r3, #20]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	895a      	ldrh	r2, [r3, #10]
 8003470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003472:	b29b      	uxth	r3, r3
 8003474:	f005 f82c 	bl	80084d0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003492:	823b      	strh	r3, [r7, #16]
 8003494:	8a3b      	ldrh	r3, [r7, #16]
 8003496:	f083 0310 	eor.w	r3, r3, #16
 800349a:	823b      	strh	r3, [r7, #16]
 800349c:	8a3b      	ldrh	r3, [r7, #16]
 800349e:	f083 0320 	eor.w	r3, r3, #32
 80034a2:	823b      	strh	r3, [r7, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	441a      	add	r2, r3
 80034b2:	8a3b      	ldrh	r3, [r7, #16]
 80034b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3788      	adds	r7, #136	; 0x88
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b087      	sub	sp, #28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
 80034e0:	4613      	mov	r3, r2
 80034e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034e4:	897b      	ldrh	r3, [r7, #10]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	897b      	ldrh	r3, [r7, #10]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e009      	b.n	800351c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003508:	897a      	ldrh	r2, [r7, #10]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800351c:	893b      	ldrh	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d107      	bne.n	8003532 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	b29a      	uxth	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	80da      	strh	r2, [r3, #6]
 8003530:	e00b      	b.n	800354a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2201      	movs	r2, #1
 8003536:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	b29a      	uxth	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	b29a      	uxth	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800357c:	b29b      	uxth	r3, r3
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003590:	b29b      	uxth	r3, r3
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d141      	bne.n	800363e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ba:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c6:	d131      	bne.n	800362c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035c8:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ce:	4a46      	ldr	r2, [pc, #280]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035d8:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035e0:	4a41      	ldr	r2, [pc, #260]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035e8:	4b40      	ldr	r3, [pc, #256]	; (80036ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2232      	movs	r2, #50	; 0x32
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	4a3f      	ldr	r2, [pc, #252]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	0c9b      	lsrs	r3, r3, #18
 80035fa:	3301      	adds	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035fe:	e002      	b.n	8003606 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3b01      	subs	r3, #1
 8003604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003606:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003612:	d102      	bne.n	800361a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f2      	bne.n	8003600 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800361a:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003626:	d158      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e057      	b.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003632:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800363c:	e04d      	b.n	80036da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003644:	d141      	bne.n	80036ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003646:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800364e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003652:	d131      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365a:	4a23      	ldr	r2, [pc, #140]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003664:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800366c:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2232      	movs	r2, #50	; 0x32
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	0c9b      	lsrs	r3, r3, #18
 8003686:	3301      	adds	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800368a:	e002      	b.n	8003692 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3b01      	subs	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d102      	bne.n	80036a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f2      	bne.n	800368c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d112      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e011      	b.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036c8:	e007      	b.n	80036da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40007000 	.word	0x40007000
 80036ec:	20000028 	.word	0x20000028
 80036f0:	431bde83 	.word	0x431bde83

080036f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003702:	6093      	str	r3, [r2, #8]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40007000 	.word	0x40007000

08003714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e308      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d075      	beq.n	800381e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003732:	4ba3      	ldr	r3, [pc, #652]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800373c:	4ba0      	ldr	r3, [pc, #640]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d102      	bne.n	8003752 <HAL_RCC_OscConfig+0x3e>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d002      	beq.n	8003758 <HAL_RCC_OscConfig+0x44>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d10b      	bne.n	8003770 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	4b99      	ldr	r3, [pc, #612]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05b      	beq.n	800381c <HAL_RCC_OscConfig+0x108>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d157      	bne.n	800381c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e2e3      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d106      	bne.n	8003788 <HAL_RCC_OscConfig+0x74>
 800377a:	4b91      	ldr	r3, [pc, #580]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a90      	ldr	r2, [pc, #576]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e01d      	b.n	80037c4 <HAL_RCC_OscConfig+0xb0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x98>
 8003792:	4b8b      	ldr	r3, [pc, #556]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a8a      	ldr	r2, [pc, #552]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a87      	ldr	r2, [pc, #540]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0xb0>
 80037ac:	4b84      	ldr	r3, [pc, #528]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a83      	ldr	r2, [pc, #524]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b81      	ldr	r3, [pc, #516]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a80      	ldr	r2, [pc, #512]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fd fd32 	bl	8001234 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fd fd2e 	bl	8001234 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e2a8      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e6:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0xc0>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fd fd1e 	bl	8001234 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fd fd1a 	bl	8001234 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e294      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380e:	4b6c      	ldr	r3, [pc, #432]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0xe8>
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d075      	beq.n	8003916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382a:	4b65      	ldr	r3, [pc, #404]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003834:	4b62      	ldr	r3, [pc, #392]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b0c      	cmp	r3, #12
 8003842:	d102      	bne.n	800384a <HAL_RCC_OscConfig+0x136>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d002      	beq.n	8003850 <HAL_RCC_OscConfig+0x13c>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d11f      	bne.n	8003890 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003850:	4b5b      	ldr	r3, [pc, #364]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_OscConfig+0x154>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e267      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b55      	ldr	r3, [pc, #340]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	4952      	ldr	r1, [pc, #328]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800387c:	4b51      	ldr	r3, [pc, #324]	; (80039c4 <HAL_RCC_OscConfig+0x2b0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd fc8b 	bl	800119c <HAL_InitTick>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d043      	beq.n	8003914 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e253      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d023      	beq.n	80038e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003898:	4b49      	ldr	r3, [pc, #292]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a48      	ldr	r2, [pc, #288]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800389e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd fcc6 	bl	8001234 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ac:	f7fd fcc2 	bl	8001234 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e23c      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038be:	4b40      	ldr	r3, [pc, #256]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ca:	4b3d      	ldr	r3, [pc, #244]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	061b      	lsls	r3, r3, #24
 80038d8:	4939      	ldr	r1, [pc, #228]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
 80038de:	e01a      	b.n	8003916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e0:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a36      	ldr	r2, [pc, #216]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80038e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd fca2 	bl	8001234 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fd fc9e 	bl	8001234 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e218      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003906:	4b2e      	ldr	r3, [pc, #184]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1e0>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d03c      	beq.n	800399c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01c      	beq.n	8003964 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392a:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	4a23      	ldr	r2, [pc, #140]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd fc7b 	bl	8001234 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003942:	f7fd fc77 	bl	8001234 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1f1      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ef      	beq.n	8003942 <HAL_RCC_OscConfig+0x22e>
 8003962:	e01b      	b.n	800399c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd fc5e 	bl	8001234 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397c:	f7fd fc5a 	bl	8001234 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1d4      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800398e:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ef      	bne.n	800397c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80ab 	beq.w	8003b00 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039ae:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2b4>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e005      	b.n	80039ca <HAL_RCC_OscConfig+0x2b6>
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	2000002c 	.word	0x2000002c
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	4baf      	ldr	r3, [pc, #700]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	4aae      	ldr	r2, [pc, #696]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6593      	str	r3, [r2, #88]	; 0x58
 80039da:	4bac      	ldr	r3, [pc, #688]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039e6:	2301      	movs	r3, #1
 80039e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	4ba9      	ldr	r3, [pc, #676]	; (8003c90 <HAL_RCC_OscConfig+0x57c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d118      	bne.n	8003a28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f6:	4ba6      	ldr	r3, [pc, #664]	; (8003c90 <HAL_RCC_OscConfig+0x57c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4aa5      	ldr	r2, [pc, #660]	; (8003c90 <HAL_RCC_OscConfig+0x57c>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a02:	f7fd fc17 	bl	8001234 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0a:	f7fd fc13 	bl	8001234 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e18d      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1c:	4b9c      	ldr	r3, [pc, #624]	; (8003c90 <HAL_RCC_OscConfig+0x57c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d108      	bne.n	8003a42 <HAL_RCC_OscConfig+0x32e>
 8003a30:	4b96      	ldr	r3, [pc, #600]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	4a95      	ldr	r2, [pc, #596]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a40:	e024      	b.n	8003a8c <HAL_RCC_OscConfig+0x378>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d110      	bne.n	8003a6c <HAL_RCC_OscConfig+0x358>
 8003a4a:	4b90      	ldr	r3, [pc, #576]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	4a8e      	ldr	r2, [pc, #568]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a5a:	4b8c      	ldr	r3, [pc, #560]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	4a8a      	ldr	r2, [pc, #552]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6a:	e00f      	b.n	8003a8c <HAL_RCC_OscConfig+0x378>
 8003a6c:	4b87      	ldr	r3, [pc, #540]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	4a86      	ldr	r2, [pc, #536]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a7c:	4b83      	ldr	r3, [pc, #524]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a82      	ldr	r2, [pc, #520]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d016      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fd fbce 	bl	8001234 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fd fbca 	bl	8001234 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e142      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab2:	4b76      	ldr	r3, [pc, #472]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ed      	beq.n	8003a9c <HAL_RCC_OscConfig+0x388>
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac2:	f7fd fbb7 	bl	8001234 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd fbb3 	bl	8001234 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e12b      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae0:	4b6a      	ldr	r3, [pc, #424]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ed      	bne.n	8003aca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aee:	7ffb      	ldrb	r3, [r7, #31]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af4:	4b65      	ldr	r3, [pc, #404]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	4a64      	ldr	r2, [pc, #400]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d03c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01c      	beq.n	8003b4e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b14:	4b5d      	ldr	r3, [pc, #372]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b1a:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd fb86 	bl	8001234 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b2c:	f7fd fb82 	bl	8001234 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0fc      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b3e:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ef      	beq.n	8003b2c <HAL_RCC_OscConfig+0x418>
 8003b4c:	e01b      	b.n	8003b86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b4e:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b54:	4a4d      	ldr	r2, [pc, #308]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fb69 	bl	8001234 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b66:	f7fd fb65 	bl	8001234 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e0df      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b78:	4b44      	ldr	r3, [pc, #272]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ef      	bne.n	8003b66 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80d3 	beq.w	8003d36 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b90:	4b3e      	ldr	r3, [pc, #248]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	f000 808d 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d15a      	bne.n	8003c5c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a38      	ldr	r2, [pc, #224]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd fb3f 	bl	8001234 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fd fb3b 	bl	8001234 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0b5      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bcc:	4b2f      	ldr	r3, [pc, #188]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd8:	4b2c      	ldr	r3, [pc, #176]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <HAL_RCC_OscConfig+0x580>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6a11      	ldr	r1, [r2, #32]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003be8:	3a01      	subs	r2, #1
 8003bea:	0112      	lsls	r2, r2, #4
 8003bec:	4311      	orrs	r1, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003bf2:	0212      	lsls	r2, r2, #8
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bfa:	0852      	lsrs	r2, r2, #1
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	0552      	lsls	r2, r2, #21
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c06:	0852      	lsrs	r2, r2, #1
 8003c08:	3a01      	subs	r2, #1
 8003c0a:	0652      	lsls	r2, r2, #25
 8003c0c:	4311      	orrs	r1, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c12:	06d2      	lsls	r2, r2, #27
 8003c14:	430a      	orrs	r2, r1
 8003c16:	491d      	ldr	r1, [pc, #116]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1a      	ldr	r2, [pc, #104]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c28:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd fafe 	bl	8001234 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fd fafa 	bl	8001234 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e074      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x528>
 8003c5a:	e06c      	b.n	8003d36 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c68:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <HAL_RCC_OscConfig+0x578>)
 8003c7a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fd fad6 	bl	8001234 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c8a:	e00e      	b.n	8003caa <HAL_RCC_OscConfig+0x596>
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40007000 	.word	0x40007000
 8003c94:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd facc 	bl	8001234 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e046      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003caa:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_RCC_OscConfig+0x62c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x584>
 8003cb6:	e03e      	b.n	8003d36 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e039      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cc4:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <HAL_RCC_OscConfig+0x62c>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 0203 	and.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d12c      	bne.n	8003d32 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d123      	bne.n	8003d32 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d11b      	bne.n	8003d32 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d113      	bne.n	8003d32 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	3b01      	subs	r3, #1
 8003d18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d109      	bne.n	8003d32 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e11e      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b91      	ldr	r3, [pc, #580]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b8e      	ldr	r3, [pc, #568]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 020f 	bic.w	r2, r3, #15
 8003d72:	498c      	ldr	r1, [pc, #560]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b8a      	ldr	r3, [pc, #552]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e106      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d073      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d129      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da0:	4b81      	ldr	r3, [pc, #516]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0f4      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003db0:	f000 f966 	bl	8004080 <RCC_GetSysClockFreqFromPLLSource>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <HAL_RCC_ClockConfig+0x268>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d93f      	bls.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d033      	beq.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d12f      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dde:	4b72      	ldr	r3, [pc, #456]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003de6:	4a70      	ldr	r2, [pc, #448]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e024      	b.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfc:	4b6a      	ldr	r3, [pc, #424]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0c6      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e0c:	4b66      	ldr	r3, [pc, #408]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0be      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e1c:	f000 f8ce 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4a61      	ldr	r2, [pc, #388]	; (8003fac <HAL_RCC_ClockConfig+0x268>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d909      	bls.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e32:	4a5d      	ldr	r2, [pc, #372]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e3e:	4b5a      	ldr	r3, [pc, #360]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 0203 	bic.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4957      	ldr	r1, [pc, #348]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fd f9f0 	bl	8001234 <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e58:	f7fd f9ec 	bl	8001234 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e095      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	4b4e      	ldr	r3, [pc, #312]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 020c 	and.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d1eb      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d023      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a42      	ldr	r2, [pc, #264]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ea2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eb8:	4a3b      	ldr	r2, [pc, #236]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4936      	ldr	r1, [pc, #216]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d105      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003eda:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4a32      	ldr	r2, [pc, #200]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d21d      	bcs.n	8003f30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 020f 	bic.w	r2, r3, #15
 8003efc:	4929      	ldr	r1, [pc, #164]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f04:	f7fd f996 	bl	8001234 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0c:	f7fd f992 	bl	8001234 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e03b      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1ed      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4917      	ldr	r1, [pc, #92]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	490f      	ldr	r1, [pc, #60]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f6e:	f000 f825 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	490c      	ldr	r1, [pc, #48]	; (8003fb0 <HAL_RCC_ClockConfig+0x26c>)
 8003f80:	5ccb      	ldrb	r3, [r1, r3]
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <HAL_RCC_ClockConfig+0x270>)
 8003f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x274>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fd f902 	bl	800119c <HAL_InitTick>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	04c4b400 	.word	0x04c4b400
 8003fb0:	0800a940 	.word	0x0800a940
 8003fb4:	20000028 	.word	0x20000028
 8003fb8:	2000002c 	.word	0x2000002c

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e047      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d102      	bne.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fe0:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	e03e      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d136      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	3301      	adds	r3, #1
 8004008:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d10c      	bne.n	800402a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004010:	4a1a      	ldr	r2, [pc, #104]	; (800407c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401a:	68d2      	ldr	r2, [r2, #12]
 800401c:	0a12      	lsrs	r2, r2, #8
 800401e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	617b      	str	r3, [r7, #20]
      break;
 8004028:	e00c      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800402a:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_RCC_GetSysClockFreq+0xbc>)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	4a10      	ldr	r2, [pc, #64]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004034:	68d2      	ldr	r2, [r2, #12]
 8004036:	0a12      	lsrs	r2, r2, #8
 8004038:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	617b      	str	r3, [r7, #20]
      break;
 8004042:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	0e5b      	lsrs	r3, r3, #25
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e001      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004064:	693b      	ldr	r3, [r7, #16]
}
 8004066:	4618      	mov	r0, r3
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	00f42400 	.word	0x00f42400
 800407c:	007a1200 	.word	0x007a1200

08004080 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d10c      	bne.n	80040be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040a4:	4a17      	ldr	r2, [pc, #92]	; (8004104 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ae:	68d2      	ldr	r2, [r2, #12]
 80040b0:	0a12      	lsrs	r2, r2, #8
 80040b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	617b      	str	r3, [r7, #20]
    break;
 80040bc:	e00c      	b.n	80040d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040be:	4a12      	ldr	r2, [pc, #72]	; (8004108 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040c8:	68d2      	ldr	r2, [r2, #12]
 80040ca:	0a12      	lsrs	r2, r2, #8
 80040cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040d0:	fb02 f303 	mul.w	r3, r2, r3
 80040d4:	617b      	str	r3, [r7, #20]
    break;
 80040d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0e5b      	lsrs	r3, r3, #25
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	3301      	adds	r3, #1
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80040f2:	687b      	ldr	r3, [r7, #4]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40021000 	.word	0x40021000
 8004104:	007a1200 	.word	0x007a1200
 8004108:	00f42400 	.word	0x00f42400

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004114:	2300      	movs	r3, #0
 8004116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004118:	2300      	movs	r3, #0
 800411a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8098 	beq.w	800425a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412e:	4b43      	ldr	r3, [pc, #268]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10d      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413a:	4b40      	ldr	r3, [pc, #256]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	4a3f      	ldr	r2, [pc, #252]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
 8004146:	4b3d      	ldr	r3, [pc, #244]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004152:	2301      	movs	r3, #1
 8004154:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004156:	4b3a      	ldr	r3, [pc, #232]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a39      	ldr	r2, [pc, #228]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004162:	f7fd f867 	bl	8001234 <HAL_GetTick>
 8004166:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004168:	e009      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416a:	f7fd f863 	bl	8001234 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d902      	bls.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	74fb      	strb	r3, [r7, #19]
        break;
 800417c:	e005      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800417e:	4b30      	ldr	r3, [pc, #192]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0ef      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d159      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004190:	4b2a      	ldr	r3, [pc, #168]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01e      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d019      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041ac:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041b8:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041c8:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	4a1b      	ldr	r2, [pc, #108]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fd f823 	bl	8001234 <HAL_GetTick>
 80041ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f0:	e00b      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fd f81f 	bl	8001234 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d902      	bls.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	74fb      	strb	r3, [r7, #19]
            break;
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800420a:	4b0c      	ldr	r3, [pc, #48]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ec      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421e:	4b07      	ldr	r3, [pc, #28]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4903      	ldr	r1, [pc, #12]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004234:	e008      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	74bb      	strb	r3, [r7, #18]
 800423a:	e005      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004248:	7c7b      	ldrb	r3, [r7, #17]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424e:	4ba6      	ldr	r3, [pc, #664]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	4aa5      	ldr	r2, [pc, #660]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004266:	4ba0      	ldr	r3, [pc, #640]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f023 0203 	bic.w	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	499c      	ldr	r1, [pc, #624]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004288:	4b97      	ldr	r3, [pc, #604]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f023 020c 	bic.w	r2, r3, #12
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4994      	ldr	r1, [pc, #592]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042aa:	4b8f      	ldr	r3, [pc, #572]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	498b      	ldr	r1, [pc, #556]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042cc:	4b86      	ldr	r3, [pc, #536]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	4983      	ldr	r1, [pc, #524]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042ee:	4b7e      	ldr	r3, [pc, #504]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	497a      	ldr	r1, [pc, #488]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004310:	4b75      	ldr	r3, [pc, #468]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	4972      	ldr	r1, [pc, #456]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004332:	4b6d      	ldr	r3, [pc, #436]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	4969      	ldr	r1, [pc, #420]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004354:	4b64      	ldr	r3, [pc, #400]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4961      	ldr	r1, [pc, #388]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004376:	4b5c      	ldr	r3, [pc, #368]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	4958      	ldr	r1, [pc, #352]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004394:	2b00      	cmp	r3, #0
 8004396:	d015      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004398:	4b53      	ldr	r3, [pc, #332]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	4950      	ldr	r1, [pc, #320]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b6:	d105      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b8:	4b4b      	ldr	r3, [pc, #300]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4a4a      	ldr	r2, [pc, #296]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d015      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043d0:	4b45      	ldr	r3, [pc, #276]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	4942      	ldr	r1, [pc, #264]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ee:	d105      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f0:	4b3d      	ldr	r3, [pc, #244]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a3c      	ldr	r2, [pc, #240]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d015      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004408:	4b37      	ldr	r3, [pc, #220]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4934      	ldr	r1, [pc, #208]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004426:	d105      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004428:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004432:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d015      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004440:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	4926      	ldr	r1, [pc, #152]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800445e:	d105      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004460:	4b21      	ldr	r3, [pc, #132]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a20      	ldr	r2, [pc, #128]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800446a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d015      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004478:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	4918      	ldr	r1, [pc, #96]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004496:	d105      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004498:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044b0:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	490a      	ldr	r1, [pc, #40]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ce:	d105      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80044dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000

080044ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e049      	b.n	8004592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fcea 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f001 f8dc 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d001      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e04a      	b.n	800464a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a21      	ldr	r2, [pc, #132]	; (8004658 <HAL_TIM_Base_Start_IT+0xbc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d018      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	d013      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_TIM_Base_Start_IT+0xc0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00e      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <HAL_TIM_Base_Start_IT+0xc4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d009      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1a      	ldr	r2, [pc, #104]	; (8004664 <HAL_TIM_Base_Start_IT+0xc8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a19      	ldr	r2, [pc, #100]	; (8004668 <HAL_TIM_Base_Start_IT+0xcc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d115      	bne.n	8004634 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	4b17      	ldr	r3, [pc, #92]	; (800466c <HAL_TIM_Base_Start_IT+0xd0>)
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b06      	cmp	r3, #6
 8004618:	d015      	beq.n	8004646 <HAL_TIM_Base_Start_IT+0xaa>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004620:	d011      	beq.n	8004646 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	e008      	b.n	8004646 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e000      	b.n	8004648 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40013400 	.word	0x40013400
 8004668:	40014000 	.word	0x40014000
 800466c:	00010007 	.word	0x00010007

08004670 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e049      	b.n	8004716 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fbca 	bl	8000e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f001 f81a 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <HAL_TIM_PWM_Start+0x24>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e03c      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d109      	bne.n	800475e <HAL_TIM_PWM_Start+0x3e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e02f      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x58>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e022      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d109      	bne.n	8004792 <HAL_TIM_PWM_Start+0x72>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e015      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b10      	cmp	r3, #16
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x8c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e008      	b.n	80047be <HAL_TIM_PWM_Start+0x9e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e097      	b.n	80048f6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_PWM_Start+0xb6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d4:	e023      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Start+0xc6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e4:	e01b      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0xd6>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f4:	e013      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b0c      	cmp	r3, #12
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start+0xe6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004804:	e00b      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b10      	cmp	r3, #16
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0xf6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004814:	e003      	b.n	800481e <HAL_TIM_PWM_Start+0xfe>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f001 fae4 	bl	8005df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a33      	ldr	r2, [pc, #204]	; (8004900 <HAL_TIM_PWM_Start+0x1e0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_TIM_PWM_Start+0x13e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a32      	ldr	r2, [pc, #200]	; (8004904 <HAL_TIM_PWM_Start+0x1e4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_TIM_PWM_Start+0x13e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a30      	ldr	r2, [pc, #192]	; (8004908 <HAL_TIM_PWM_Start+0x1e8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_TIM_PWM_Start+0x13e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2f      	ldr	r2, [pc, #188]	; (800490c <HAL_TIM_PWM_Start+0x1ec>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_TIM_PWM_Start+0x13e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2d      	ldr	r2, [pc, #180]	; (8004910 <HAL_TIM_PWM_Start+0x1f0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d101      	bne.n	8004862 <HAL_TIM_PWM_Start+0x142>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_TIM_PWM_Start+0x144>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a20      	ldr	r2, [pc, #128]	; (8004900 <HAL_TIM_PWM_Start+0x1e0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d018      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x194>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488a:	d013      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x194>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a20      	ldr	r2, [pc, #128]	; (8004914 <HAL_TIM_PWM_Start+0x1f4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00e      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x194>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1f      	ldr	r2, [pc, #124]	; (8004918 <HAL_TIM_PWM_Start+0x1f8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d009      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x194>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a17      	ldr	r2, [pc, #92]	; (8004904 <HAL_TIM_PWM_Start+0x1e4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x194>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a16      	ldr	r2, [pc, #88]	; (8004908 <HAL_TIM_PWM_Start+0x1e8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d115      	bne.n	80048e0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	4b18      	ldr	r3, [pc, #96]	; (800491c <HAL_TIM_PWM_Start+0x1fc>)
 80048bc:	4013      	ands	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d015      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x1d2>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d011      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048de:	e008      	b.n	80048f2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e000      	b.n	80048f4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40013400 	.word	0x40013400
 8004908:	40014000 	.word	0x40014000
 800490c:	40014400 	.word	0x40014400
 8004910:	40014800 	.word	0x40014800
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	00010007 	.word	0x00010007

08004920 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d109      	bne.n	8004948 <HAL_TIM_PWM_Start_DMA+0x28>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e03c      	b.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b04      	cmp	r3, #4
 800494c:	d109      	bne.n	8004962 <HAL_TIM_PWM_Start_DMA+0x42>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	bf0c      	ite	eq
 800495a:	2301      	moveq	r3, #1
 800495c:	2300      	movne	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e02f      	b.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d109      	bne.n	800497c <HAL_TIM_PWM_Start_DMA+0x5c>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e022      	b.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d109      	bne.n	8004996 <HAL_TIM_PWM_Start_DMA+0x76>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	e015      	b.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b10      	cmp	r3, #16
 800499a:	d109      	bne.n	80049b0 <HAL_TIM_PWM_Start_DMA+0x90>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e008      	b.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
 80049c8:	e1a1      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_TIM_PWM_Start_DMA+0xc4>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e03c      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x13e>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d109      	bne.n	80049fe <HAL_TIM_PWM_Start_DMA+0xde>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	bf0c      	ite	eq
 80049f6:	2301      	moveq	r3, #1
 80049f8:	2300      	movne	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e02f      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x13e>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start_DMA+0xf8>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e022      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x13e>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d109      	bne.n	8004a32 <HAL_TIM_PWM_Start_DMA+0x112>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e015      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x13e>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d109      	bne.n	8004a4c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e008      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x13e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	bf0c      	ite	eq
 8004a58:	2301      	moveq	r3, #1
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d034      	beq.n	8004acc <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start_DMA+0x152>
 8004a68:	887b      	ldrh	r3, [r7, #2]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e14d      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start_DMA+0x162>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a80:	e026      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start_DMA+0x172>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a90:	e01e      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start_DMA+0x182>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa0:	e016      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start_DMA+0x192>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ab0:	e00e      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac0:	e006      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aca:	e001      	b.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e11e      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b0c      	cmp	r3, #12
 8004ad4:	f200 80ae 	bhi.w	8004c34 <HAL_TIM_PWM_Start_DMA+0x314>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004c35 	.word	0x08004c35
 8004ae8:	08004c35 	.word	0x08004c35
 8004aec:	08004c35 	.word	0x08004c35
 8004af0:	08004b5d 	.word	0x08004b5d
 8004af4:	08004c35 	.word	0x08004c35
 8004af8:	08004c35 	.word	0x08004c35
 8004afc:	08004c35 	.word	0x08004c35
 8004b00:	08004ba5 	.word	0x08004ba5
 8004b04:	08004c35 	.word	0x08004c35
 8004b08:	08004c35 	.word	0x08004c35
 8004b0c:	08004c35 	.word	0x08004c35
 8004b10:	08004bed 	.word	0x08004bed
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	4a7f      	ldr	r2, [pc, #508]	; (8004d18 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	4a7e      	ldr	r2, [pc, #504]	; (8004d1c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	4a7d      	ldr	r2, [pc, #500]	; (8004d20 <HAL_TIM_PWM_Start_DMA+0x400>)
 8004b2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3334      	adds	r3, #52	; 0x34
 8004b38:	461a      	mov	r2, r3
 8004b3a:	887b      	ldrh	r3, [r7, #2]
 8004b3c:	f7fc fd3e 	bl	80015bc <HAL_DMA_Start_IT>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0e1      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b58:	60da      	str	r2, [r3, #12]
      break;
 8004b5a:	e06c      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	4a6d      	ldr	r2, [pc, #436]	; (8004d18 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	4a6c      	ldr	r2, [pc, #432]	; (8004d1c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	4a6b      	ldr	r2, [pc, #428]	; (8004d20 <HAL_TIM_PWM_Start_DMA+0x400>)
 8004b72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3338      	adds	r3, #56	; 0x38
 8004b80:	461a      	mov	r2, r3
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	f7fc fd1a 	bl	80015bc <HAL_DMA_Start_IT>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0bd      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ba0:	60da      	str	r2, [r3, #12]
      break;
 8004ba2:	e048      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	4a5b      	ldr	r2, [pc, #364]	; (8004d18 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	4a5a      	ldr	r2, [pc, #360]	; (8004d1c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4a59      	ldr	r2, [pc, #356]	; (8004d20 <HAL_TIM_PWM_Start_DMA+0x400>)
 8004bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	333c      	adds	r3, #60	; 0x3c
 8004bc8:	461a      	mov	r2, r3
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	f7fc fcf6 	bl	80015bc <HAL_DMA_Start_IT>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e099      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be8:	60da      	str	r2, [r3, #12]
      break;
 8004bea:	e024      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	4a49      	ldr	r2, [pc, #292]	; (8004d18 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	4a48      	ldr	r2, [pc, #288]	; (8004d1c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	4a47      	ldr	r2, [pc, #284]	; (8004d20 <HAL_TIM_PWM_Start_DMA+0x400>)
 8004c02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3340      	adds	r3, #64	; 0x40
 8004c10:	461a      	mov	r2, r3
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	f7fc fcd2 	bl	80015bc <HAL_DMA_Start_IT>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e075      	b.n	8004d0e <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c30:	60da      	str	r2, [r3, #12]
      break;
 8004c32:	e000      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8004c34:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 f8d8 	bl	8005df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a36      	ldr	r2, [pc, #216]	; (8004d24 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a35      	ldr	r2, [pc, #212]	; (8004d28 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00e      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a33      	ldr	r2, [pc, #204]	; (8004d2c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d009      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a32      	ldr	r2, [pc, #200]	; (8004d30 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a30      	ldr	r2, [pc, #192]	; (8004d34 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x35a>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <HAL_TIM_PWM_Start_DMA+0x35c>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a23      	ldr	r2, [pc, #140]	; (8004d24 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d013      	beq.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1a      	ldr	r2, [pc, #104]	; (8004d28 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d115      	bne.n	8004cf8 <HAL_TIM_PWM_Start_DMA+0x3d8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d015      	beq.n	8004d0a <HAL_TIM_PWM_Start_DMA+0x3ea>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d011      	beq.n	8004d0a <HAL_TIM_PWM_Start_DMA+0x3ea>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf6:	e008      	b.n	8004d0a <HAL_TIM_PWM_Start_DMA+0x3ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e000      	b.n	8004d0c <HAL_TIM_PWM_Start_DMA+0x3ec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	080055d7 	.word	0x080055d7
 8004d1c:	0800567f 	.word	0x0800567f
 8004d20:	08005545 	.word	0x08005545
 8004d24:	40012c00 	.word	0x40012c00
 8004d28:	40013400 	.word	0x40013400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40014400 	.word	0x40014400
 8004d34:	40014800 	.word	0x40014800
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	00010007 	.word	0x00010007

08004d44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e097      	b.n	8004e88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb ffb9 	bl	8000ce4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004d88:	f023 0307 	bic.w	r3, r3, #7
 8004d8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f000 fca5 	bl	80056e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004de4:	f023 030c 	bic.w	r3, r3, #12
 8004de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	4313      	orrs	r3, r2
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	011a      	lsls	r2, r3, #4
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	031b      	lsls	r3, r3, #12
 8004e14:	4313      	orrs	r3, r2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	4313      	orrs	r3, r2
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ea8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d110      	bne.n	8004ee2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d102      	bne.n	8004ecc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec6:	7b7b      	ldrb	r3, [r7, #13]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d001      	beq.n	8004ed0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e069      	b.n	8004fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee0:	e031      	b.n	8004f46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d110      	bne.n	8004f0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee8:	7bbb      	ldrb	r3, [r7, #14]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d102      	bne.n	8004ef4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eee:	7b3b      	ldrb	r3, [r7, #12]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d001      	beq.n	8004ef8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e055      	b.n	8004fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f08:	e01d      	b.n	8004f46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d108      	bne.n	8004f22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f10:	7bbb      	ldrb	r3, [r7, #14]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f16:	7b7b      	ldrb	r3, [r7, #13]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d102      	bne.n	8004f22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f1c:	7b3b      	ldrb	r3, [r7, #12]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d001      	beq.n	8004f26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e03e      	b.n	8004fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_TIM_Encoder_Start+0xc4>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d008      	beq.n	8004f64 <HAL_TIM_Encoder_Start+0xd4>
 8004f52:	e00f      	b.n	8004f74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 ff49 	bl	8005df4 <TIM_CCxChannelCmd>
      break;
 8004f62:	e016      	b.n	8004f92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 ff41 	bl	8005df4 <TIM_CCxChannelCmd>
      break;
 8004f72:	e00e      	b.n	8004f92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 ff39 	bl	8005df4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2201      	movs	r2, #1
 8004f88:	2104      	movs	r1, #4
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 ff32 	bl	8005df4 <TIM_CCxChannelCmd>
      break;
 8004f90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d122      	bne.n	8005008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d11b      	bne.n	8005008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0202 	mvn.w	r2, #2
 8004fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa76 	bl	80054e0 <HAL_TIM_IC_CaptureCallback>
 8004ff4:	e005      	b.n	8005002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa68 	bl	80054cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa79 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b04      	cmp	r3, #4
 8005014:	d122      	bne.n	800505c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b04      	cmp	r3, #4
 8005022:	d11b      	bne.n	800505c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0204 	mvn.w	r2, #4
 800502c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa4c 	bl	80054e0 <HAL_TIM_IC_CaptureCallback>
 8005048:	e005      	b.n	8005056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa3e 	bl	80054cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa4f 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b08      	cmp	r3, #8
 8005068:	d122      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b08      	cmp	r3, #8
 8005076:	d11b      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0208 	mvn.w	r2, #8
 8005080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2204      	movs	r2, #4
 8005086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fa22 	bl	80054e0 <HAL_TIM_IC_CaptureCallback>
 800509c:	e005      	b.n	80050aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa14 	bl	80054cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fa25 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b10      	cmp	r3, #16
 80050bc:	d122      	bne.n	8005104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d11b      	bne.n	8005104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0210 	mvn.w	r2, #16
 80050d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2208      	movs	r2, #8
 80050da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9f8 	bl	80054e0 <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9ea 	bl	80054cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f9fb 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b01      	cmp	r3, #1
 8005110:	d10e      	bne.n	8005130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b01      	cmp	r3, #1
 800511e:	d107      	bne.n	8005130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0201 	mvn.w	r2, #1
 8005128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fb f8fc 	bl	8000328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	2b80      	cmp	r3, #128	; 0x80
 800513c:	d10e      	bne.n	800515c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d107      	bne.n	800515c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 ff9e 	bl	8006098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d10e      	bne.n	800518a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b80      	cmp	r3, #128	; 0x80
 8005178:	d107      	bne.n	800518a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 ff91 	bl	80060ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d10e      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d107      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f9b3 	bl	800551c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d10e      	bne.n	80051e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d107      	bne.n	80051e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f06f 0220 	mvn.w	r2, #32
 80051da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 ff51 	bl	8006084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f0:	d10f      	bne.n	8005212 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005200:	d107      	bne.n	8005212 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800520a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 ff57 	bl	80060c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800521c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005220:	d10f      	bne.n	8005242 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800522c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005230:	d107      	bne.n	8005242 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800523a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 ff49 	bl	80060d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005250:	d10f      	bne.n	8005272 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005260:	d107      	bne.n	8005272 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800526a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 ff3b 	bl	80060e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800527c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005280:	d10f      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800528c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005290:	d107      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800529a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 ff2d 	bl	80060fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e0fd      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b14      	cmp	r3, #20
 80052d2:	f200 80f0 	bhi.w	80054b6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80052d6:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	08005331 	.word	0x08005331
 80052e0:	080054b7 	.word	0x080054b7
 80052e4:	080054b7 	.word	0x080054b7
 80052e8:	080054b7 	.word	0x080054b7
 80052ec:	08005371 	.word	0x08005371
 80052f0:	080054b7 	.word	0x080054b7
 80052f4:	080054b7 	.word	0x080054b7
 80052f8:	080054b7 	.word	0x080054b7
 80052fc:	080053b3 	.word	0x080053b3
 8005300:	080054b7 	.word	0x080054b7
 8005304:	080054b7 	.word	0x080054b7
 8005308:	080054b7 	.word	0x080054b7
 800530c:	080053f3 	.word	0x080053f3
 8005310:	080054b7 	.word	0x080054b7
 8005314:	080054b7 	.word	0x080054b7
 8005318:	080054b7 	.word	0x080054b7
 800531c:	08005435 	.word	0x08005435
 8005320:	080054b7 	.word	0x080054b7
 8005324:	080054b7 	.word	0x080054b7
 8005328:	080054b7 	.word	0x080054b7
 800532c:	08005475 	.word	0x08005475
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fa66 	bl	8005808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0208 	orr.w	r2, r2, #8
 800534a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0204 	bic.w	r2, r2, #4
 800535a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6999      	ldr	r1, [r3, #24]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	619a      	str	r2, [r3, #24]
      break;
 800536e:	e0a3      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fad6 	bl	8005928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	021a      	lsls	r2, r3, #8
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	619a      	str	r2, [r3, #24]
      break;
 80053b0:	e082      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fb3f 	bl	8005a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0208 	orr.w	r2, r2, #8
 80053cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0204 	bic.w	r2, r2, #4
 80053dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69d9      	ldr	r1, [r3, #28]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	61da      	str	r2, [r3, #28]
      break;
 80053f0:	e062      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fba7 	bl	8005b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800540c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69d9      	ldr	r1, [r3, #28]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	021a      	lsls	r2, r3, #8
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	61da      	str	r2, [r3, #28]
      break;
 8005432:	e041      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fc10 	bl	8005c60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0208 	orr.w	r2, r2, #8
 800544e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0204 	bic.w	r2, r2, #4
 800545e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005472:	e021      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fc54 	bl	8005d28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	021a      	lsls	r2, r3, #8
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054b4:	e000      	b.n	80054b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80054b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop

080054cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d107      	bne.n	800556c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800556a:	e02a      	b.n	80055c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d107      	bne.n	8005586 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2202      	movs	r2, #2
 800557a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005584:	e01d      	b.n	80055c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d107      	bne.n	80055a0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2204      	movs	r2, #4
 8005594:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800559e:	e010      	b.n	80055c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d107      	bne.n	80055ba <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2208      	movs	r2, #8
 80055ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b8:	e003      	b.n	80055c2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff ffb4 	bl	8005530 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	771a      	strb	r2, [r3, #28]
}
 80055ce:	bf00      	nop
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d10b      	bne.n	8005606 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d136      	bne.n	800566a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005604:	e031      	b.n	800566a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	d10b      	bne.n	8005628 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2202      	movs	r2, #2
 8005614:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d125      	bne.n	800566a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005626:	e020      	b.n	800566a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	429a      	cmp	r2, r3
 8005630:	d10b      	bne.n	800564a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2204      	movs	r2, #4
 8005636:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d114      	bne.n	800566a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005648:	e00f      	b.n	800566a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d10a      	bne.n	800566a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2208      	movs	r2, #8
 8005658:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d103      	bne.n	800566a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff ff42 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	771a      	strb	r2, [r3, #28]
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d103      	bne.n	800569e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	771a      	strb	r2, [r3, #28]
 800569c:	e019      	b.n	80056d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d103      	bne.n	80056b0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2202      	movs	r2, #2
 80056ac:	771a      	strb	r2, [r3, #28]
 80056ae:	e010      	b.n	80056d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d103      	bne.n	80056c2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2204      	movs	r2, #4
 80056be:	771a      	strb	r2, [r3, #28]
 80056c0:	e007      	b.n	80056d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d102      	bne.n	80056d2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2208      	movs	r2, #8
 80056d0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff ff18 	bl	8005508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	771a      	strb	r2, [r3, #28]
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3c      	ldr	r2, [pc, #240]	; (80057ec <TIM_Base_SetConfig+0x104>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005706:	d00b      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a39      	ldr	r2, [pc, #228]	; (80057f0 <TIM_Base_SetConfig+0x108>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a38      	ldr	r2, [pc, #224]	; (80057f4 <TIM_Base_SetConfig+0x10c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a37      	ldr	r2, [pc, #220]	; (80057f8 <TIM_Base_SetConfig+0x110>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d108      	bne.n	8005732 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2d      	ldr	r2, [pc, #180]	; (80057ec <TIM_Base_SetConfig+0x104>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2a      	ldr	r2, [pc, #168]	; (80057f0 <TIM_Base_SetConfig+0x108>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a29      	ldr	r2, [pc, #164]	; (80057f4 <TIM_Base_SetConfig+0x10c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a28      	ldr	r2, [pc, #160]	; (80057f8 <TIM_Base_SetConfig+0x110>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a27      	ldr	r2, [pc, #156]	; (80057fc <TIM_Base_SetConfig+0x114>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a26      	ldr	r2, [pc, #152]	; (8005800 <TIM_Base_SetConfig+0x118>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a25      	ldr	r2, [pc, #148]	; (8005804 <TIM_Base_SetConfig+0x11c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a10      	ldr	r2, [pc, #64]	; (80057ec <TIM_Base_SetConfig+0x104>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00f      	beq.n	80057d0 <TIM_Base_SetConfig+0xe8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a11      	ldr	r2, [pc, #68]	; (80057f8 <TIM_Base_SetConfig+0x110>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <TIM_Base_SetConfig+0xe8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a10      	ldr	r2, [pc, #64]	; (80057fc <TIM_Base_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_Base_SetConfig+0xe8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a0f      	ldr	r2, [pc, #60]	; (8005800 <TIM_Base_SetConfig+0x118>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_Base_SetConfig+0xe8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a0e      	ldr	r2, [pc, #56]	; (8005804 <TIM_Base_SetConfig+0x11c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d103      	bne.n	80057d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	615a      	str	r2, [r3, #20]
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40013400 	.word	0x40013400
 80057fc:	40014000 	.word	0x40014000
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800

08005808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f023 0201 	bic.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0303 	bic.w	r3, r3, #3
 8005842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 0302 	bic.w	r3, r3, #2
 8005854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a2c      	ldr	r2, [pc, #176]	; (8005914 <TIM_OC1_SetConfig+0x10c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00f      	beq.n	8005888 <TIM_OC1_SetConfig+0x80>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a2b      	ldr	r2, [pc, #172]	; (8005918 <TIM_OC1_SetConfig+0x110>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00b      	beq.n	8005888 <TIM_OC1_SetConfig+0x80>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a2a      	ldr	r2, [pc, #168]	; (800591c <TIM_OC1_SetConfig+0x114>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d007      	beq.n	8005888 <TIM_OC1_SetConfig+0x80>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a29      	ldr	r2, [pc, #164]	; (8005920 <TIM_OC1_SetConfig+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_OC1_SetConfig+0x80>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a28      	ldr	r2, [pc, #160]	; (8005924 <TIM_OC1_SetConfig+0x11c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d10c      	bne.n	80058a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f023 0308 	bic.w	r3, r3, #8
 800588e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 0304 	bic.w	r3, r3, #4
 80058a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <TIM_OC1_SetConfig+0x10c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00f      	beq.n	80058ca <TIM_OC1_SetConfig+0xc2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <TIM_OC1_SetConfig+0x110>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00b      	beq.n	80058ca <TIM_OC1_SetConfig+0xc2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a19      	ldr	r2, [pc, #100]	; (800591c <TIM_OC1_SetConfig+0x114>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <TIM_OC1_SetConfig+0xc2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a18      	ldr	r2, [pc, #96]	; (8005920 <TIM_OC1_SetConfig+0x118>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <TIM_OC1_SetConfig+0xc2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a17      	ldr	r2, [pc, #92]	; (8005924 <TIM_OC1_SetConfig+0x11c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d111      	bne.n	80058ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	621a      	str	r2, [r3, #32]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40012c00 	.word	0x40012c00
 8005918:	40013400 	.word	0x40013400
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800

08005928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0210 	bic.w	r2, r3, #16
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0320 	bic.w	r3, r3, #32
 8005976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a28      	ldr	r2, [pc, #160]	; (8005a28 <TIM_OC2_SetConfig+0x100>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC2_SetConfig+0x6c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a27      	ldr	r2, [pc, #156]	; (8005a2c <TIM_OC2_SetConfig+0x104>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d10d      	bne.n	80059b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <TIM_OC2_SetConfig+0x100>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00f      	beq.n	80059d8 <TIM_OC2_SetConfig+0xb0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a1c      	ldr	r2, [pc, #112]	; (8005a2c <TIM_OC2_SetConfig+0x104>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00b      	beq.n	80059d8 <TIM_OC2_SetConfig+0xb0>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <TIM_OC2_SetConfig+0x108>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_OC2_SetConfig+0xb0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a1a      	ldr	r2, [pc, #104]	; (8005a34 <TIM_OC2_SetConfig+0x10c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC2_SetConfig+0xb0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <TIM_OC2_SetConfig+0x110>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d113      	bne.n	8005a00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40012c00 	.word	0x40012c00
 8005a2c:	40013400 	.word	0x40013400
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800

08005a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <TIM_OC3_SetConfig+0xfc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_OC3_SetConfig+0x6a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <TIM_OC3_SetConfig+0x100>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10d      	bne.n	8005ac2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <TIM_OC3_SetConfig+0xfc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00f      	beq.n	8005aea <TIM_OC3_SetConfig+0xae>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <TIM_OC3_SetConfig+0x100>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00b      	beq.n	8005aea <TIM_OC3_SetConfig+0xae>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <TIM_OC3_SetConfig+0x104>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d007      	beq.n	8005aea <TIM_OC3_SetConfig+0xae>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <TIM_OC3_SetConfig+0x108>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <TIM_OC3_SetConfig+0xae>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <TIM_OC3_SetConfig+0x10c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d113      	bne.n	8005b12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	621a      	str	r2, [r3, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40012c00 	.word	0x40012c00
 8005b3c:	40013400 	.word	0x40013400
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40014400 	.word	0x40014400
 8005b48:	40014800 	.word	0x40014800

08005b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	031b      	lsls	r3, r3, #12
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <TIM_OC4_SetConfig+0x100>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC4_SetConfig+0x6c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <TIM_OC4_SetConfig+0x104>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d10d      	bne.n	8005bd4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <TIM_OC4_SetConfig+0x100>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00f      	beq.n	8005bfc <TIM_OC4_SetConfig+0xb0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <TIM_OC4_SetConfig+0x104>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_OC4_SetConfig+0xb0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1b      	ldr	r2, [pc, #108]	; (8005c54 <TIM_OC4_SetConfig+0x108>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_OC4_SetConfig+0xb0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a1a      	ldr	r2, [pc, #104]	; (8005c58 <TIM_OC4_SetConfig+0x10c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_OC4_SetConfig+0xb0>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <TIM_OC4_SetConfig+0x110>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d113      	bne.n	8005c24 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	019b      	lsls	r3, r3, #6
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	019b      	lsls	r3, r3, #6
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800

08005c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a17      	ldr	r2, [pc, #92]	; (8005d14 <TIM_OC5_SetConfig+0xb4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00f      	beq.n	8005cda <TIM_OC5_SetConfig+0x7a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a16      	ldr	r2, [pc, #88]	; (8005d18 <TIM_OC5_SetConfig+0xb8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00b      	beq.n	8005cda <TIM_OC5_SetConfig+0x7a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <TIM_OC5_SetConfig+0xbc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <TIM_OC5_SetConfig+0x7a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <TIM_OC5_SetConfig+0xc0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_OC5_SetConfig+0x7a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <TIM_OC5_SetConfig+0xc4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d109      	bne.n	8005cee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40013400 	.word	0x40013400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40014400 	.word	0x40014400
 8005d24:	40014800 	.word	0x40014800

08005d28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	051b      	lsls	r3, r3, #20
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <TIM_OC6_SetConfig+0xb8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00f      	beq.n	8005da4 <TIM_OC6_SetConfig+0x7c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <TIM_OC6_SetConfig+0xbc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00b      	beq.n	8005da4 <TIM_OC6_SetConfig+0x7c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <TIM_OC6_SetConfig+0xc0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_OC6_SetConfig+0x7c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a15      	ldr	r2, [pc, #84]	; (8005dec <TIM_OC6_SetConfig+0xc4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_OC6_SetConfig+0x7c>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a14      	ldr	r2, [pc, #80]	; (8005df0 <TIM_OC6_SetConfig+0xc8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d109      	bne.n	8005db8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005daa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	029b      	lsls	r3, r3, #10
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	2201      	movs	r2, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1a      	ldr	r2, [r3, #32]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	401a      	ands	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1a      	ldr	r2, [r3, #32]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e065      	b.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a2c      	ldr	r2, [pc, #176]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2b      	ldr	r2, [pc, #172]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a1b      	ldr	r2, [pc, #108]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d018      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ece:	d013      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a17      	ldr	r2, [pc, #92]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a12      	ldr	r2, [pc, #72]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a13      	ldr	r2, [pc, #76]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10c      	bne.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005efe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40013400 	.word	0x40013400
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40014000 	.word	0x40014000

08005f44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e087      	b.n	8006070 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a27      	ldr	r2, [pc, #156]	; (800607c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a25      	ldr	r2, [pc, #148]	; (8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d106      	bne.n	8005ffc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1d      	ldr	r2, [pc, #116]	; (8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d126      	bne.n	800605e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	051b      	lsls	r3, r3, #20
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0e      	ldr	r2, [pc, #56]	; (800607c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d004      	beq.n	8006050 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a0d      	ldr	r2, [pc, #52]	; (8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d106      	bne.n	800605e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40013400 	.word	0x40013400

08006084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006120:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006124:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	b29a      	uxth	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800613e:	b480      	push	{r7}
 8006140:	b085      	sub	sp, #20
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006146:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800614a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	b29b      	uxth	r3, r3
 8006158:	43db      	mvns	r3, r3
 800615a:	b29b      	uxth	r3, r3
 800615c:	4013      	ands	r3, r2
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006174:	b084      	sub	sp, #16
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	f107 0014 	add.w	r0, r7, #20
 8006182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	b004      	add	sp, #16
 80061b4:	4770      	bx	lr
	...

080061b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b09b      	sub	sp, #108	; 0x6c
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80061da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d81f      	bhi.n	800622a <USB_ActivateEndpoint+0x72>
 80061ea:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <USB_ActivateEndpoint+0x38>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006201 	.word	0x08006201
 80061f4:	0800621d 	.word	0x0800621d
 80061f8:	08006233 	.word	0x08006233
 80061fc:	0800620f 	.word	0x0800620f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006200:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006208:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800620c:	e012      	b.n	8006234 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800620e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006212:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006216:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800621a:	e00b      	b.n	8006234 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800621c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006224:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006228:	e004      	b.n	8006234 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006230:	e000      	b.n	8006234 <USB_ActivateEndpoint+0x7c>
      break;
 8006232:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	b21b      	sxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	b21a      	sxth	r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b21b      	sxth	r3, r3
 8006276:	4313      	orrs	r3, r2
 8006278:	b21b      	sxth	r3, r3
 800627a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800628c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629c:	b29b      	uxth	r3, r3
 800629e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	7b1b      	ldrb	r3, [r3, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 8149 	bne.w	800653c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8084 	beq.w	80063bc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4413      	add	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	00da      	lsls	r2, r3, #3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	88db      	ldrh	r3, [r3, #6]
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	b29b      	uxth	r3, r3
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	81fb      	strh	r3, [r7, #14]
 80062f6:	89fb      	ldrh	r3, [r7, #14]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01b      	beq.n	8006338 <USB_ActivateEndpoint+0x180>
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	81bb      	strh	r3, [r7, #12]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	89bb      	ldrh	r3, [r7, #12]
 8006324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006334:	b29b      	uxth	r3, r3
 8006336:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	78db      	ldrb	r3, [r3, #3]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d020      	beq.n	8006382 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006356:	813b      	strh	r3, [r7, #8]
 8006358:	893b      	ldrh	r3, [r7, #8]
 800635a:	f083 0320 	eor.w	r3, r3, #32
 800635e:	813b      	strh	r3, [r7, #8]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	441a      	add	r2, r3
 800636a:	893b      	ldrh	r3, [r7, #8]
 800636c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637c:	b29b      	uxth	r3, r3
 800637e:	8013      	strh	r3, [r2, #0]
 8006380:	e27f      	b.n	8006882 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006398:	817b      	strh	r3, [r7, #10]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	441a      	add	r2, r3
 80063a4:	897b      	ldrh	r3, [r7, #10]
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]
 80063ba:	e262      	b.n	8006882 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	4413      	add	r3, r2
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	00da      	lsls	r2, r3, #3
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	4413      	add	r3, r2
 80063da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063de:	62bb      	str	r3, [r7, #40]	; 0x28
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	88db      	ldrh	r3, [r3, #6]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	4413      	add	r3, r2
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	00da      	lsls	r2, r3, #3
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	4413      	add	r3, r2
 800640e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d112      	bne.n	8006442 <USB_ActivateEndpoint+0x28a>
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006426:	b29a      	uxth	r2, r3
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643a:	b29a      	uxth	r2, r3
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	e02f      	b.n	80064a2 <USB_ActivateEndpoint+0x2ea>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b3e      	cmp	r3, #62	; 0x3e
 8006448:	d813      	bhi.n	8006472 <USB_ActivateEndpoint+0x2ba>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	663b      	str	r3, [r7, #96]	; 0x60
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <USB_ActivateEndpoint+0x2ac>
 800645e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006460:	3301      	adds	r3, #1
 8006462:	663b      	str	r3, [r7, #96]	; 0x60
 8006464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006466:	b29b      	uxth	r3, r3
 8006468:	029b      	lsls	r3, r3, #10
 800646a:	b29a      	uxth	r2, r3
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e017      	b.n	80064a2 <USB_ActivateEndpoint+0x2ea>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	663b      	str	r3, [r7, #96]	; 0x60
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 031f 	and.w	r3, r3, #31
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <USB_ActivateEndpoint+0x2d4>
 8006486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006488:	3b01      	subs	r3, #1
 800648a:	663b      	str	r3, [r7, #96]	; 0x60
 800648c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800648e:	b29b      	uxth	r3, r3
 8006490:	029b      	lsls	r3, r3, #10
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	83fb      	strh	r3, [r7, #30]
 80064b0:	8bfb      	ldrh	r3, [r7, #30]
 80064b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01b      	beq.n	80064f2 <USB_ActivateEndpoint+0x33a>
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d0:	83bb      	strh	r3, [r7, #28]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	441a      	add	r2, r3
 80064dc:	8bbb      	ldrh	r3, [r7, #28]
 80064de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006508:	837b      	strh	r3, [r7, #26]
 800650a:	8b7b      	ldrh	r3, [r7, #26]
 800650c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006510:	837b      	strh	r3, [r7, #26]
 8006512:	8b7b      	ldrh	r3, [r7, #26]
 8006514:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006518:	837b      	strh	r3, [r7, #26]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	441a      	add	r2, r3
 8006524:	8b7b      	ldrh	r3, [r7, #26]
 8006526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006536:	b29b      	uxth	r3, r3
 8006538:	8013      	strh	r3, [r2, #0]
 800653a:	e1a2      	b.n	8006882 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006574:	b29b      	uxth	r3, r3
 8006576:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	65bb      	str	r3, [r7, #88]	; 0x58
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006582:	b29b      	uxth	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006588:	4413      	add	r3, r2
 800658a:	65bb      	str	r3, [r7, #88]	; 0x58
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	00da      	lsls	r2, r3, #3
 8006592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006594:	4413      	add	r3, r2
 8006596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800659a:	657b      	str	r3, [r7, #84]	; 0x54
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	891b      	ldrh	r3, [r3, #8]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	653b      	str	r3, [r7, #80]	; 0x50
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065bc:	4413      	add	r3, r2
 80065be:	653b      	str	r3, [r7, #80]	; 0x50
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	00da      	lsls	r2, r3, #3
 80065c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	895b      	ldrh	r3, [r3, #10]
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f040 8091 	bne.w	800670c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80065f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01b      	beq.n	800663a <USB_ActivateEndpoint+0x482>
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	877b      	strh	r3, [r7, #58]	; 0x3a
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	b29b      	uxth	r3, r3
 8006638:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	873b      	strh	r3, [r7, #56]	; 0x38
 8006648:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01b      	beq.n	800668a <USB_ActivateEndpoint+0x4d2>
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006668:	86fb      	strh	r3, [r7, #54]	; 0x36
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006682:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006686:	b29b      	uxth	r3, r3
 8006688:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800669c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80066a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80066aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e8:	867b      	strh	r3, [r7, #50]	; 0x32
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80066f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006706:	b29b      	uxth	r3, r3
 8006708:	8013      	strh	r3, [r2, #0]
 800670a:	e0ba      	b.n	8006882 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800671c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01d      	beq.n	8006764 <USB_ActivateEndpoint+0x5ac>
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	441a      	add	r2, r3
 800674c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006774:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01d      	beq.n	80067bc <USB_ActivateEndpoint+0x604>
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	78db      	ldrb	r3, [r3, #3]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d024      	beq.n	800680e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80067de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80067e2:	f083 0320 	eor.w	r3, r3, #32
 80067e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80067f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006808:	b29b      	uxth	r3, r3
 800680a:	8013      	strh	r3, [r2, #0]
 800680c:	e01d      	b.n	800684a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006824:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	441a      	add	r2, r3
 8006832:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006846:	b29b      	uxth	r3, r3
 8006848:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800685c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006860:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800686e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687e:	b29b      	uxth	r3, r3
 8006880:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006882:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006886:	4618      	mov	r0, r3
 8006888:	376c      	adds	r7, #108	; 0x6c
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop

08006894 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006894:	b480      	push	{r7}
 8006896:	b08d      	sub	sp, #52	; 0x34
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	7b1b      	ldrb	r3, [r3, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 808e 	bne.w	80069c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d044      	beq.n	800693a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	81bb      	strh	r3, [r7, #12]
 80068be:	89bb      	ldrh	r3, [r7, #12]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <USB_DeactivateEndpoint+0x6c>
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	817b      	strh	r3, [r7, #10]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	897b      	ldrh	r3, [r7, #10]
 80068ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29b      	uxth	r3, r3
 800690e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006916:	813b      	strh	r3, [r7, #8]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	441a      	add	r2, r3
 8006922:	893b      	ldrh	r3, [r7, #8]
 8006924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800692c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006934:	b29b      	uxth	r3, r3
 8006936:	8013      	strh	r3, [r2, #0]
 8006938:	e192      	b.n	8006c60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	827b      	strh	r3, [r7, #18]
 8006948:	8a7b      	ldrh	r3, [r7, #18]
 800694a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01b      	beq.n	800698a <USB_DeactivateEndpoint+0xf6>
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006968:	823b      	strh	r3, [r7, #16]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	441a      	add	r2, r3
 8006974:	8a3b      	ldrh	r3, [r7, #16]
 8006976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a0:	81fb      	strh	r3, [r7, #14]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	441a      	add	r2, r3
 80069ac:	89fb      	ldrh	r3, [r7, #14]
 80069ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]
 80069c2:	e14d      	b.n	8006c60 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 80a5 	bne.w	8006b18 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	843b      	strh	r3, [r7, #32]
 80069dc:	8c3b      	ldrh	r3, [r7, #32]
 80069de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01b      	beq.n	8006a1e <USB_DeactivateEndpoint+0x18a>
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fc:	83fb      	strh	r3, [r7, #30]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	441a      	add	r2, r3
 8006a08:	8bfb      	ldrh	r3, [r7, #30]
 8006a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	83bb      	strh	r3, [r7, #28]
 8006a2c:	8bbb      	ldrh	r3, [r7, #28]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01b      	beq.n	8006a6e <USB_DeactivateEndpoint+0x1da>
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4c:	837b      	strh	r3, [r7, #26]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	441a      	add	r2, r3
 8006a58:	8b7b      	ldrh	r3, [r7, #26]
 8006a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a84:	833b      	strh	r3, [r7, #24]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	441a      	add	r2, r3
 8006a90:	8b3b      	ldrh	r3, [r7, #24]
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abc:	82fb      	strh	r3, [r7, #22]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	8afb      	ldrh	r3, [r7, #22]
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af4:	82bb      	strh	r3, [r7, #20]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	441a      	add	r2, r3
 8006b00:	8abb      	ldrh	r3, [r7, #20]
 8006b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	8013      	strh	r3, [r2, #0]
 8006b16:	e0a3      	b.n	8006c60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01b      	beq.n	8006b68 <USB_DeactivateEndpoint+0x2d4>
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b46:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01b      	beq.n	8006bb8 <USB_DeactivateEndpoint+0x324>
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b96:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	441a      	add	r2, r3
 8006ba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	441a      	add	r2, r3
 8006bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	441a      	add	r2, r3
 8006c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3734      	adds	r7, #52	; 0x34
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b0cc      	sub	sp, #304	; 0x130
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	1d3b      	adds	r3, r7, #4
 8006c76:	6018      	str	r0, [r3, #0]
 8006c78:	463b      	mov	r3, r7
 8006c7a:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	f040 872e 	bne.w	8007ae4 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c88:	463b      	mov	r3, r7
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	463b      	mov	r3, r7
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d905      	bls.n	8006ca4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006c98:	463b      	mov	r3, r7
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006ca2:	e004      	b.n	8006cae <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006cae:	463b      	mov	r3, r7
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	7b1b      	ldrb	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d134      	bne.n	8006d22 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006cb8:	463b      	mov	r3, r7
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6959      	ldr	r1, [r3, #20]
 8006cbe:	463b      	mov	r3, r7
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	88da      	ldrh	r2, [r3, #6]
 8006cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	1d38      	adds	r0, r7, #4
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f001 fbff 	bl	80084d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cd2:	f107 0310 	add.w	r3, r7, #16
 8006cd6:	1d3a      	adds	r2, r7, #4
 8006cd8:	6812      	ldr	r2, [r2, #0]
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	1d3b      	adds	r3, r7, #4
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f107 0310 	add.w	r3, r7, #16
 8006cec:	f107 0210 	add.w	r2, r7, #16
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	440a      	add	r2, r1
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	00da      	lsls	r2, r3, #3
 8006cfe:	f107 0310 	add.w	r3, r7, #16
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006d0a:	f107 030c 	add.w	r3, r7, #12
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	f107 030c 	add.w	r3, r7, #12
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	801a      	strh	r2, [r3, #0]
 8006d1e:	f000 beac 	b.w	8007a7a <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d22:	463b      	mov	r3, r7
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	78db      	ldrb	r3, [r3, #3]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	f040 838c 	bne.w	8007446 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d2e:	463b      	mov	r3, r7
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6a1a      	ldr	r2, [r3, #32]
 8006d34:	463b      	mov	r3, r7
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	f240 8330 	bls.w	80073a0 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006d40:	1d3b      	adds	r3, r7, #4
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	463b      	mov	r3, r7
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006d5e:	1d3b      	adds	r3, r7, #4
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	463b      	mov	r3, r7
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	441a      	add	r2, r3
 8006d6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d78:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d84:	463b      	mov	r3, r7
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	463b      	mov	r3, r7
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d96:	1d3b      	adds	r3, r7, #4
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 819e 	beq.w	80070ee <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006db2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006db6:	1d3a      	adds	r2, r7, #4
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d17a      	bne.n	8006ebc <USB_EPStartXfer+0x24e>
 8006dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dca:	1d3a      	adds	r2, r7, #4
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	1d3b      	adds	r3, r7, #4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	4619      	mov	r1, r3
 8006ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006de0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006de4:	6812      	ldr	r2, [r2, #0]
 8006de6:	440a      	add	r2, r1
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	463b      	mov	r3, r7
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	00da      	lsls	r2, r3, #3
 8006df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8006dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d11a      	bne.n	8006e42 <USB_EPStartXfer+0x1d4>
 8006e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	e062      	b.n	8006f08 <USB_EPStartXfer+0x29a>
 8006e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e46:	2b3e      	cmp	r3, #62	; 0x3e
 8006e48:	d819      	bhi.n	8006e7e <USB_EPStartXfer+0x210>
 8006e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <USB_EPStartXfer+0x1fc>
 8006e60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e64:	3301      	adds	r3, #1
 8006e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	029b      	lsls	r3, r3, #10
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e044      	b.n	8006f08 <USB_EPStartXfer+0x29a>
 8006e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <USB_EPStartXfer+0x230>
 8006e94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	029b      	lsls	r3, r3, #10
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	801a      	strh	r2, [r3, #0]
 8006eba:	e025      	b.n	8006f08 <USB_EPStartXfer+0x29a>
 8006ebc:	463b      	mov	r3, r7
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	785b      	ldrb	r3, [r3, #1]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d120      	bne.n	8006f08 <USB_EPStartXfer+0x29a>
 8006ec6:	1d3b      	adds	r3, r7, #4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ed6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006eda:	6812      	ldr	r2, [r2, #0]
 8006edc:	440a      	add	r2, r1
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	463b      	mov	r3, r7
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	00da      	lsls	r2, r3, #3
 8006ee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8006ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f08:	463b      	mov	r3, r7
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	895b      	ldrh	r3, [r3, #10]
 8006f0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6959      	ldr	r1, [r3, #20]
 8006f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f22:	1d38      	adds	r0, r7, #4
 8006f24:	6800      	ldr	r0, [r0, #0]
 8006f26:	f001 fad3 	bl	80084d0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	695a      	ldr	r2, [r3, #20]
 8006f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f34:	441a      	add	r2, r3
 8006f36:	463b      	mov	r3, r7
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6a1a      	ldr	r2, [r3, #32]
 8006f42:	463b      	mov	r3, r7
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d909      	bls.n	8006f60 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6a1a      	ldr	r2, [r3, #32]
 8006f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f56:	1ad2      	subs	r2, r2, r3
 8006f58:	463b      	mov	r3, r7
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	621a      	str	r2, [r3, #32]
 8006f5e:	e008      	b.n	8006f72 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f60:	463b      	mov	r3, r7
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f72:	463b      	mov	r3, r7
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	785b      	ldrb	r3, [r3, #1]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d17a      	bne.n	8007072 <USB_EPStartXfer+0x404>
 8006f7c:	f107 0318 	add.w	r3, r7, #24
 8006f80:	1d3a      	adds	r2, r7, #4
 8006f82:	6812      	ldr	r2, [r2, #0]
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	4619      	mov	r1, r3
 8006f92:	f107 0318 	add.w	r3, r7, #24
 8006f96:	f107 0218 	add.w	r2, r7, #24
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	440a      	add	r2, r1
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	00da      	lsls	r2, r3, #3
 8006fa8:	f107 0318 	add.w	r3, r7, #24
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006fb4:	f107 0314 	add.w	r3, r7, #20
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d11a      	bne.n	8006ff8 <USB_EPStartXfer+0x38a>
 8006fc2:	f107 0314 	add.w	r3, r7, #20
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	f107 0314 	add.w	r3, r7, #20
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	f107 0314 	add.w	r3, r7, #20
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	f107 0314 	add.w	r3, r7, #20
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e067      	b.n	80070c8 <USB_EPStartXfer+0x45a>
 8006ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ffe:	d819      	bhi.n	8007034 <USB_EPStartXfer+0x3c6>
 8007000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800700a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <USB_EPStartXfer+0x3b2>
 8007016:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800701a:	3301      	adds	r3, #1
 800701c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007020:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007024:	b29b      	uxth	r3, r3
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	b29a      	uxth	r2, r3
 800702a:	f107 0314 	add.w	r3, r7, #20
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	e049      	b.n	80070c8 <USB_EPStartXfer+0x45a>
 8007034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007038:	095b      	lsrs	r3, r3, #5
 800703a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800703e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007042:	f003 031f 	and.w	r3, r3, #31
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <USB_EPStartXfer+0x3e6>
 800704a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800704e:	3b01      	subs	r3, #1
 8007050:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007054:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007058:	b29b      	uxth	r3, r3
 800705a:	029b      	lsls	r3, r3, #10
 800705c:	b29b      	uxth	r3, r3
 800705e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007066:	b29a      	uxth	r2, r3
 8007068:	f107 0314 	add.w	r3, r7, #20
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	801a      	strh	r2, [r3, #0]
 8007070:	e02a      	b.n	80070c8 <USB_EPStartXfer+0x45a>
 8007072:	463b      	mov	r3, r7
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d125      	bne.n	80070c8 <USB_EPStartXfer+0x45a>
 800707c:	f107 0320 	add.w	r3, r7, #32
 8007080:	1d3a      	adds	r2, r7, #4
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	1d3b      	adds	r3, r7, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800708e:	b29b      	uxth	r3, r3
 8007090:	4619      	mov	r1, r3
 8007092:	f107 0320 	add.w	r3, r7, #32
 8007096:	f107 0220 	add.w	r2, r7, #32
 800709a:	6812      	ldr	r2, [r2, #0]
 800709c:	440a      	add	r2, r1
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	463b      	mov	r3, r7
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	00da      	lsls	r2, r3, #3
 80070a8:	f107 0320 	add.w	r3, r7, #32
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4413      	add	r3, r2
 80070b0:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80070b4:	f107 031c 	add.w	r3, r7, #28
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070be:	b29a      	uxth	r2, r3
 80070c0:	f107 031c 	add.w	r3, r7, #28
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	891b      	ldrh	r3, [r3, #8]
 80070ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070d2:	463b      	mov	r3, r7
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6959      	ldr	r1, [r3, #20]
 80070d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070e2:	1d38      	adds	r0, r7, #4
 80070e4:	6800      	ldr	r0, [r0, #0]
 80070e6:	f001 f9f3 	bl	80084d0 <USB_WritePMA>
 80070ea:	f000 bcc6 	b.w	8007a7a <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070ee:	463b      	mov	r3, r7
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d164      	bne.n	80071c2 <USB_EPStartXfer+0x554>
 80070f8:	1d3b      	adds	r3, r7, #4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80070fe:	1d3b      	adds	r3, r7, #4
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007106:	b29b      	uxth	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800710c:	4413      	add	r3, r2
 800710e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007110:	463b      	mov	r3, r7
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	00da      	lsls	r2, r3, #3
 8007118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800711a:	4413      	add	r3, r2
 800711c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007120:	647b      	str	r3, [r7, #68]	; 0x44
 8007122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d112      	bne.n	8007150 <USB_EPStartXfer+0x4e2>
 800712a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007134:	b29a      	uxth	r2, r3
 8007136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007148:	b29a      	uxth	r2, r3
 800714a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800714c:	801a      	strh	r2, [r3, #0]
 800714e:	e057      	b.n	8007200 <USB_EPStartXfer+0x592>
 8007150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007154:	2b3e      	cmp	r3, #62	; 0x3e
 8007156:	d817      	bhi.n	8007188 <USB_EPStartXfer+0x51a>
 8007158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <USB_EPStartXfer+0x50a>
 800716e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007172:	3301      	adds	r3, #1
 8007174:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007178:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800717c:	b29b      	uxth	r3, r3
 800717e:	029b      	lsls	r3, r3, #10
 8007180:	b29a      	uxth	r2, r3
 8007182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007184:	801a      	strh	r2, [r3, #0]
 8007186:	e03b      	b.n	8007200 <USB_EPStartXfer+0x592>
 8007188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2b00      	cmp	r3, #0
 800719c:	d104      	bne.n	80071a8 <USB_EPStartXfer+0x53a>
 800719e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80071a2:	3b01      	subs	r3, #1
 80071a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80071a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	029b      	lsls	r3, r3, #10
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	e01e      	b.n	8007200 <USB_EPStartXfer+0x592>
 80071c2:	463b      	mov	r3, r7
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d119      	bne.n	8007200 <USB_EPStartXfer+0x592>
 80071cc:	1d3b      	adds	r3, r7, #4
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	653b      	str	r3, [r7, #80]	; 0x50
 80071d2:	1d3b      	adds	r3, r7, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071da:	b29b      	uxth	r3, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	4413      	add	r3, r2
 80071e2:	653b      	str	r3, [r7, #80]	; 0x50
 80071e4:	463b      	mov	r3, r7
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	00da      	lsls	r2, r3, #3
 80071ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ee:	4413      	add	r3, r2
 80071f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007200:	463b      	mov	r3, r7
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	891b      	ldrh	r3, [r3, #8]
 8007206:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800720a:	463b      	mov	r3, r7
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6959      	ldr	r1, [r3, #20]
 8007210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007214:	b29b      	uxth	r3, r3
 8007216:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800721a:	1d38      	adds	r0, r7, #4
 800721c:	6800      	ldr	r0, [r0, #0]
 800721e:	f001 f957 	bl	80084d0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007222:	463b      	mov	r3, r7
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	695a      	ldr	r2, [r3, #20]
 8007228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800722c:	441a      	add	r2, r3
 800722e:	463b      	mov	r3, r7
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007234:	463b      	mov	r3, r7
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6a1a      	ldr	r2, [r3, #32]
 800723a:	463b      	mov	r3, r7
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	429a      	cmp	r2, r3
 8007242:	d909      	bls.n	8007258 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007244:	463b      	mov	r3, r7
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6a1a      	ldr	r2, [r3, #32]
 800724a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	463b      	mov	r3, r7
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	621a      	str	r2, [r3, #32]
 8007256:	e008      	b.n	800726a <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007258:	463b      	mov	r3, r7
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007262:	463b      	mov	r3, r7
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2200      	movs	r2, #0
 8007268:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800726a:	1d3b      	adds	r3, r7, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	643b      	str	r3, [r7, #64]	; 0x40
 8007270:	463b      	mov	r3, r7
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d164      	bne.n	8007344 <USB_EPStartXfer+0x6d6>
 800727a:	1d3b      	adds	r3, r7, #4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007280:	1d3b      	adds	r3, r7, #4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007288:	b29b      	uxth	r3, r3
 800728a:	461a      	mov	r2, r3
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	4413      	add	r3, r2
 8007290:	63bb      	str	r3, [r7, #56]	; 0x38
 8007292:	463b      	mov	r3, r7
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	00da      	lsls	r2, r3, #3
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	4413      	add	r3, r2
 800729e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
 80072a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d112      	bne.n	80072d2 <USB_EPStartXfer+0x664>
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	e054      	b.n	800737c <USB_EPStartXfer+0x70e>
 80072d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d6:	2b3e      	cmp	r3, #62	; 0x3e
 80072d8:	d817      	bhi.n	800730a <USB_EPStartXfer+0x69c>
 80072da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80072e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <USB_EPStartXfer+0x68c>
 80072f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072f4:	3301      	adds	r3, #1
 80072f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80072fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072fe:	b29b      	uxth	r3, r3
 8007300:	029b      	lsls	r3, r3, #10
 8007302:	b29a      	uxth	r2, r3
 8007304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	e038      	b.n	800737c <USB_EPStartXfer+0x70e>
 800730a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730e:	095b      	lsrs	r3, r3, #5
 8007310:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007318:	f003 031f 	and.w	r3, r3, #31
 800731c:	2b00      	cmp	r3, #0
 800731e:	d104      	bne.n	800732a <USB_EPStartXfer+0x6bc>
 8007320:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007324:	3b01      	subs	r3, #1
 8007326:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800732a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800732e:	b29b      	uxth	r3, r3
 8007330:	029b      	lsls	r3, r3, #10
 8007332:	b29b      	uxth	r3, r3
 8007334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733c:	b29a      	uxth	r2, r3
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	e01b      	b.n	800737c <USB_EPStartXfer+0x70e>
 8007344:	463b      	mov	r3, r7
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d116      	bne.n	800737c <USB_EPStartXfer+0x70e>
 800734e:	1d3b      	adds	r3, r7, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007356:	b29b      	uxth	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735c:	4413      	add	r3, r2
 800735e:	643b      	str	r3, [r7, #64]	; 0x40
 8007360:	463b      	mov	r3, r7
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	00da      	lsls	r2, r3, #3
 8007368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736a:	4413      	add	r3, r2
 800736c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007376:	b29a      	uxth	r2, r3
 8007378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800737c:	463b      	mov	r3, r7
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	895b      	ldrh	r3, [r3, #10]
 8007382:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007386:	463b      	mov	r3, r7
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6959      	ldr	r1, [r3, #20]
 800738c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007390:	b29b      	uxth	r3, r3
 8007392:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007396:	1d38      	adds	r0, r7, #4
 8007398:	6800      	ldr	r0, [r0, #0]
 800739a:	f001 f899 	bl	80084d0 <USB_WritePMA>
 800739e:	e36c      	b.n	8007a7a <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80073a0:	463b      	mov	r3, r7
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80073aa:	1d3b      	adds	r3, r7, #4
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	463b      	mov	r3, r7
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80073c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80073c8:	1d3b      	adds	r3, r7, #4
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	463b      	mov	r3, r7
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	441a      	add	r2, r3
 80073d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80073da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073ee:	1d3b      	adds	r3, r7, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073f4:	1d3b      	adds	r3, r7, #4
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	461a      	mov	r2, r3
 8007400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007402:	4413      	add	r3, r2
 8007404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007406:	463b      	mov	r3, r7
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	00da      	lsls	r2, r3, #3
 800740e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007410:	4413      	add	r3, r2
 8007412:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007416:	65bb      	str	r3, [r7, #88]	; 0x58
 8007418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741c:	b29a      	uxth	r2, r3
 800741e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007420:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007422:	463b      	mov	r3, r7
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	891b      	ldrh	r3, [r3, #8]
 8007428:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800742c:	463b      	mov	r3, r7
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6959      	ldr	r1, [r3, #20]
 8007432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007436:	b29b      	uxth	r3, r3
 8007438:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800743c:	1d38      	adds	r0, r7, #4
 800743e:	6800      	ldr	r0, [r0, #0]
 8007440:	f001 f846 	bl	80084d0 <USB_WritePMA>
 8007444:	e319      	b.n	8007a7a <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007446:	1d3b      	adds	r3, r7, #4
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	463b      	mov	r3, r7
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007460:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007464:	1d3b      	adds	r3, r7, #4
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	463b      	mov	r3, r7
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	441a      	add	r2, r3
 8007472:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800748a:	463b      	mov	r3, r7
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6a1a      	ldr	r2, [r3, #32]
 8007490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007494:	1ad2      	subs	r2, r2, r3
 8007496:	463b      	mov	r3, r7
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800749c:	1d3b      	adds	r3, r7, #4
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	463b      	mov	r3, r7
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 8162 	beq.w	800777c <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074b8:	1d3b      	adds	r3, r7, #4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074c0:	463b      	mov	r3, r7
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d164      	bne.n	8007594 <USB_EPStartXfer+0x926>
 80074ca:	1d3b      	adds	r3, r7, #4
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80074d0:	1d3b      	adds	r3, r7, #4
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d8:	b29b      	uxth	r3, r3
 80074da:	461a      	mov	r2, r3
 80074dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074de:	4413      	add	r3, r2
 80074e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80074e2:	463b      	mov	r3, r7
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	00da      	lsls	r2, r3, #3
 80074ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ec:	4413      	add	r3, r2
 80074ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074f2:	677b      	str	r3, [r7, #116]	; 0x74
 80074f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d112      	bne.n	8007522 <USB_EPStartXfer+0x8b4>
 80074fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007506:	b29a      	uxth	r2, r3
 8007508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750a:	801a      	strh	r2, [r3, #0]
 800750c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	b29b      	uxth	r3, r3
 8007512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800751a:	b29a      	uxth	r2, r3
 800751c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800751e:	801a      	strh	r2, [r3, #0]
 8007520:	e057      	b.n	80075d2 <USB_EPStartXfer+0x964>
 8007522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007526:	2b3e      	cmp	r3, #62	; 0x3e
 8007528:	d817      	bhi.n	800755a <USB_EPStartXfer+0x8ec>
 800752a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d004      	beq.n	800754a <USB_EPStartXfer+0x8dc>
 8007540:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007544:	3301      	adds	r3, #1
 8007546:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800754a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800754e:	b29b      	uxth	r3, r3
 8007550:	029b      	lsls	r3, r3, #10
 8007552:	b29a      	uxth	r2, r3
 8007554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e03b      	b.n	80075d2 <USB_EPStartXfer+0x964>
 800755a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755e:	095b      	lsrs	r3, r3, #5
 8007560:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <USB_EPStartXfer+0x90c>
 8007570:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007574:	3b01      	subs	r3, #1
 8007576:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800757a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800757e:	b29b      	uxth	r3, r3
 8007580:	029b      	lsls	r3, r3, #10
 8007582:	b29b      	uxth	r3, r3
 8007584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800758c:	b29a      	uxth	r2, r3
 800758e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007590:	801a      	strh	r2, [r3, #0]
 8007592:	e01e      	b.n	80075d2 <USB_EPStartXfer+0x964>
 8007594:	463b      	mov	r3, r7
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d119      	bne.n	80075d2 <USB_EPStartXfer+0x964>
 800759e:	1d3b      	adds	r3, r7, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075ae:	4413      	add	r3, r2
 80075b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075b4:	463b      	mov	r3, r7
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	00da      	lsls	r2, r3, #3
 80075bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80075d2:	463b      	mov	r3, r7
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	895b      	ldrh	r3, [r3, #10]
 80075d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075dc:	463b      	mov	r3, r7
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6959      	ldr	r1, [r3, #20]
 80075e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075ec:	1d38      	adds	r0, r7, #4
 80075ee:	6800      	ldr	r0, [r0, #0]
 80075f0:	f000 ff6e 	bl	80084d0 <USB_WritePMA>
          ep->xfer_buff += len;
 80075f4:	463b      	mov	r3, r7
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695a      	ldr	r2, [r3, #20]
 80075fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fe:	441a      	add	r2, r3
 8007600:	463b      	mov	r3, r7
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007606:	463b      	mov	r3, r7
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6a1a      	ldr	r2, [r3, #32]
 800760c:	463b      	mov	r3, r7
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	429a      	cmp	r2, r3
 8007614:	d909      	bls.n	800762a <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007616:	463b      	mov	r3, r7
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6a1a      	ldr	r2, [r3, #32]
 800761c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007620:	1ad2      	subs	r2, r2, r3
 8007622:	463b      	mov	r3, r7
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	621a      	str	r2, [r3, #32]
 8007628:	e008      	b.n	800763c <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800762a:	463b      	mov	r3, r7
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007634:	463b      	mov	r3, r7
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2200      	movs	r2, #0
 800763a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800763c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 821a 	beq.w	8007a7a <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007646:	463b      	mov	r3, r7
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d164      	bne.n	800771a <USB_EPStartXfer+0xaac>
 8007650:	1d3b      	adds	r3, r7, #4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	66bb      	str	r3, [r7, #104]	; 0x68
 8007656:	1d3b      	adds	r3, r7, #4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007664:	4413      	add	r3, r2
 8007666:	66bb      	str	r3, [r7, #104]	; 0x68
 8007668:	463b      	mov	r3, r7
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	00da      	lsls	r2, r3, #3
 8007670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007672:	4413      	add	r3, r2
 8007674:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007678:	667b      	str	r3, [r7, #100]	; 0x64
 800767a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d112      	bne.n	80076a8 <USB_EPStartXfer+0xa3a>
 8007682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800768c:	b29a      	uxth	r2, r3
 800768e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007690:	801a      	strh	r2, [r3, #0]
 8007692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	b29b      	uxth	r3, r3
 8007698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800769c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	e057      	b.n	8007758 <USB_EPStartXfer+0xaea>
 80076a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ac:	2b3e      	cmp	r3, #62	; 0x3e
 80076ae:	d817      	bhi.n	80076e0 <USB_EPStartXfer+0xa72>
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80076ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <USB_EPStartXfer+0xa62>
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ca:	3301      	adds	r3, #1
 80076cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	029b      	lsls	r3, r3, #10
 80076d8:	b29a      	uxth	r2, r3
 80076da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076dc:	801a      	strh	r2, [r3, #0]
 80076de:	e03b      	b.n	8007758 <USB_EPStartXfer+0xaea>
 80076e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80076ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d104      	bne.n	8007700 <USB_EPStartXfer+0xa92>
 80076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fa:	3b01      	subs	r3, #1
 80076fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007704:	b29b      	uxth	r3, r3
 8007706:	029b      	lsls	r3, r3, #10
 8007708:	b29b      	uxth	r3, r3
 800770a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007712:	b29a      	uxth	r2, r3
 8007714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	e01e      	b.n	8007758 <USB_EPStartXfer+0xaea>
 800771a:	463b      	mov	r3, r7
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d119      	bne.n	8007758 <USB_EPStartXfer+0xaea>
 8007724:	1d3b      	adds	r3, r7, #4
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	673b      	str	r3, [r7, #112]	; 0x70
 800772a:	1d3b      	adds	r3, r7, #4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007732:	b29b      	uxth	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007738:	4413      	add	r3, r2
 800773a:	673b      	str	r3, [r7, #112]	; 0x70
 800773c:	463b      	mov	r3, r7
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	00da      	lsls	r2, r3, #3
 8007744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007746:	4413      	add	r3, r2
 8007748:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800774c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800774e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007752:	b29a      	uxth	r2, r3
 8007754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007756:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007758:	463b      	mov	r3, r7
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	891b      	ldrh	r3, [r3, #8]
 800775e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007762:	463b      	mov	r3, r7
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6959      	ldr	r1, [r3, #20]
 8007768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800776c:	b29b      	uxth	r3, r3
 800776e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007772:	1d38      	adds	r0, r7, #4
 8007774:	6800      	ldr	r0, [r0, #0]
 8007776:	f000 feab 	bl	80084d0 <USB_WritePMA>
 800777a:	e17e      	b.n	8007a7a <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800777c:	463b      	mov	r3, r7
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d16f      	bne.n	8007866 <USB_EPStartXfer+0xbf8>
 8007786:	1d3b      	adds	r3, r7, #4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800778e:	1d3b      	adds	r3, r7, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007796:	b29b      	uxth	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800779e:	4413      	add	r3, r2
 80077a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077a4:	463b      	mov	r3, r7
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	00da      	lsls	r2, r3, #3
 80077ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077b0:	4413      	add	r3, r2
 80077b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d116      	bne.n	80077f0 <USB_EPStartXfer+0xb82>
 80077c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077ec:	801a      	strh	r2, [r3, #0]
 80077ee:	e05f      	b.n	80078b0 <USB_EPStartXfer+0xc42>
 80077f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f4:	2b3e      	cmp	r3, #62	; 0x3e
 80077f6:	d818      	bhi.n	800782a <USB_EPStartXfer+0xbbc>
 80077f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fc:	085b      	lsrs	r3, r3, #1
 80077fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d004      	beq.n	8007818 <USB_EPStartXfer+0xbaa>
 800780e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007812:	3301      	adds	r3, #1
 8007814:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007818:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800781c:	b29b      	uxth	r3, r3
 800781e:	029b      	lsls	r3, r3, #10
 8007820:	b29a      	uxth	r2, r3
 8007822:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007826:	801a      	strh	r2, [r3, #0]
 8007828:	e042      	b.n	80078b0 <USB_EPStartXfer+0xc42>
 800782a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007838:	f003 031f 	and.w	r3, r3, #31
 800783c:	2b00      	cmp	r3, #0
 800783e:	d104      	bne.n	800784a <USB_EPStartXfer+0xbdc>
 8007840:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007844:	3b01      	subs	r3, #1
 8007846:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800784a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800784e:	b29b      	uxth	r3, r3
 8007850:	029b      	lsls	r3, r3, #10
 8007852:	b29b      	uxth	r3, r3
 8007854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800785c:	b29a      	uxth	r2, r3
 800785e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007862:	801a      	strh	r2, [r3, #0]
 8007864:	e024      	b.n	80078b0 <USB_EPStartXfer+0xc42>
 8007866:	463b      	mov	r3, r7
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d11f      	bne.n	80078b0 <USB_EPStartXfer+0xc42>
 8007870:	1d3b      	adds	r3, r7, #4
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007878:	1d3b      	adds	r3, r7, #4
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007880:	b29b      	uxth	r3, r3
 8007882:	461a      	mov	r2, r3
 8007884:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007888:	4413      	add	r3, r2
 800788a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800788e:	463b      	mov	r3, r7
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	00da      	lsls	r2, r3, #3
 8007896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800789a:	4413      	add	r3, r2
 800789c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078b0:	463b      	mov	r3, r7
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	891b      	ldrh	r3, [r3, #8]
 80078b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ba:	463b      	mov	r3, r7
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6959      	ldr	r1, [r3, #20]
 80078c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078ca:	1d38      	adds	r0, r7, #4
 80078cc:	6800      	ldr	r0, [r0, #0]
 80078ce:	f000 fdff 	bl	80084d0 <USB_WritePMA>
          ep->xfer_buff += len;
 80078d2:	463b      	mov	r3, r7
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695a      	ldr	r2, [r3, #20]
 80078d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078dc:	441a      	add	r2, r3
 80078de:	463b      	mov	r3, r7
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80078e4:	463b      	mov	r3, r7
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6a1a      	ldr	r2, [r3, #32]
 80078ea:	463b      	mov	r3, r7
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d909      	bls.n	8007908 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80078f4:	463b      	mov	r3, r7
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6a1a      	ldr	r2, [r3, #32]
 80078fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fe:	1ad2      	subs	r2, r2, r3
 8007900:	463b      	mov	r3, r7
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	621a      	str	r2, [r3, #32]
 8007906:	e008      	b.n	800791a <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007908:	463b      	mov	r3, r7
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007912:	463b      	mov	r3, r7
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2200      	movs	r2, #0
 8007918:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800791a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 80ab 	beq.w	8007a7a <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007924:	1d3b      	adds	r3, r7, #4
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800792c:	463b      	mov	r3, r7
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	785b      	ldrb	r3, [r3, #1]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d16f      	bne.n	8007a16 <USB_EPStartXfer+0xda8>
 8007936:	1d3b      	adds	r3, r7, #4
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800793e:	1d3b      	adds	r3, r7, #4
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007946:	b29b      	uxth	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800794e:	4413      	add	r3, r2
 8007950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007954:	463b      	mov	r3, r7
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	00da      	lsls	r2, r3, #3
 800795c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007960:	4413      	add	r3, r2
 8007962:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800796a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d116      	bne.n	80079a0 <USB_EPStartXfer+0xd32>
 8007972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800797e:	b29a      	uxth	r2, r3
 8007980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007996:	b29a      	uxth	r2, r3
 8007998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	e05b      	b.n	8007a58 <USB_EPStartXfer+0xdea>
 80079a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a4:	2b3e      	cmp	r3, #62	; 0x3e
 80079a6:	d818      	bhi.n	80079da <USB_EPStartXfer+0xd6c>
 80079a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ac:	085b      	lsrs	r3, r3, #1
 80079ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80079b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <USB_EPStartXfer+0xd5a>
 80079be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079c2:	3301      	adds	r3, #1
 80079c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80079c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	029b      	lsls	r3, r3, #10
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079d6:	801a      	strh	r2, [r3, #0]
 80079d8:	e03e      	b.n	8007a58 <USB_EPStartXfer+0xdea>
 80079da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80079e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <USB_EPStartXfer+0xd8c>
 80079f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079f4:	3b01      	subs	r3, #1
 80079f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80079fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	029b      	lsls	r3, r3, #10
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e020      	b.n	8007a58 <USB_EPStartXfer+0xdea>
 8007a16:	463b      	mov	r3, r7
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d11b      	bne.n	8007a58 <USB_EPStartXfer+0xdea>
 8007a20:	1d3b      	adds	r3, r7, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a30:	4413      	add	r3, r2
 8007a32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a36:	463b      	mov	r3, r7
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	00da      	lsls	r2, r3, #3
 8007a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a42:	4413      	add	r3, r2
 8007a44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a58:	463b      	mov	r3, r7
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	895b      	ldrh	r3, [r3, #10]
 8007a5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a62:	463b      	mov	r3, r7
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6959      	ldr	r1, [r3, #20]
 8007a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a72:	1d38      	adds	r0, r7, #4
 8007a74:	6800      	ldr	r0, [r0, #0]
 8007a76:	f000 fd2b 	bl	80084d0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a7a:	1d3b      	adds	r3, r7, #4
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	463b      	mov	r3, r7
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f107 020a 	add.w	r2, r7, #10
 8007a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a98:	8013      	strh	r3, [r2, #0]
 8007a9a:	f107 030a 	add.w	r3, r7, #10
 8007a9e:	f107 020a 	add.w	r2, r7, #10
 8007aa2:	8812      	ldrh	r2, [r2, #0]
 8007aa4:	f082 0210 	eor.w	r2, r2, #16
 8007aa8:	801a      	strh	r2, [r3, #0]
 8007aaa:	f107 030a 	add.w	r3, r7, #10
 8007aae:	f107 020a 	add.w	r2, r7, #10
 8007ab2:	8812      	ldrh	r2, [r2, #0]
 8007ab4:	f082 0220 	eor.w	r2, r2, #32
 8007ab8:	801a      	strh	r2, [r3, #0]
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	463b      	mov	r3, r7
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	441a      	add	r2, r3
 8007ac8:	f107 030a 	add.w	r3, r7, #10
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	8013      	strh	r3, [r2, #0]
 8007ae2:	e3b5      	b.n	8008250 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	7b1b      	ldrb	r3, [r3, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f040 8090 	bne.w	8007c10 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007af0:	463b      	mov	r3, r7
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	463b      	mov	r3, r7
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d90e      	bls.n	8007b1e <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8007b00:	463b      	mov	r3, r7
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007b0a:	463b      	mov	r3, r7
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699a      	ldr	r2, [r3, #24]
 8007b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b14:	1ad2      	subs	r2, r2, r3
 8007b16:	463b      	mov	r3, r7
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	619a      	str	r2, [r3, #24]
 8007b1c:	e008      	b.n	8007b30 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8007b1e:	463b      	mov	r3, r7
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007b28:	463b      	mov	r3, r7
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b30:	1d3b      	adds	r3, r7, #4
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b38:	1d3b      	adds	r3, r7, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b48:	4413      	add	r3, r2
 8007b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b4e:	463b      	mov	r3, r7
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	00da      	lsls	r2, r3, #3
 8007b56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d116      	bne.n	8007b9a <USB_EPStartXfer+0xf2c>
 8007b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b7e:	801a      	strh	r2, [r3, #0]
 8007b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b96:	801a      	strh	r2, [r3, #0]
 8007b98:	e32c      	b.n	80081f4 <USB_EPStartXfer+0x1586>
 8007b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8007ba0:	d818      	bhi.n	8007bd4 <USB_EPStartXfer+0xf66>
 8007ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <USB_EPStartXfer+0xf54>
 8007bb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007bc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	029b      	lsls	r3, r3, #10
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	e30f      	b.n	80081f4 <USB_EPStartXfer+0x1586>
 8007bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d104      	bne.n	8007bf4 <USB_EPStartXfer+0xf86>
 8007bea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007bf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	029b      	lsls	r3, r3, #10
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c0c:	801a      	strh	r2, [r3, #0]
 8007c0e:	e2f1      	b.n	80081f4 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c10:	463b      	mov	r3, r7
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	78db      	ldrb	r3, [r3, #3]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	f040 818f 	bne.w	8007f3a <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c1c:	463b      	mov	r3, r7
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d175      	bne.n	8007d12 <USB_EPStartXfer+0x10a4>
 8007c26:	1d3b      	adds	r3, r7, #4
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c2e:	1d3b      	adds	r3, r7, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c3e:	4413      	add	r3, r2
 8007c40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c44:	463b      	mov	r3, r7
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	00da      	lsls	r2, r3, #3
 8007c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d116      	bne.n	8007c92 <USB_EPStartXfer+0x1024>
 8007c64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c76:	801a      	strh	r2, [r3, #0]
 8007c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c8e:	801a      	strh	r2, [r3, #0]
 8007c90:	e065      	b.n	8007d5e <USB_EPStartXfer+0x10f0>
 8007c92:	463b      	mov	r3, r7
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b3e      	cmp	r3, #62	; 0x3e
 8007c9a:	d81a      	bhi.n	8007cd2 <USB_EPStartXfer+0x1064>
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	085b      	lsrs	r3, r3, #1
 8007ca4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ca8:	463b      	mov	r3, r7
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d004      	beq.n	8007cc0 <USB_EPStartXfer+0x1052>
 8007cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cba:	3301      	adds	r3, #1
 8007cbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	029b      	lsls	r3, r3, #10
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cce:	801a      	strh	r2, [r3, #0]
 8007cd0:	e045      	b.n	8007d5e <USB_EPStartXfer+0x10f0>
 8007cd2:	463b      	mov	r3, r7
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	095b      	lsrs	r3, r3, #5
 8007cda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007cde:	463b      	mov	r3, r7
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	f003 031f 	and.w	r3, r3, #31
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <USB_EPStartXfer+0x1088>
 8007cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	029b      	lsls	r3, r3, #10
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d0e:	801a      	strh	r2, [r3, #0]
 8007d10:	e025      	b.n	8007d5e <USB_EPStartXfer+0x10f0>
 8007d12:	463b      	mov	r3, r7
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d120      	bne.n	8007d5e <USB_EPStartXfer+0x10f0>
 8007d1c:	1d3b      	adds	r3, r7, #4
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d24:	1d3b      	adds	r3, r7, #4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d34:	4413      	add	r3, r2
 8007d36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	00da      	lsls	r2, r3, #3
 8007d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d46:	4413      	add	r3, r2
 8007d48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d50:	463b      	mov	r3, r7
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d5c:	801a      	strh	r2, [r3, #0]
 8007d5e:	1d3b      	adds	r3, r7, #4
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d66:	463b      	mov	r3, r7
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d175      	bne.n	8007e5c <USB_EPStartXfer+0x11ee>
 8007d70:	1d3b      	adds	r3, r7, #4
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d78:	1d3b      	adds	r3, r7, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d88:	4413      	add	r3, r2
 8007d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d8e:	463b      	mov	r3, r7
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	00da      	lsls	r2, r3, #3
 8007d96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007da4:	463b      	mov	r3, r7
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d116      	bne.n	8007ddc <USB_EPStartXfer+0x116e>
 8007dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dd8:	801a      	strh	r2, [r3, #0]
 8007dda:	e061      	b.n	8007ea0 <USB_EPStartXfer+0x1232>
 8007ddc:	463b      	mov	r3, r7
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	2b3e      	cmp	r3, #62	; 0x3e
 8007de4:	d81a      	bhi.n	8007e1c <USB_EPStartXfer+0x11ae>
 8007de6:	463b      	mov	r3, r7
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007df2:	463b      	mov	r3, r7
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d004      	beq.n	8007e0a <USB_EPStartXfer+0x119c>
 8007e00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e04:	3301      	adds	r3, #1
 8007e06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	029b      	lsls	r3, r3, #10
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	e041      	b.n	8007ea0 <USB_EPStartXfer+0x1232>
 8007e1c:	463b      	mov	r3, r7
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e28:	463b      	mov	r3, r7
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d104      	bne.n	8007e40 <USB_EPStartXfer+0x11d2>
 8007e36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	029b      	lsls	r3, r3, #10
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	e021      	b.n	8007ea0 <USB_EPStartXfer+0x1232>
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d11c      	bne.n	8007ea0 <USB_EPStartXfer+0x1232>
 8007e66:	1d3b      	adds	r3, r7, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e76:	4413      	add	r3, r2
 8007e78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	00da      	lsls	r2, r3, #3
 8007e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e88:	4413      	add	r3, r2
 8007e8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e92:	463b      	mov	r3, r7
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e9e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 81a4 	beq.w	80081f4 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ec0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <USB_EPStartXfer+0x126a>
 8007ecc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10d      	bne.n	8007ef4 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ed8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 8187 	bne.w	80081f4 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ee6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f040 8180 	bne.w	80081f4 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007ef4:	1d3b      	adds	r3, r7, #4
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	463b      	mov	r3, r7
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007f12:	1d3b      	adds	r3, r7, #4
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	463b      	mov	r3, r7
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	441a      	add	r2, r3
 8007f20:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	8013      	strh	r3, [r2, #0]
 8007f38:	e15c      	b.n	80081f4 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f3a:	463b      	mov	r3, r7
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	78db      	ldrb	r3, [r3, #3]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	f040 8155 	bne.w	80081f0 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f46:	463b      	mov	r3, r7
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	699a      	ldr	r2, [r3, #24]
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d90e      	bls.n	8007f74 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007f56:	463b      	mov	r3, r7
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007f60:	463b      	mov	r3, r7
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f6a:	1ad2      	subs	r2, r2, r3
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	619a      	str	r2, [r3, #24]
 8007f72:	e008      	b.n	8007f86 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8007f74:	463b      	mov	r3, r7
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007f7e:	463b      	mov	r3, r7
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2200      	movs	r2, #0
 8007f84:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f86:	463b      	mov	r3, r7
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d16f      	bne.n	8008070 <USB_EPStartXfer+0x1402>
 8007f90:	1d3b      	adds	r3, r7, #4
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f98:	1d3b      	adds	r3, r7, #4
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fa8:	4413      	add	r3, r2
 8007faa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fae:	463b      	mov	r3, r7
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	00da      	lsls	r2, r3, #3
 8007fb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fba:	4413      	add	r3, r2
 8007fbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d116      	bne.n	8007ffa <USB_EPStartXfer+0x138c>
 8007fcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fde:	801a      	strh	r2, [r3, #0]
 8007fe0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	e05f      	b.n	80080ba <USB_EPStartXfer+0x144c>
 8007ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffe:	2b3e      	cmp	r3, #62	; 0x3e
 8008000:	d818      	bhi.n	8008034 <USB_EPStartXfer+0x13c6>
 8008002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008006:	085b      	lsrs	r3, r3, #1
 8008008:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800800c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <USB_EPStartXfer+0x13b4>
 8008018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800801c:	3301      	adds	r3, #1
 800801e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008026:	b29b      	uxth	r3, r3
 8008028:	029b      	lsls	r3, r3, #10
 800802a:	b29a      	uxth	r2, r3
 800802c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	e042      	b.n	80080ba <USB_EPStartXfer+0x144c>
 8008034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800803e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008042:	f003 031f 	and.w	r3, r3, #31
 8008046:	2b00      	cmp	r3, #0
 8008048:	d104      	bne.n	8008054 <USB_EPStartXfer+0x13e6>
 800804a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800804e:	3b01      	subs	r3, #1
 8008050:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008058:	b29b      	uxth	r3, r3
 800805a:	029b      	lsls	r3, r3, #10
 800805c:	b29b      	uxth	r3, r3
 800805e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008066:	b29a      	uxth	r2, r3
 8008068:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800806c:	801a      	strh	r2, [r3, #0]
 800806e:	e024      	b.n	80080ba <USB_EPStartXfer+0x144c>
 8008070:	463b      	mov	r3, r7
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d11f      	bne.n	80080ba <USB_EPStartXfer+0x144c>
 800807a:	1d3b      	adds	r3, r7, #4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008082:	1d3b      	adds	r3, r7, #4
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800808a:	b29b      	uxth	r3, r3
 800808c:	461a      	mov	r2, r3
 800808e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008092:	4413      	add	r3, r2
 8008094:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008098:	463b      	mov	r3, r7
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	00da      	lsls	r2, r3, #3
 80080a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a4:	4413      	add	r3, r2
 80080a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80080b8:	801a      	strh	r2, [r3, #0]
 80080ba:	1d3b      	adds	r3, r7, #4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080c2:	463b      	mov	r3, r7
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	785b      	ldrb	r3, [r3, #1]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d16f      	bne.n	80081ac <USB_EPStartXfer+0x153e>
 80080cc:	1d3b      	adds	r3, r7, #4
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080d4:	1d3b      	adds	r3, r7, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080dc:	b29b      	uxth	r3, r3
 80080de:	461a      	mov	r2, r3
 80080e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e4:	4413      	add	r3, r2
 80080e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080ea:	463b      	mov	r3, r7
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	00da      	lsls	r2, r3, #3
 80080f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f6:	4413      	add	r3, r2
 80080f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d116      	bne.n	8008136 <USB_EPStartXfer+0x14c8>
 8008108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008114:	b29a      	uxth	r2, r3
 8008116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29b      	uxth	r3, r3
 8008124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800812c:	b29a      	uxth	r2, r3
 800812e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008132:	801a      	strh	r2, [r3, #0]
 8008134:	e05e      	b.n	80081f4 <USB_EPStartXfer+0x1586>
 8008136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800813a:	2b3e      	cmp	r3, #62	; 0x3e
 800813c:	d818      	bhi.n	8008170 <USB_EPStartXfer+0x1502>
 800813e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d004      	beq.n	800815e <USB_EPStartXfer+0x14f0>
 8008154:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008158:	3301      	adds	r3, #1
 800815a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800815e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008162:	b29b      	uxth	r3, r3
 8008164:	029b      	lsls	r3, r3, #10
 8008166:	b29a      	uxth	r2, r3
 8008168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800816c:	801a      	strh	r2, [r3, #0]
 800816e:	e041      	b.n	80081f4 <USB_EPStartXfer+0x1586>
 8008170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800817a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <USB_EPStartXfer+0x1522>
 8008186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800818a:	3b01      	subs	r3, #1
 800818c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008190:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008194:	b29b      	uxth	r3, r3
 8008196:	029b      	lsls	r3, r3, #10
 8008198:	b29b      	uxth	r3, r3
 800819a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800819e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081a8:	801a      	strh	r2, [r3, #0]
 80081aa:	e023      	b.n	80081f4 <USB_EPStartXfer+0x1586>
 80081ac:	463b      	mov	r3, r7
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d11e      	bne.n	80081f4 <USB_EPStartXfer+0x1586>
 80081b6:	1d3b      	adds	r3, r7, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081be:	b29b      	uxth	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c6:	4413      	add	r3, r2
 80081c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081cc:	463b      	mov	r3, r7
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	00da      	lsls	r2, r3, #3
 80081d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d8:	4413      	add	r3, r2
 80081da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	e001      	b.n	80081f4 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e02e      	b.n	8008252 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081f4:	1d3b      	adds	r3, r7, #4
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	463b      	mov	r3, r7
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800820a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008212:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008216:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800821a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800821e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008222:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008226:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800822a:	1d3b      	adds	r3, r7, #4
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	463b      	mov	r3, r7
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	441a      	add	r2, r3
 8008238:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800823c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800824c:	b29b      	uxth	r3, r3
 800824e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	785b      	ldrb	r3, [r3, #1]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d020      	beq.n	80082b0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008284:	81bb      	strh	r3, [r7, #12]
 8008286:	89bb      	ldrh	r3, [r7, #12]
 8008288:	f083 0310 	eor.w	r3, r3, #16
 800828c:	81bb      	strh	r3, [r7, #12]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	441a      	add	r2, r3
 8008298:	89bb      	ldrh	r3, [r7, #12]
 800829a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800829e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	8013      	strh	r3, [r2, #0]
 80082ae:	e01f      	b.n	80082f0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c6:	81fb      	strh	r3, [r7, #14]
 80082c8:	89fb      	ldrh	r3, [r7, #14]
 80082ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082ce:	81fb      	strh	r3, [r7, #14]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	441a      	add	r2, r3
 80082da:	89fb      	ldrh	r3, [r7, #14]
 80082dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082fe:	b480      	push	{r7}
 8008300:	b087      	sub	sp, #28
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	7b1b      	ldrb	r3, [r3, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f040 809d 	bne.w	800844c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d04c      	beq.n	80083b4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	823b      	strh	r3, [r7, #16]
 8008328:	8a3b      	ldrh	r3, [r7, #16]
 800832a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d01b      	beq.n	800836a <USB_EPClearStall+0x6c>
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	b29b      	uxth	r3, r3
 8008340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008348:	81fb      	strh	r3, [r7, #14]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	441a      	add	r2, r3
 8008354:	89fb      	ldrh	r3, [r7, #14]
 8008356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800835a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800835e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008362:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008366:	b29b      	uxth	r3, r3
 8008368:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	78db      	ldrb	r3, [r3, #3]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d06c      	beq.n	800844c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008388:	81bb      	strh	r3, [r7, #12]
 800838a:	89bb      	ldrh	r3, [r7, #12]
 800838c:	f083 0320 	eor.w	r3, r3, #32
 8008390:	81bb      	strh	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	441a      	add	r2, r3
 800839c:	89bb      	ldrh	r3, [r7, #12]
 800839e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	8013      	strh	r3, [r2, #0]
 80083b2:	e04b      	b.n	800844c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	82fb      	strh	r3, [r7, #22]
 80083c2:	8afb      	ldrh	r3, [r7, #22]
 80083c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01b      	beq.n	8008404 <USB_EPClearStall+0x106>
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e2:	82bb      	strh	r3, [r7, #20]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	441a      	add	r2, r3
 80083ee:	8abb      	ldrh	r3, [r7, #20]
 80083f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008400:	b29b      	uxth	r3, r3
 8008402:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b29b      	uxth	r3, r3
 8008412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841a:	827b      	strh	r3, [r7, #18]
 800841c:	8a7b      	ldrh	r3, [r7, #18]
 800841e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008422:	827b      	strh	r3, [r7, #18]
 8008424:	8a7b      	ldrh	r3, [r7, #18]
 8008426:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800842a:	827b      	strh	r3, [r7, #18]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	441a      	add	r2, r3
 8008436:	8a7b      	ldrh	r3, [r7, #18]
 8008438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008448:	b29b      	uxth	r3, r3
 800844a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d103      	bne.n	8008474 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2280      	movs	r2, #128	; 0x80
 8008470:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008490:	b29b      	uxth	r3, r3
 8008492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800849a:	b29a      	uxth	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80084be:	b29b      	uxth	r3, r3
 80084c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80084c2:	68fb      	ldr	r3, [r7, #12]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b08d      	sub	sp, #52	; 0x34
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4611      	mov	r1, r2
 80084dc:	461a      	mov	r2, r3
 80084de:	460b      	mov	r3, r1
 80084e0:	80fb      	strh	r3, [r7, #6]
 80084e2:	4613      	mov	r3, r2
 80084e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80084e6:	88bb      	ldrh	r3, [r7, #4]
 80084e8:	3301      	adds	r3, #1
 80084ea:	085b      	lsrs	r3, r3, #1
 80084ec:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084f6:	88fa      	ldrh	r2, [r7, #6]
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008506:	e01b      	b.n	8008540 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	3301      	adds	r3, #1
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	b29b      	uxth	r3, r3
 800851a:	021b      	lsls	r3, r3, #8
 800851c:	b29b      	uxth	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	b29a      	uxth	r2, r3
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	3302      	adds	r3, #2
 8008532:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	3301      	adds	r3, #1
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853c:	3b01      	subs	r3, #1
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e0      	bne.n	8008508 <USB_WritePMA+0x38>
  }
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	3734      	adds	r7, #52	; 0x34
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008554:	b480      	push	{r7}
 8008556:	b08b      	sub	sp, #44	; 0x2c
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4611      	mov	r1, r2
 8008560:	461a      	mov	r2, r3
 8008562:	460b      	mov	r3, r1
 8008564:	80fb      	strh	r3, [r7, #6]
 8008566:	4613      	mov	r3, r2
 8008568:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800856a:	88bb      	ldrh	r3, [r7, #4]
 800856c:	085b      	lsrs	r3, r3, #1
 800856e:	b29b      	uxth	r3, r3
 8008570:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800857a:	88fa      	ldrh	r2, [r7, #6]
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	4413      	add	r3, r2
 8008580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008584:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
 800858a:	e018      	b.n	80085be <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	b29b      	uxth	r3, r3
 8008592:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	3302      	adds	r3, #2
 8008598:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	b2da      	uxtb	r2, r3
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	3301      	adds	r3, #1
 80085a6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	0a1b      	lsrs	r3, r3, #8
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	3301      	adds	r3, #1
 80085b6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	3b01      	subs	r3, #1
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e3      	bne.n	800858c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80085c4:	88bb      	ldrh	r3, [r7, #4]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	701a      	strb	r2, [r3, #0]
  }
}
 80085e0:	bf00      	nop
 80085e2:	372c      	adds	r7, #44	; 0x2c
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80085f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80085fc:	f002 f8ec 	bl	800a7d8 <USBD_static_malloc>
 8008600:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d105      	bne.n	8008614 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008610:	2302      	movs	r3, #2
 8008612:	e066      	b.n	80086e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	7c1b      	ldrb	r3, [r3, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d119      	bne.n	8008658 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008628:	2202      	movs	r2, #2
 800862a:	2181      	movs	r1, #129	; 0x81
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f001 ff78 	bl	800a522 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800863c:	2202      	movs	r2, #2
 800863e:	2101      	movs	r1, #1
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 ff6e 	bl	800a522 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2210      	movs	r2, #16
 8008652:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008656:	e016      	b.n	8008686 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008658:	2340      	movs	r3, #64	; 0x40
 800865a:	2202      	movs	r2, #2
 800865c:	2181      	movs	r1, #129	; 0x81
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f001 ff5f 	bl	800a522 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800866a:	2340      	movs	r3, #64	; 0x40
 800866c:	2202      	movs	r2, #2
 800866e:	2101      	movs	r1, #1
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 ff56 	bl	800a522 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2210      	movs	r2, #16
 8008682:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008686:	2308      	movs	r3, #8
 8008688:	2203      	movs	r2, #3
 800868a:	2182      	movs	r1, #130	; 0x82
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 ff48 	bl	800a522 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	7c1b      	ldrb	r3, [r3, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d109      	bne.n	80086d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086c6:	2101      	movs	r1, #1
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f002 f81a 	bl	800a702 <USBD_LL_PrepareReceive>
 80086ce:	e007      	b.n	80086e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086d6:	2340      	movs	r3, #64	; 0x40
 80086d8:	2101      	movs	r1, #1
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f002 f811 	bl	800a702 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80086f6:	2181      	movs	r1, #129	; 0x81
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 ff38 	bl	800a56e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008704:	2101      	movs	r1, #1
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 ff31 	bl	800a56e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008714:	2182      	movs	r1, #130	; 0x82
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 ff29 	bl	800a56e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00e      	beq.n	8008754 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008746:	4618      	mov	r0, r3
 8008748:	f002 f854 	bl	800a7f4 <USBD_static_free>
    pdev->pClassData = NULL;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008770:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008784:	2303      	movs	r3, #3
 8008786:	e0af      	b.n	80088e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008790:	2b00      	cmp	r3, #0
 8008792:	d03f      	beq.n	8008814 <USBD_CDC_Setup+0xb4>
 8008794:	2b20      	cmp	r3, #32
 8008796:	f040 809f 	bne.w	80088d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	88db      	ldrh	r3, [r3, #6]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d02e      	beq.n	8008800 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	b25b      	sxtb	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	da16      	bge.n	80087da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80087b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	88d2      	ldrh	r2, [r2, #6]
 80087be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	88db      	ldrh	r3, [r3, #6]
 80087c4:	2b07      	cmp	r3, #7
 80087c6:	bf28      	it	cs
 80087c8:	2307      	movcs	r3, #7
 80087ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	89fa      	ldrh	r2, [r7, #14]
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 facf 	bl	8009d76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80087d8:	e085      	b.n	80088e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	785a      	ldrb	r2, [r3, #1]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	88db      	ldrh	r3, [r3, #6]
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80087f0:	6939      	ldr	r1, [r7, #16]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	88db      	ldrh	r3, [r3, #6]
 80087f6:	461a      	mov	r2, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 fae8 	bl	8009dce <USBD_CtlPrepareRx>
      break;
 80087fe:	e072      	b.n	80088e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	7850      	ldrb	r0, [r2, #1]
 800880c:	2200      	movs	r2, #0
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	4798      	blx	r3
      break;
 8008812:	e068      	b.n	80088e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	2b0b      	cmp	r3, #11
 800881a:	d852      	bhi.n	80088c2 <USBD_CDC_Setup+0x162>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <USBD_CDC_Setup+0xc4>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008855 	.word	0x08008855
 8008828:	080088d1 	.word	0x080088d1
 800882c:	080088c3 	.word	0x080088c3
 8008830:	080088c3 	.word	0x080088c3
 8008834:	080088c3 	.word	0x080088c3
 8008838:	080088c3 	.word	0x080088c3
 800883c:	080088c3 	.word	0x080088c3
 8008840:	080088c3 	.word	0x080088c3
 8008844:	080088c3 	.word	0x080088c3
 8008848:	080088c3 	.word	0x080088c3
 800884c:	0800887f 	.word	0x0800887f
 8008850:	080088a9 	.word	0x080088a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b03      	cmp	r3, #3
 800885e:	d107      	bne.n	8008870 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008860:	f107 030a 	add.w	r3, r7, #10
 8008864:	2202      	movs	r2, #2
 8008866:	4619      	mov	r1, r3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f001 fa84 	bl	8009d76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800886e:	e032      	b.n	80088d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 fa0e 	bl	8009c94 <USBD_CtlError>
            ret = USBD_FAIL;
 8008878:	2303      	movs	r3, #3
 800887a:	75fb      	strb	r3, [r7, #23]
          break;
 800887c:	e02b      	b.n	80088d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b03      	cmp	r3, #3
 8008888:	d107      	bne.n	800889a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800888a:	f107 030d 	add.w	r3, r7, #13
 800888e:	2201      	movs	r2, #1
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 fa6f 	bl	8009d76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008898:	e01d      	b.n	80088d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 f9f9 	bl	8009c94 <USBD_CtlError>
            ret = USBD_FAIL;
 80088a2:	2303      	movs	r3, #3
 80088a4:	75fb      	strb	r3, [r7, #23]
          break;
 80088a6:	e016      	b.n	80088d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d00f      	beq.n	80088d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 f9ec 	bl	8009c94 <USBD_CtlError>
            ret = USBD_FAIL;
 80088bc:	2303      	movs	r3, #3
 80088be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80088c0:	e008      	b.n	80088d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 f9e5 	bl	8009c94 <USBD_CtlError>
          ret = USBD_FAIL;
 80088ca:	2303      	movs	r3, #3
 80088cc:	75fb      	strb	r3, [r7, #23]
          break;
 80088ce:	e002      	b.n	80088d6 <USBD_CDC_Setup+0x176>
          break;
 80088d0:	bf00      	nop
 80088d2:	e008      	b.n	80088e6 <USBD_CDC_Setup+0x186>
          break;
 80088d4:	bf00      	nop
      }
      break;
 80088d6:	e006      	b.n	80088e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 f9da 	bl	8009c94 <USBD_CtlError>
      ret = USBD_FAIL;
 80088e0:	2303      	movs	r3, #3
 80088e2:	75fb      	strb	r3, [r7, #23]
      break;
 80088e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008902:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800890e:	2303      	movs	r3, #3
 8008910:	e04f      	b.n	80089b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008918:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	3318      	adds	r3, #24
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d029      	beq.n	8008984 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008930:	78fa      	ldrb	r2, [r7, #3]
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	3318      	adds	r3, #24
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	78f9      	ldrb	r1, [r7, #3]
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	460b      	mov	r3, r1
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	4403      	add	r3, r0
 8008950:	3338      	adds	r3, #56	; 0x38
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	fbb2 f1f3 	udiv	r1, r2, r3
 8008958:	fb03 f301 	mul.w	r3, r3, r1
 800895c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800895e:	2b00      	cmp	r3, #0
 8008960:	d110      	bne.n	8008984 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	3318      	adds	r3, #24
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008976:	78f9      	ldrb	r1, [r7, #3]
 8008978:	2300      	movs	r3, #0
 800897a:	2200      	movs	r2, #0
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 fe9f 	bl	800a6c0 <USBD_LL_Transmit>
 8008982:	e015      	b.n	80089b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2200      	movs	r2, #0
 8008988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80089ac:	78fa      	ldrb	r2, [r7, #3]
 80089ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80089d8:	2303      	movs	r3, #3
 80089da:	e015      	b.n	8008a08 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 feaf 	bl	800a744 <USBD_LL_GetRxDataSize>
 80089e6:	4602      	mov	r2, r0
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a02:	4611      	mov	r1, r2
 8008a04:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e01b      	b.n	8008a62 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d015      	beq.n	8008a60 <USBD_CDC_EP0_RxReady+0x50>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a3a:	2bff      	cmp	r3, #255	; 0xff
 8008a3c:	d010      	beq.n	8008a60 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008a4c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a54:	b292      	uxth	r2, r2
 8008a56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	22ff      	movs	r2, #255	; 0xff
 8008a5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
	...

08008a6c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2243      	movs	r2, #67	; 0x43
 8008a78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008a7a:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	200000bc 	.word	0x200000bc

08008a8c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2243      	movs	r2, #67	; 0x43
 8008a98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008a9a:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	20000078 	.word	0x20000078

08008aac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2243      	movs	r2, #67	; 0x43
 8008ab8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008aba:	4b03      	ldr	r3, [pc, #12]	; (8008ac8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	20000100 	.word	0x20000100

08008acc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	220a      	movs	r2, #10
 8008ad8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ada:	4b03      	ldr	r3, [pc, #12]	; (8008ae8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	20000034 	.word	0x20000034

08008aec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e004      	b.n	8008b0a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b087      	sub	sp, #28
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b28:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e008      	b.n	8008b46 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b085      	sub	sp, #20
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e004      	b.n	8008b78 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b92:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b94:	2301      	movs	r3, #1
 8008b96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e01a      	b.n	8008bdc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d114      	bne.n	8008bda <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008bce:	2181      	movs	r1, #129	; 0x81
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 fd75 	bl	800a6c0 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bf2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e016      	b.n	8008c30 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	7c1b      	ldrb	r3, [r3, #16]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c14:	2101      	movs	r1, #1
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 fd73 	bl	800a702 <USBD_LL_PrepareReceive>
 8008c1c:	e007      	b.n	8008c2e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c24:	2340      	movs	r3, #64	; 0x40
 8008c26:	2101      	movs	r1, #1
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f001 fd6a 	bl	800a702 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e01f      	b.n	8008c90 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	79fa      	ldrb	r2, [r7, #7]
 8008c82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f001 fbd1 	bl	800a42c <USBD_LL_Init>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e016      	b.n	8008cde <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	f107 020e 	add.w	r2, r7, #14
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	4798      	blx	r3
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f001 fbfc 	bl	800a4ec <USBD_LL_Start>
 8008cf4:	4603      	mov	r3, r0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008d20:	2303      	movs	r3, #3
 8008d22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d009      	beq.n	8008d42 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	4611      	mov	r1, r2
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	4798      	blx	r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	4798      	blx	r3
  }

  return USBD_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 ff46 	bl	8009c20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008da2:	461a      	mov	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008db0:	f003 031f 	and.w	r3, r3, #31
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d01a      	beq.n	8008dee <USBD_LL_SetupStage+0x72>
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d822      	bhi.n	8008e02 <USBD_LL_SetupStage+0x86>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <USBD_LL_SetupStage+0x4a>
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d00a      	beq.n	8008dda <USBD_LL_SetupStage+0x5e>
 8008dc4:	e01d      	b.n	8008e02 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f9ee 	bl	80091b0 <USBD_StdDevReq>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd8:	e020      	b.n	8008e1c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fa52 	bl	800928c <USBD_StdItfReq>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]
      break;
 8008dec:	e016      	b.n	8008e1c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa91 	bl	800931e <USBD_StdEPReq>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8008e00:	e00c      	b.n	8008e1c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 fbcb 	bl	800a5ac <USBD_LL_StallEP>
 8008e16:	4603      	mov	r3, r0
 8008e18:	73fb      	strb	r3, [r7, #15]
      break;
 8008e1a:	bf00      	nop
  }

  return ret;
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b086      	sub	sp, #24
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	607a      	str	r2, [r7, #4]
 8008e32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d138      	bne.n	8008eac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d14a      	bne.n	8008ee2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d913      	bls.n	8008e80 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	689a      	ldr	r2, [r3, #8]
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	1ad2      	subs	r2, r2, r3
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	bf28      	it	cs
 8008e72:	4613      	movcs	r3, r2
 8008e74:	461a      	mov	r2, r3
 8008e76:	6879      	ldr	r1, [r7, #4]
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 ffc5 	bl	8009e08 <USBD_CtlContinueRx>
 8008e7e:	e030      	b.n	8008ee2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d10b      	bne.n	8008ea4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 ffc0 	bl	8009e2a <USBD_CtlSendStatus>
 8008eaa:	e01a      	b.n	8008ee2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d114      	bne.n	8008ee2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00e      	beq.n	8008ee2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	7afa      	ldrb	r2, [r7, #11]
 8008ece:	4611      	mov	r1, r2
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	4798      	blx	r3
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	e000      	b.n	8008ee4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008efa:	7afb      	ldrb	r3, [r7, #11]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d16b      	bne.n	8008fd8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3314      	adds	r3, #20
 8008f04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d156      	bne.n	8008fbe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d914      	bls.n	8008f46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	1ad2      	subs	r2, r2, r3
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f000 ff3a 	bl	8009dac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f001 fbdf 	bl	800a702 <USBD_LL_PrepareReceive>
 8008f44:	e03b      	b.n	8008fbe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d11c      	bne.n	8008f8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d316      	bcc.n	8008f8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	685a      	ldr	r2, [r3, #4]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d20f      	bcs.n	8008f8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2100      	movs	r1, #0
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 ff1b 	bl	8009dac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2200      	movs	r2, #0
 8008f82:	2100      	movs	r1, #0
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f001 fbbc 	bl	800a702 <USBD_LL_PrepareReceive>
 8008f8a:	e018      	b.n	8008fbe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d10b      	bne.n	8008fb0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d005      	beq.n	8008fb0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fb0:	2180      	movs	r1, #128	; 0x80
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f001 fafa 	bl	800a5ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 ff49 	bl	8009e50 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d122      	bne.n	800900e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f7ff fe98 	bl	8008cfe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008fd6:	e01a      	b.n	800900e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d114      	bne.n	800900e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00e      	beq.n	800900e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	7afa      	ldrb	r2, [r7, #11]
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	4798      	blx	r3
 8009000:	4603      	mov	r3, r0
 8009002:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009004:	7dfb      	ldrb	r3, [r7, #23]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	e000      	b.n	8009010 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009048:	2303      	movs	r3, #3
 800904a:	e02f      	b.n	80090ac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00f      	beq.n	8009076 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d009      	beq.n	8009076 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6852      	ldr	r2, [r2, #4]
 800906e:	b2d2      	uxtb	r2, r2
 8009070:	4611      	mov	r1, r2
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009076:	2340      	movs	r3, #64	; 0x40
 8009078:	2200      	movs	r2, #0
 800907a:	2100      	movs	r1, #0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 fa50 	bl	800a522 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2240      	movs	r2, #64	; 0x40
 800908e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009092:	2340      	movs	r3, #64	; 0x40
 8009094:	2200      	movs	r2, #0
 8009096:	2180      	movs	r1, #128	; 0x80
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f001 fa42 	bl	800a522 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2240      	movs	r2, #64	; 0x40
 80090a8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2204      	movs	r2, #4
 80090ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b04      	cmp	r3, #4
 8009112:	d106      	bne.n	8009122 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800911a:	b2da      	uxtb	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009142:	2303      	movs	r3, #3
 8009144:	e012      	b.n	800916c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b03      	cmp	r3, #3
 8009150:	d10b      	bne.n	800916a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	3301      	adds	r3, #1
 800918a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009192:	8a3b      	ldrh	r3, [r7, #16]
 8009194:	021b      	lsls	r3, r3, #8
 8009196:	b21a      	sxth	r2, r3
 8009198:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800919c:	4313      	orrs	r3, r2
 800919e:	b21b      	sxth	r3, r3
 80091a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80091a2:	89fb      	ldrh	r3, [r7, #14]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	371c      	adds	r7, #28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d005      	beq.n	80091d6 <USBD_StdDevReq+0x26>
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	d853      	bhi.n	8009276 <USBD_StdDevReq+0xc6>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00b      	beq.n	80091ea <USBD_StdDevReq+0x3a>
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d14f      	bne.n	8009276 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	4798      	blx	r3
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]
      break;
 80091e8:	e04a      	b.n	8009280 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	785b      	ldrb	r3, [r3, #1]
 80091ee:	2b09      	cmp	r3, #9
 80091f0:	d83b      	bhi.n	800926a <USBD_StdDevReq+0xba>
 80091f2:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <USBD_StdDevReq+0x48>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	0800924d 	.word	0x0800924d
 80091fc:	08009261 	.word	0x08009261
 8009200:	0800926b 	.word	0x0800926b
 8009204:	08009257 	.word	0x08009257
 8009208:	0800926b 	.word	0x0800926b
 800920c:	0800922b 	.word	0x0800922b
 8009210:	08009221 	.word	0x08009221
 8009214:	0800926b 	.word	0x0800926b
 8009218:	08009243 	.word	0x08009243
 800921c:	08009235 	.word	0x08009235
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f9de 	bl	80095e4 <USBD_GetDescriptor>
          break;
 8009228:	e024      	b.n	8009274 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fb6d 	bl	800990c <USBD_SetAddress>
          break;
 8009232:	e01f      	b.n	8009274 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fbac 	bl	8009994 <USBD_SetConfig>
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]
          break;
 8009240:	e018      	b.n	8009274 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fc4b 	bl	8009ae0 <USBD_GetConfig>
          break;
 800924a:	e013      	b.n	8009274 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fc7c 	bl	8009b4c <USBD_GetStatus>
          break;
 8009254:	e00e      	b.n	8009274 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fcab 	bl	8009bb4 <USBD_SetFeature>
          break;
 800925e:	e009      	b.n	8009274 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fcba 	bl	8009bdc <USBD_ClrFeature>
          break;
 8009268:	e004      	b.n	8009274 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fd11 	bl	8009c94 <USBD_CtlError>
          break;
 8009272:	bf00      	nop
      }
      break;
 8009274:	e004      	b.n	8009280 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fd0b 	bl	8009c94 <USBD_CtlError>
      break;
 800927e:	bf00      	nop
  }

  return ret;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop

0800928c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092a2:	2b40      	cmp	r3, #64	; 0x40
 80092a4:	d005      	beq.n	80092b2 <USBD_StdItfReq+0x26>
 80092a6:	2b40      	cmp	r3, #64	; 0x40
 80092a8:	d82f      	bhi.n	800930a <USBD_StdItfReq+0x7e>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <USBD_StdItfReq+0x26>
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d12b      	bne.n	800930a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	3b01      	subs	r3, #1
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d81d      	bhi.n	80092fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	889b      	ldrh	r3, [r3, #4]
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d813      	bhi.n	80092f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	88db      	ldrh	r3, [r3, #6]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d110      	bne.n	8009306 <USBD_StdItfReq+0x7a>
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10d      	bne.n	8009306 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fd9d 	bl	8009e2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092f0:	e009      	b.n	8009306 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fccd 	bl	8009c94 <USBD_CtlError>
          break;
 80092fa:	e004      	b.n	8009306 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fcc8 	bl	8009c94 <USBD_CtlError>
          break;
 8009304:	e000      	b.n	8009308 <USBD_StdItfReq+0x7c>
          break;
 8009306:	bf00      	nop
      }
      break;
 8009308:	e004      	b.n	8009314 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fcc1 	bl	8009c94 <USBD_CtlError>
      break;
 8009312:	bf00      	nop
  }

  return ret;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	889b      	ldrh	r3, [r3, #4]
 8009330:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800933a:	2b40      	cmp	r3, #64	; 0x40
 800933c:	d007      	beq.n	800934e <USBD_StdEPReq+0x30>
 800933e:	2b40      	cmp	r3, #64	; 0x40
 8009340:	f200 8145 	bhi.w	80095ce <USBD_StdEPReq+0x2b0>
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00c      	beq.n	8009362 <USBD_StdEPReq+0x44>
 8009348:	2b20      	cmp	r3, #32
 800934a:	f040 8140 	bne.w	80095ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	4798      	blx	r3
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]
      break;
 8009360:	e13a      	b.n	80095d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	785b      	ldrb	r3, [r3, #1]
 8009366:	2b03      	cmp	r3, #3
 8009368:	d007      	beq.n	800937a <USBD_StdEPReq+0x5c>
 800936a:	2b03      	cmp	r3, #3
 800936c:	f300 8129 	bgt.w	80095c2 <USBD_StdEPReq+0x2a4>
 8009370:	2b00      	cmp	r3, #0
 8009372:	d07f      	beq.n	8009474 <USBD_StdEPReq+0x156>
 8009374:	2b01      	cmp	r3, #1
 8009376:	d03c      	beq.n	80093f2 <USBD_StdEPReq+0xd4>
 8009378:	e123      	b.n	80095c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b02      	cmp	r3, #2
 8009384:	d002      	beq.n	800938c <USBD_StdEPReq+0x6e>
 8009386:	2b03      	cmp	r3, #3
 8009388:	d016      	beq.n	80093b8 <USBD_StdEPReq+0x9a>
 800938a:	e02c      	b.n	80093e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00d      	beq.n	80093ae <USBD_StdEPReq+0x90>
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	2b80      	cmp	r3, #128	; 0x80
 8009396:	d00a      	beq.n	80093ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009398:	7bbb      	ldrb	r3, [r7, #14]
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 f905 	bl	800a5ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093a2:	2180      	movs	r1, #128	; 0x80
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 f901 	bl	800a5ac <USBD_LL_StallEP>
 80093aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093ac:	e020      	b.n	80093f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fc6f 	bl	8009c94 <USBD_CtlError>
              break;
 80093b6:	e01b      	b.n	80093f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	885b      	ldrh	r3, [r3, #2]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10e      	bne.n	80093de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00b      	beq.n	80093de <USBD_StdEPReq+0xc0>
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b80      	cmp	r3, #128	; 0x80
 80093ca:	d008      	beq.n	80093de <USBD_StdEPReq+0xc0>
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	88db      	ldrh	r3, [r3, #6]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 f8e7 	bl	800a5ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fd23 	bl	8009e2a <USBD_CtlSendStatus>

              break;
 80093e4:	e004      	b.n	80093f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fc53 	bl	8009c94 <USBD_CtlError>
              break;
 80093ee:	bf00      	nop
          }
          break;
 80093f0:	e0ec      	b.n	80095cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d002      	beq.n	8009404 <USBD_StdEPReq+0xe6>
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d016      	beq.n	8009430 <USBD_StdEPReq+0x112>
 8009402:	e030      	b.n	8009466 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00d      	beq.n	8009426 <USBD_StdEPReq+0x108>
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	2b80      	cmp	r3, #128	; 0x80
 800940e:	d00a      	beq.n	8009426 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 f8c9 	bl	800a5ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800941a:	2180      	movs	r1, #128	; 0x80
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 f8c5 	bl	800a5ac <USBD_LL_StallEP>
 8009422:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009424:	e025      	b.n	8009472 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fc33 	bl	8009c94 <USBD_CtlError>
              break;
 800942e:	e020      	b.n	8009472 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	885b      	ldrh	r3, [r3, #2]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d11b      	bne.n	8009470 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009438:	7bbb      	ldrb	r3, [r7, #14]
 800943a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800943e:	2b00      	cmp	r3, #0
 8009440:	d004      	beq.n	800944c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f001 f8cf 	bl	800a5ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fcec 	bl	8009e2a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009464:	e004      	b.n	8009470 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fc13 	bl	8009c94 <USBD_CtlError>
              break;
 800946e:	e000      	b.n	8009472 <USBD_StdEPReq+0x154>
              break;
 8009470:	bf00      	nop
          }
          break;
 8009472:	e0ab      	b.n	80095cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d002      	beq.n	8009486 <USBD_StdEPReq+0x168>
 8009480:	2b03      	cmp	r3, #3
 8009482:	d032      	beq.n	80094ea <USBD_StdEPReq+0x1cc>
 8009484:	e097      	b.n	80095b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009486:	7bbb      	ldrb	r3, [r7, #14]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d007      	beq.n	800949c <USBD_StdEPReq+0x17e>
 800948c:	7bbb      	ldrb	r3, [r7, #14]
 800948e:	2b80      	cmp	r3, #128	; 0x80
 8009490:	d004      	beq.n	800949c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fbfd 	bl	8009c94 <USBD_CtlError>
                break;
 800949a:	e091      	b.n	80095c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	da0b      	bge.n	80094bc <USBD_StdEPReq+0x19e>
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	3310      	adds	r3, #16
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	4413      	add	r3, r2
 80094b8:	3304      	adds	r3, #4
 80094ba:	e00b      	b.n	80094d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	4413      	add	r3, r2
 80094d2:	3304      	adds	r3, #4
 80094d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2202      	movs	r2, #2
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fc47 	bl	8009d76 <USBD_CtlSendData>
              break;
 80094e8:	e06a      	b.n	80095c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	da11      	bge.n	8009516 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	f003 020f 	and.w	r2, r3, #15
 80094f8:	6879      	ldr	r1, [r7, #4]
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	440b      	add	r3, r1
 8009504:	3324      	adds	r3, #36	; 0x24
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d117      	bne.n	800953c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fbc0 	bl	8009c94 <USBD_CtlError>
                  break;
 8009514:	e054      	b.n	80095c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009516:	7bbb      	ldrb	r3, [r7, #14]
 8009518:	f003 020f 	and.w	r2, r3, #15
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800952c:	881b      	ldrh	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d104      	bne.n	800953c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fbad 	bl	8009c94 <USBD_CtlError>
                  break;
 800953a:	e041      	b.n	80095c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800953c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	da0b      	bge.n	800955c <USBD_StdEPReq+0x23e>
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800954a:	4613      	mov	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	3310      	adds	r3, #16
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	3304      	adds	r3, #4
 800955a:	e00b      	b.n	8009574 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	4413      	add	r3, r2
 8009572:	3304      	adds	r3, #4
 8009574:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <USBD_StdEPReq+0x264>
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	2b80      	cmp	r3, #128	; 0x80
 8009580:	d103      	bne.n	800958a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	e00e      	b.n	80095a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 f84a 	bl	800a628 <USBD_LL_IsStallEP>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2201      	movs	r2, #1
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	e002      	b.n	80095a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2200      	movs	r2, #0
 80095a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2202      	movs	r2, #2
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fbe1 	bl	8009d76 <USBD_CtlSendData>
              break;
 80095b4:	e004      	b.n	80095c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fb6b 	bl	8009c94 <USBD_CtlError>
              break;
 80095be:	bf00      	nop
          }
          break;
 80095c0:	e004      	b.n	80095cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fb65 	bl	8009c94 <USBD_CtlError>
          break;
 80095ca:	bf00      	nop
      }
      break;
 80095cc:	e004      	b.n	80095d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fb5f 	bl	8009c94 <USBD_CtlError>
      break;
 80095d6:	bf00      	nop
  }

  return ret;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095ee:	2300      	movs	r3, #0
 80095f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	885b      	ldrh	r3, [r3, #2]
 80095fe:	0a1b      	lsrs	r3, r3, #8
 8009600:	b29b      	uxth	r3, r3
 8009602:	3b01      	subs	r3, #1
 8009604:	2b0e      	cmp	r3, #14
 8009606:	f200 8152 	bhi.w	80098ae <USBD_GetDescriptor+0x2ca>
 800960a:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <USBD_GetDescriptor+0x2c>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	08009681 	.word	0x08009681
 8009614:	08009699 	.word	0x08009699
 8009618:	080096d9 	.word	0x080096d9
 800961c:	080098af 	.word	0x080098af
 8009620:	080098af 	.word	0x080098af
 8009624:	0800984f 	.word	0x0800984f
 8009628:	0800987b 	.word	0x0800987b
 800962c:	080098af 	.word	0x080098af
 8009630:	080098af 	.word	0x080098af
 8009634:	080098af 	.word	0x080098af
 8009638:	080098af 	.word	0x080098af
 800963c:	080098af 	.word	0x080098af
 8009640:	080098af 	.word	0x080098af
 8009644:	080098af 	.word	0x080098af
 8009648:	0800964d 	.word	0x0800964d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	7c12      	ldrb	r2, [r2, #16]
 8009664:	f107 0108 	add.w	r1, r7, #8
 8009668:	4610      	mov	r0, r2
 800966a:	4798      	blx	r3
 800966c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800966e:	e126      	b.n	80098be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fb0e 	bl	8009c94 <USBD_CtlError>
        err++;
 8009678:	7afb      	ldrb	r3, [r7, #11]
 800967a:	3301      	adds	r3, #1
 800967c:	72fb      	strb	r3, [r7, #11]
      break;
 800967e:	e11e      	b.n	80098be <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	7c12      	ldrb	r2, [r2, #16]
 800968c:	f107 0108 	add.w	r1, r7, #8
 8009690:	4610      	mov	r0, r2
 8009692:	4798      	blx	r3
 8009694:	60f8      	str	r0, [r7, #12]
      break;
 8009696:	e112      	b.n	80098be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7c1b      	ldrb	r3, [r3, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10d      	bne.n	80096bc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a8:	f107 0208 	add.w	r2, r7, #8
 80096ac:	4610      	mov	r0, r2
 80096ae:	4798      	blx	r3
 80096b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3301      	adds	r3, #1
 80096b6:	2202      	movs	r2, #2
 80096b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096ba:	e100      	b.n	80098be <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c4:	f107 0208 	add.w	r2, r7, #8
 80096c8:	4610      	mov	r0, r2
 80096ca:	4798      	blx	r3
 80096cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3301      	adds	r3, #1
 80096d2:	2202      	movs	r2, #2
 80096d4:	701a      	strb	r2, [r3, #0]
      break;
 80096d6:	e0f2      	b.n	80098be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	885b      	ldrh	r3, [r3, #2]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b05      	cmp	r3, #5
 80096e0:	f200 80ac 	bhi.w	800983c <USBD_GetDescriptor+0x258>
 80096e4:	a201      	add	r2, pc, #4	; (adr r2, 80096ec <USBD_GetDescriptor+0x108>)
 80096e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ea:	bf00      	nop
 80096ec:	08009705 	.word	0x08009705
 80096f0:	08009739 	.word	0x08009739
 80096f4:	0800976d 	.word	0x0800976d
 80096f8:	080097a1 	.word	0x080097a1
 80096fc:	080097d5 	.word	0x080097d5
 8009700:	08009809 	.word	0x08009809
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	7c12      	ldrb	r2, [r2, #16]
 800971c:	f107 0108 	add.w	r1, r7, #8
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
 8009724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009726:	e091      	b.n	800984c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fab2 	bl	8009c94 <USBD_CtlError>
            err++;
 8009730:	7afb      	ldrb	r3, [r7, #11]
 8009732:	3301      	adds	r3, #1
 8009734:	72fb      	strb	r3, [r7, #11]
          break;
 8009736:	e089      	b.n	800984c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00b      	beq.n	800975c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	7c12      	ldrb	r2, [r2, #16]
 8009750:	f107 0108 	add.w	r1, r7, #8
 8009754:	4610      	mov	r0, r2
 8009756:	4798      	blx	r3
 8009758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800975a:	e077      	b.n	800984c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fa98 	bl	8009c94 <USBD_CtlError>
            err++;
 8009764:	7afb      	ldrb	r3, [r7, #11]
 8009766:	3301      	adds	r3, #1
 8009768:	72fb      	strb	r3, [r7, #11]
          break;
 800976a:	e06f      	b.n	800984c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	7c12      	ldrb	r2, [r2, #16]
 8009784:	f107 0108 	add.w	r1, r7, #8
 8009788:	4610      	mov	r0, r2
 800978a:	4798      	blx	r3
 800978c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800978e:	e05d      	b.n	800984c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fa7e 	bl	8009c94 <USBD_CtlError>
            err++;
 8009798:	7afb      	ldrb	r3, [r7, #11]
 800979a:	3301      	adds	r3, #1
 800979c:	72fb      	strb	r3, [r7, #11]
          break;
 800979e:	e055      	b.n	800984c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	7c12      	ldrb	r2, [r2, #16]
 80097b8:	f107 0108 	add.w	r1, r7, #8
 80097bc:	4610      	mov	r0, r2
 80097be:	4798      	blx	r3
 80097c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097c2:	e043      	b.n	800984c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fa64 	bl	8009c94 <USBD_CtlError>
            err++;
 80097cc:	7afb      	ldrb	r3, [r7, #11]
 80097ce:	3301      	adds	r3, #1
 80097d0:	72fb      	strb	r3, [r7, #11]
          break;
 80097d2:	e03b      	b.n	800984c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097da:	695b      	ldr	r3, [r3, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00b      	beq.n	80097f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	7c12      	ldrb	r2, [r2, #16]
 80097ec:	f107 0108 	add.w	r1, r7, #8
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3
 80097f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097f6:	e029      	b.n	800984c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa4a 	bl	8009c94 <USBD_CtlError>
            err++;
 8009800:	7afb      	ldrb	r3, [r7, #11]
 8009802:	3301      	adds	r3, #1
 8009804:	72fb      	strb	r3, [r7, #11]
          break;
 8009806:	e021      	b.n	800984c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	7c12      	ldrb	r2, [r2, #16]
 8009820:	f107 0108 	add.w	r1, r7, #8
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
 8009828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800982a:	e00f      	b.n	800984c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fa30 	bl	8009c94 <USBD_CtlError>
            err++;
 8009834:	7afb      	ldrb	r3, [r7, #11]
 8009836:	3301      	adds	r3, #1
 8009838:	72fb      	strb	r3, [r7, #11]
          break;
 800983a:	e007      	b.n	800984c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa28 	bl	8009c94 <USBD_CtlError>
          err++;
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	3301      	adds	r3, #1
 8009848:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800984a:	bf00      	nop
      }
      break;
 800984c:	e037      	b.n	80098be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7c1b      	ldrb	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d109      	bne.n	800986a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800985c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985e:	f107 0208 	add.w	r2, r7, #8
 8009862:	4610      	mov	r0, r2
 8009864:	4798      	blx	r3
 8009866:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009868:	e029      	b.n	80098be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fa11 	bl	8009c94 <USBD_CtlError>
        err++;
 8009872:	7afb      	ldrb	r3, [r7, #11]
 8009874:	3301      	adds	r3, #1
 8009876:	72fb      	strb	r3, [r7, #11]
      break;
 8009878:	e021      	b.n	80098be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7c1b      	ldrb	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10d      	bne.n	800989e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988a:	f107 0208 	add.w	r2, r7, #8
 800988e:	4610      	mov	r0, r2
 8009890:	4798      	blx	r3
 8009892:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	3301      	adds	r3, #1
 8009898:	2207      	movs	r2, #7
 800989a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800989c:	e00f      	b.n	80098be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f9f7 	bl	8009c94 <USBD_CtlError>
        err++;
 80098a6:	7afb      	ldrb	r3, [r7, #11]
 80098a8:	3301      	adds	r3, #1
 80098aa:	72fb      	strb	r3, [r7, #11]
      break;
 80098ac:	e007      	b.n	80098be <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f9ef 	bl	8009c94 <USBD_CtlError>
      err++;
 80098b6:	7afb      	ldrb	r3, [r7, #11]
 80098b8:	3301      	adds	r3, #1
 80098ba:	72fb      	strb	r3, [r7, #11]
      break;
 80098bc:	bf00      	nop
  }

  if (err != 0U)
 80098be:	7afb      	ldrb	r3, [r7, #11]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d11e      	bne.n	8009902 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	88db      	ldrh	r3, [r3, #6]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d016      	beq.n	80098fa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80098cc:	893b      	ldrh	r3, [r7, #8]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00e      	beq.n	80098f0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	88da      	ldrh	r2, [r3, #6]
 80098d6:	893b      	ldrh	r3, [r7, #8]
 80098d8:	4293      	cmp	r3, r2
 80098da:	bf28      	it	cs
 80098dc:	4613      	movcs	r3, r2
 80098de:	b29b      	uxth	r3, r3
 80098e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098e2:	893b      	ldrh	r3, [r7, #8]
 80098e4:	461a      	mov	r2, r3
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fa44 	bl	8009d76 <USBD_CtlSendData>
 80098ee:	e009      	b.n	8009904 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f9ce 	bl	8009c94 <USBD_CtlError>
 80098f8:	e004      	b.n	8009904 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fa95 	bl	8009e2a <USBD_CtlSendStatus>
 8009900:	e000      	b.n	8009904 <USBD_GetDescriptor+0x320>
    return;
 8009902:	bf00      	nop
  }
}
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop

0800990c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	889b      	ldrh	r3, [r3, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d131      	bne.n	8009982 <USBD_SetAddress+0x76>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	88db      	ldrh	r3, [r3, #6]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d12d      	bne.n	8009982 <USBD_SetAddress+0x76>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	885b      	ldrh	r3, [r3, #2]
 800992a:	2b7f      	cmp	r3, #127	; 0x7f
 800992c:	d829      	bhi.n	8009982 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	885b      	ldrh	r3, [r3, #2]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009938:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b03      	cmp	r3, #3
 8009944:	d104      	bne.n	8009950 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f9a3 	bl	8009c94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800994e:	e01d      	b.n	800998c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	7bfa      	ldrb	r2, [r7, #15]
 8009954:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fe90 	bl	800a682 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fa61 	bl	8009e2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2202      	movs	r2, #2
 8009972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009976:	e009      	b.n	800998c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009980:	e004      	b.n	800998c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f985 	bl	8009c94 <USBD_CtlError>
  }
}
 800998a:	bf00      	nop
 800998c:	bf00      	nop
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	885b      	ldrh	r3, [r3, #2]
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	4b4c      	ldr	r3, [pc, #304]	; (8009adc <USBD_SetConfig+0x148>)
 80099aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099ac:	4b4b      	ldr	r3, [pc, #300]	; (8009adc <USBD_SetConfig+0x148>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d905      	bls.n	80099c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f96c 	bl	8009c94 <USBD_CtlError>
    return USBD_FAIL;
 80099bc:	2303      	movs	r3, #3
 80099be:	e088      	b.n	8009ad2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d002      	beq.n	80099d2 <USBD_SetConfig+0x3e>
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d025      	beq.n	8009a1c <USBD_SetConfig+0x88>
 80099d0:	e071      	b.n	8009ab6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099d2:	4b42      	ldr	r3, [pc, #264]	; (8009adc <USBD_SetConfig+0x148>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d01c      	beq.n	8009a14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80099da:	4b40      	ldr	r3, [pc, #256]	; (8009adc <USBD_SetConfig+0x148>)
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099e4:	4b3d      	ldr	r3, [pc, #244]	; (8009adc <USBD_SetConfig+0x148>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff f992 	bl	8008d14 <USBD_SetClassConfig>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d004      	beq.n	8009a04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f949 	bl	8009c94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a02:	e065      	b.n	8009ad0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fa10 	bl	8009e2a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2203      	movs	r2, #3
 8009a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a12:	e05d      	b.n	8009ad0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fa08 	bl	8009e2a <USBD_CtlSendStatus>
      break;
 8009a1a:	e059      	b.n	8009ad0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a1c:	4b2f      	ldr	r3, [pc, #188]	; (8009adc <USBD_SetConfig+0x148>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d112      	bne.n	8009a4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009a2c:	4b2b      	ldr	r3, [pc, #172]	; (8009adc <USBD_SetConfig+0x148>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a36:	4b29      	ldr	r3, [pc, #164]	; (8009adc <USBD_SetConfig+0x148>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff f985 	bl	8008d4c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f9f1 	bl	8009e2a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a48:	e042      	b.n	8009ad0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009a4a:	4b24      	ldr	r3, [pc, #144]	; (8009adc <USBD_SetConfig+0x148>)
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d02a      	beq.n	8009aae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7ff f973 	bl	8008d4c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a66:	4b1d      	ldr	r3, [pc, #116]	; (8009adc <USBD_SetConfig+0x148>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a70:	4b1a      	ldr	r3, [pc, #104]	; (8009adc <USBD_SetConfig+0x148>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff f94c 	bl	8008d14 <USBD_SetClassConfig>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00f      	beq.n	8009aa6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f903 	bl	8009c94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff f958 	bl	8008d4c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009aa4:	e014      	b.n	8009ad0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f9bf 	bl	8009e2a <USBD_CtlSendStatus>
      break;
 8009aac:	e010      	b.n	8009ad0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f9bb 	bl	8009e2a <USBD_CtlSendStatus>
      break;
 8009ab4:	e00c      	b.n	8009ad0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f8eb 	bl	8009c94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009abe:	4b07      	ldr	r3, [pc, #28]	; (8009adc <USBD_SetConfig+0x148>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff f941 	bl	8008d4c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009aca:	2303      	movs	r3, #3
 8009acc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ace:	bf00      	nop
  }

  return ret;
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	200001d3 	.word	0x200001d3

08009ae0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	88db      	ldrh	r3, [r3, #6]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d004      	beq.n	8009afc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f8cd 	bl	8009c94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009afa:	e023      	b.n	8009b44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	dc02      	bgt.n	8009b0e <USBD_GetConfig+0x2e>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	dc03      	bgt.n	8009b14 <USBD_GetConfig+0x34>
 8009b0c:	e015      	b.n	8009b3a <USBD_GetConfig+0x5a>
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d00b      	beq.n	8009b2a <USBD_GetConfig+0x4a>
 8009b12:	e012      	b.n	8009b3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	2201      	movs	r2, #1
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f927 	bl	8009d76 <USBD_CtlSendData>
        break;
 8009b28:	e00c      	b.n	8009b44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	2201      	movs	r2, #1
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f91f 	bl	8009d76 <USBD_CtlSendData>
        break;
 8009b38:	e004      	b.n	8009b44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f8a9 	bl	8009c94 <USBD_CtlError>
        break;
 8009b42:	bf00      	nop
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d81e      	bhi.n	8009ba2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	88db      	ldrh	r3, [r3, #6]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d004      	beq.n	8009b76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f890 	bl	8009c94 <USBD_CtlError>
        break;
 8009b74:	e01a      	b.n	8009bac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d005      	beq.n	8009b92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f043 0202 	orr.w	r2, r3, #2
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	330c      	adds	r3, #12
 8009b96:	2202      	movs	r2, #2
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f8eb 	bl	8009d76 <USBD_CtlSendData>
      break;
 8009ba0:	e004      	b.n	8009bac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f875 	bl	8009c94 <USBD_CtlError>
      break;
 8009baa:	bf00      	nop
  }
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	885b      	ldrh	r3, [r3, #2]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d106      	bne.n	8009bd4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f92b 	bl	8009e2a <USBD_CtlSendStatus>
  }
}
 8009bd4:	bf00      	nop
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d80b      	bhi.n	8009c0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	885b      	ldrh	r3, [r3, #2]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d10c      	bne.n	8009c16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f910 	bl	8009e2a <USBD_CtlSendStatus>
      }
      break;
 8009c0a:	e004      	b.n	8009c16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f840 	bl	8009c94 <USBD_CtlError>
      break;
 8009c14:	e000      	b.n	8009c18 <USBD_ClrFeature+0x3c>
      break;
 8009c16:	bf00      	nop
  }
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	781a      	ldrb	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7ff fa92 	bl	8009174 <SWAPBYTE>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3301      	adds	r3, #1
 8009c62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7ff fa85 	bl	8009174 <SWAPBYTE>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3301      	adds	r3, #1
 8009c76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f7ff fa78 	bl	8009174 <SWAPBYTE>
 8009c84:	4603      	mov	r3, r0
 8009c86:	461a      	mov	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	80da      	strh	r2, [r3, #6]
}
 8009c8c:	bf00      	nop
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c9e:	2180      	movs	r1, #128	; 0x80
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fc83 	bl	800a5ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fc7f 	bl	800a5ac <USBD_LL_StallEP>
}
 8009cae:	bf00      	nop
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b086      	sub	sp, #24
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d036      	beq.n	8009d3a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009cd0:	6938      	ldr	r0, [r7, #16]
 8009cd2:	f000 f836 	bl	8009d42 <USBD_GetLen>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	3301      	adds	r3, #1
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	005b      	lsls	r3, r3, #1
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	4413      	add	r3, r2
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	7812      	ldrb	r2, [r2, #0]
 8009cee:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	2203      	movs	r2, #3
 8009cfe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	3301      	adds	r3, #1
 8009d04:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d06:	e013      	b.n	8009d30 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	7812      	ldrb	r2, [r2, #0]
 8009d12:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	3301      	adds	r3, #1
 8009d18:	613b      	str	r3, [r7, #16]
    idx++;
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	4413      	add	r3, r2
 8009d26:	2200      	movs	r2, #0
 8009d28:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1e7      	bne.n	8009d08 <USBD_GetString+0x52>
 8009d38:	e000      	b.n	8009d3c <USBD_GetString+0x86>
    return;
 8009d3a:	bf00      	nop
  }
}
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b085      	sub	sp, #20
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d52:	e005      	b.n	8009d60 <USBD_GetLen+0x1e>
  {
    len++;
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	3301      	adds	r3, #1
 8009d58:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1f5      	bne.n	8009d54 <USBD_GetLen+0x12>
  }

  return len;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2202      	movs	r2, #2
 8009d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 fc8f 	bl	800a6c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f000 fc7e 	bl	800a6c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	60f8      	str	r0, [r7, #12]
 8009dd6:	60b9      	str	r1, [r7, #8]
 8009dd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2203      	movs	r2, #3
 8009dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	2100      	movs	r1, #0
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fc82 	bl	800a702 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	2100      	movs	r1, #0
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f000 fc71 	bl	800a702 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2204      	movs	r2, #4
 8009e36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2100      	movs	r1, #0
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fc3d 	bl	800a6c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2205      	movs	r2, #5
 8009e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e60:	2300      	movs	r3, #0
 8009e62:	2200      	movs	r2, #0
 8009e64:	2100      	movs	r1, #0
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fc4b 	bl	800a702 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	4912      	ldr	r1, [pc, #72]	; (8009ec8 <MX_USB_Device_Init+0x50>)
 8009e80:	4812      	ldr	r0, [pc, #72]	; (8009ecc <MX_USB_Device_Init+0x54>)
 8009e82:	f7fe fed9 	bl	8008c38 <USBD_Init>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009e8c:	f7f6 ff00 	bl	8000c90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009e90:	490f      	ldr	r1, [pc, #60]	; (8009ed0 <MX_USB_Device_Init+0x58>)
 8009e92:	480e      	ldr	r0, [pc, #56]	; (8009ecc <MX_USB_Device_Init+0x54>)
 8009e94:	f7fe ff00 	bl	8008c98 <USBD_RegisterClass>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009e9e:	f7f6 fef7 	bl	8000c90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009ea2:	490c      	ldr	r1, [pc, #48]	; (8009ed4 <MX_USB_Device_Init+0x5c>)
 8009ea4:	4809      	ldr	r0, [pc, #36]	; (8009ecc <MX_USB_Device_Init+0x54>)
 8009ea6:	f7fe fe21 	bl	8008aec <USBD_CDC_RegisterInterface>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009eb0:	f7f6 feee 	bl	8000c90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009eb4:	4805      	ldr	r0, [pc, #20]	; (8009ecc <MX_USB_Device_Init+0x54>)
 8009eb6:	f7fe ff16 	bl	8008ce6 <USBD_Start>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009ec0:	f7f6 fee6 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009ec4:	bf00      	nop
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	20000158 	.word	0x20000158
 8009ecc:	2000066c 	.word	0x2000066c
 8009ed0:	20000040 	.word	0x20000040
 8009ed4:	20000144 	.word	0x20000144

08009ed8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009edc:	2200      	movs	r2, #0
 8009ede:	4905      	ldr	r1, [pc, #20]	; (8009ef4 <CDC_Init_FS+0x1c>)
 8009ee0:	4805      	ldr	r0, [pc, #20]	; (8009ef8 <CDC_Init_FS+0x20>)
 8009ee2:	f7fe fe18 	bl	8008b16 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ee6:	4905      	ldr	r1, [pc, #20]	; (8009efc <CDC_Init_FS+0x24>)
 8009ee8:	4803      	ldr	r0, [pc, #12]	; (8009ef8 <CDC_Init_FS+0x20>)
 8009eea:	f7fe fe32 	bl	8008b52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009eee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	20000d24 	.word	0x20000d24
 8009ef8:	2000066c 	.word	0x2000066c
 8009efc:	2000093c 	.word	0x2000093c

08009f00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f00:	b480      	push	{r7}
 8009f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	2b23      	cmp	r3, #35	; 0x23
 8009f24:	d84a      	bhi.n	8009fbc <CDC_Control_FS+0xac>
 8009f26:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <CDC_Control_FS+0x1c>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009fbd 	.word	0x08009fbd
 8009f30:	08009fbd 	.word	0x08009fbd
 8009f34:	08009fbd 	.word	0x08009fbd
 8009f38:	08009fbd 	.word	0x08009fbd
 8009f3c:	08009fbd 	.word	0x08009fbd
 8009f40:	08009fbd 	.word	0x08009fbd
 8009f44:	08009fbd 	.word	0x08009fbd
 8009f48:	08009fbd 	.word	0x08009fbd
 8009f4c:	08009fbd 	.word	0x08009fbd
 8009f50:	08009fbd 	.word	0x08009fbd
 8009f54:	08009fbd 	.word	0x08009fbd
 8009f58:	08009fbd 	.word	0x08009fbd
 8009f5c:	08009fbd 	.word	0x08009fbd
 8009f60:	08009fbd 	.word	0x08009fbd
 8009f64:	08009fbd 	.word	0x08009fbd
 8009f68:	08009fbd 	.word	0x08009fbd
 8009f6c:	08009fbd 	.word	0x08009fbd
 8009f70:	08009fbd 	.word	0x08009fbd
 8009f74:	08009fbd 	.word	0x08009fbd
 8009f78:	08009fbd 	.word	0x08009fbd
 8009f7c:	08009fbd 	.word	0x08009fbd
 8009f80:	08009fbd 	.word	0x08009fbd
 8009f84:	08009fbd 	.word	0x08009fbd
 8009f88:	08009fbd 	.word	0x08009fbd
 8009f8c:	08009fbd 	.word	0x08009fbd
 8009f90:	08009fbd 	.word	0x08009fbd
 8009f94:	08009fbd 	.word	0x08009fbd
 8009f98:	08009fbd 	.word	0x08009fbd
 8009f9c:	08009fbd 	.word	0x08009fbd
 8009fa0:	08009fbd 	.word	0x08009fbd
 8009fa4:	08009fbd 	.word	0x08009fbd
 8009fa8:	08009fbd 	.word	0x08009fbd
 8009fac:	08009fbd 	.word	0x08009fbd
 8009fb0:	08009fbd 	.word	0x08009fbd
 8009fb4:	08009fbd 	.word	0x08009fbd
 8009fb8:	08009fbd 	.word	0x08009fbd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009fbc:	bf00      	nop
  }

  return (USBD_OK);
 8009fbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7f6 f91d 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009fde:	6879      	ldr	r1, [r7, #4]
 8009fe0:	4805      	ldr	r0, [pc, #20]	; (8009ff8 <CDC_Receive_FS+0x2c>)
 8009fe2:	f7fe fdb6 	bl	8008b52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009fe6:	4804      	ldr	r0, [pc, #16]	; (8009ff8 <CDC_Receive_FS+0x2c>)
 8009fe8:	f7fe fdfc 	bl	8008be4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009fec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	2000066c 	.word	0x2000066c

08009ffc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a00c:	4b0d      	ldr	r3, [pc, #52]	; (800a044 <CDC_Transmit_FS+0x48>)
 800a00e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a012:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a01e:	2301      	movs	r3, #1
 800a020:	e00b      	b.n	800a03a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a022:	887b      	ldrh	r3, [r7, #2]
 800a024:	461a      	mov	r2, r3
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	4806      	ldr	r0, [pc, #24]	; (800a044 <CDC_Transmit_FS+0x48>)
 800a02a:	f7fe fd74 	bl	8008b16 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a02e:	4805      	ldr	r0, [pc, #20]	; (800a044 <CDC_Transmit_FS+0x48>)
 800a030:	f7fe fda8 	bl	8008b84 <USBD_CDC_TransmitPacket>
 800a034:	4603      	mov	r3, r0
 800a036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a038:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	2000066c 	.word	0x2000066c

0800a048 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	4613      	mov	r3, r2
 800a054:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a05a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
	...

0800a06c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	4603      	mov	r3, r0
 800a074:	6039      	str	r1, [r7, #0]
 800a076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2212      	movs	r2, #18
 800a07c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a07e:	4b03      	ldr	r3, [pc, #12]	; (800a08c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	20000178 	.word	0x20000178

0800a090 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	6039      	str	r1, [r7, #0]
 800a09a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2204      	movs	r2, #4
 800a0a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a0a2:	4b03      	ldr	r3, [pc, #12]	; (800a0b0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	2000018c 	.word	0x2000018c

0800a0b4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	6039      	str	r1, [r7, #0]
 800a0be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d105      	bne.n	800a0d2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	4907      	ldr	r1, [pc, #28]	; (800a0e8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a0ca:	4808      	ldr	r0, [pc, #32]	; (800a0ec <USBD_CDC_ProductStrDescriptor+0x38>)
 800a0cc:	f7ff fdf3 	bl	8009cb6 <USBD_GetString>
 800a0d0:	e004      	b.n	800a0dc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	4904      	ldr	r1, [pc, #16]	; (800a0e8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a0d6:	4805      	ldr	r0, [pc, #20]	; (800a0ec <USBD_CDC_ProductStrDescriptor+0x38>)
 800a0d8:	f7ff fded 	bl	8009cb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0dc:	4b02      	ldr	r3, [pc, #8]	; (800a0e8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	2000110c 	.word	0x2000110c
 800a0ec:	0800a8f8 	.word	0x0800a8f8

0800a0f0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	6039      	str	r1, [r7, #0]
 800a0fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	4904      	ldr	r1, [pc, #16]	; (800a110 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a100:	4804      	ldr	r0, [pc, #16]	; (800a114 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a102:	f7ff fdd8 	bl	8009cb6 <USBD_GetString>
  return USBD_StrDesc;
 800a106:	4b02      	ldr	r3, [pc, #8]	; (800a110 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	2000110c 	.word	0x2000110c
 800a114:	0800a910 	.word	0x0800a910

0800a118 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	4603      	mov	r3, r0
 800a120:	6039      	str	r1, [r7, #0]
 800a122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	221a      	movs	r2, #26
 800a128:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a12a:	f000 f843 	bl	800a1b4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a12e:	4b02      	ldr	r3, [pc, #8]	; (800a138 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a130:	4618      	mov	r0, r3
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20000190 	.word	0x20000190

0800a13c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	6039      	str	r1, [r7, #0]
 800a146:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a148:	79fb      	ldrb	r3, [r7, #7]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d105      	bne.n	800a15a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	4907      	ldr	r1, [pc, #28]	; (800a170 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a152:	4808      	ldr	r0, [pc, #32]	; (800a174 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a154:	f7ff fdaf 	bl	8009cb6 <USBD_GetString>
 800a158:	e004      	b.n	800a164 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	4904      	ldr	r1, [pc, #16]	; (800a170 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a15e:	4805      	ldr	r0, [pc, #20]	; (800a174 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a160:	f7ff fda9 	bl	8009cb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a164:	4b02      	ldr	r3, [pc, #8]	; (800a170 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	2000110c 	.word	0x2000110c
 800a174:	0800a924 	.word	0x0800a924

0800a178 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	6039      	str	r1, [r7, #0]
 800a182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d105      	bne.n	800a196 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	4907      	ldr	r1, [pc, #28]	; (800a1ac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a18e:	4808      	ldr	r0, [pc, #32]	; (800a1b0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a190:	f7ff fd91 	bl	8009cb6 <USBD_GetString>
 800a194:	e004      	b.n	800a1a0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	4904      	ldr	r1, [pc, #16]	; (800a1ac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a19a:	4805      	ldr	r0, [pc, #20]	; (800a1b0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a19c:	f7ff fd8b 	bl	8009cb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1a0:	4b02      	ldr	r3, [pc, #8]	; (800a1ac <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	2000110c 	.word	0x2000110c
 800a1b0:	0800a930 	.word	0x0800a930

0800a1b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a1ba:	4b0f      	ldr	r3, [pc, #60]	; (800a1f8 <Get_SerialNum+0x44>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a1c0:	4b0e      	ldr	r3, [pc, #56]	; (800a1fc <Get_SerialNum+0x48>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a1c6:	4b0e      	ldr	r3, [pc, #56]	; (800a200 <Get_SerialNum+0x4c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d009      	beq.n	800a1ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a1da:	2208      	movs	r2, #8
 800a1dc:	4909      	ldr	r1, [pc, #36]	; (800a204 <Get_SerialNum+0x50>)
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 f814 	bl	800a20c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	4908      	ldr	r1, [pc, #32]	; (800a208 <Get_SerialNum+0x54>)
 800a1e8:	68b8      	ldr	r0, [r7, #8]
 800a1ea:	f000 f80f 	bl	800a20c <IntToUnicode>
  }
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	1fff7590 	.word	0x1fff7590
 800a1fc:	1fff7594 	.word	0x1fff7594
 800a200:	1fff7598 	.word	0x1fff7598
 800a204:	20000192 	.word	0x20000192
 800a208:	200001a2 	.word	0x200001a2

0800a20c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	4613      	mov	r3, r2
 800a218:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a21a:	2300      	movs	r3, #0
 800a21c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a21e:	2300      	movs	r3, #0
 800a220:	75fb      	strb	r3, [r7, #23]
 800a222:	e027      	b.n	800a274 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	0f1b      	lsrs	r3, r3, #28
 800a228:	2b09      	cmp	r3, #9
 800a22a:	d80b      	bhi.n	800a244 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	0f1b      	lsrs	r3, r3, #28
 800a230:	b2da      	uxtb	r2, r3
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	4619      	mov	r1, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	440b      	add	r3, r1
 800a23c:	3230      	adds	r2, #48	; 0x30
 800a23e:	b2d2      	uxtb	r2, r2
 800a240:	701a      	strb	r2, [r3, #0]
 800a242:	e00a      	b.n	800a25a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	0f1b      	lsrs	r3, r3, #28
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	4619      	mov	r1, r3
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	440b      	add	r3, r1
 800a254:	3237      	adds	r2, #55	; 0x37
 800a256:	b2d2      	uxtb	r2, r2
 800a258:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	3301      	adds	r3, #1
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	4413      	add	r3, r2
 800a26a:	2200      	movs	r2, #0
 800a26c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a26e:	7dfb      	ldrb	r3, [r7, #23]
 800a270:	3301      	adds	r3, #1
 800a272:	75fb      	strb	r3, [r7, #23]
 800a274:	7dfa      	ldrb	r2, [r7, #23]
 800a276:	79fb      	ldrb	r3, [r7, #7]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d3d3      	bcc.n	800a224 <IntToUnicode+0x18>
  }
}
 800a27c:	bf00      	nop
 800a27e:	bf00      	nop
 800a280:	371c      	adds	r7, #28
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
	...

0800a28c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a0d      	ldr	r2, [pc, #52]	; (800a2d0 <HAL_PCD_MspInit+0x44>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d113      	bne.n	800a2c6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a29e:	4b0d      	ldr	r3, [pc, #52]	; (800a2d4 <HAL_PCD_MspInit+0x48>)
 800a2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a2:	4a0c      	ldr	r2, [pc, #48]	; (800a2d4 <HAL_PCD_MspInit+0x48>)
 800a2a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2a8:	6593      	str	r3, [r2, #88]	; 0x58
 800a2aa:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <HAL_PCD_MspInit+0x48>)
 800a2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	2014      	movs	r0, #20
 800a2bc:	f7f7 f8a1 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a2c0:	2014      	movs	r0, #20
 800a2c2:	f7f7 f8b8 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a2c6:	bf00      	nop
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	40005c00 	.word	0x40005c00
 800a2d4:	40021000 	.word	0x40021000

0800a2d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	f7fe fd44 	bl	8008d7c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a2f4:	bf00      	nop
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a30e:	78fa      	ldrb	r2, [r7, #3]
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	440b      	add	r3, r1
 800a31c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	78fb      	ldrb	r3, [r7, #3]
 800a324:	4619      	mov	r1, r3
 800a326:	f7fe fd7e 	bl	8008e26 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b082      	sub	sp, #8
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	460b      	mov	r3, r1
 800a33c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a344:	78fa      	ldrb	r2, [r7, #3]
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	4613      	mov	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	00db      	lsls	r3, r3, #3
 800a350:	440b      	add	r3, r1
 800a352:	333c      	adds	r3, #60	; 0x3c
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	78fb      	ldrb	r3, [r7, #3]
 800a358:	4619      	mov	r1, r3
 800a35a:	f7fe fdc7 	bl	8008eec <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a35e:	bf00      	nop
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a374:	4618      	mov	r0, r3
 800a376:	f7fe fedb 	bl	8009130 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a37a:	bf00      	nop
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a38a:	2301      	movs	r3, #1
 800a38c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	2b02      	cmp	r3, #2
 800a394:	d001      	beq.n	800a39a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a396:	f7f6 fc7b 	bl	8000c90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a3a0:	7bfa      	ldrb	r2, [r7, #15]
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe fe85 	bl	80090b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fe fe31 	bl	8009018 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a3b6:	bf00      	nop
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
	...

0800a3c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fe fe80 	bl	80090d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d005      	beq.n	800a3e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3dc:	4b04      	ldr	r3, [pc, #16]	; (800a3f0 <HAL_PCD_SuspendCallback+0x30>)
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	4a03      	ldr	r2, [pc, #12]	; (800a3f0 <HAL_PCD_SuspendCallback+0x30>)
 800a3e2:	f043 0306 	orr.w	r3, r3, #6
 800a3e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a3e8:	bf00      	nop
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	e000ed00 	.word	0xe000ed00

0800a3f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d007      	beq.n	800a414 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a404:	4b08      	ldr	r3, [pc, #32]	; (800a428 <HAL_PCD_ResumeCallback+0x34>)
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	4a07      	ldr	r2, [pc, #28]	; (800a428 <HAL_PCD_ResumeCallback+0x34>)
 800a40a:	f023 0306 	bic.w	r3, r3, #6
 800a40e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a410:	f000 f9fa 	bl	800a808 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fe fe70 	bl	8009100 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	e000ed00 	.word	0xe000ed00

0800a42c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a434:	4a2b      	ldr	r2, [pc, #172]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a29      	ldr	r2, [pc, #164]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a440:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a444:	4b27      	ldr	r3, [pc, #156]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a446:	4a28      	ldr	r2, [pc, #160]	; (800a4e8 <USBD_LL_Init+0xbc>)
 800a448:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a44a:	4b26      	ldr	r3, [pc, #152]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a44c:	2208      	movs	r2, #8
 800a44e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a450:	4b24      	ldr	r3, [pc, #144]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a452:	2202      	movs	r2, #2
 800a454:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a456:	4b23      	ldr	r3, [pc, #140]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a458:	2202      	movs	r2, #2
 800a45a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a45c:	4b21      	ldr	r3, [pc, #132]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a45e:	2200      	movs	r2, #0
 800a460:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a462:	4b20      	ldr	r3, [pc, #128]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a464:	2200      	movs	r2, #0
 800a466:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a468:	4b1e      	ldr	r3, [pc, #120]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a46e:	4b1d      	ldr	r3, [pc, #116]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a470:	2200      	movs	r2, #0
 800a472:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a474:	481b      	ldr	r0, [pc, #108]	; (800a4e4 <USBD_LL_Init+0xb8>)
 800a476:	f7f7 fc05 	bl	8001c84 <HAL_PCD_Init>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a480:	f7f6 fc06 	bl	8000c90 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a48a:	2318      	movs	r3, #24
 800a48c:	2200      	movs	r2, #0
 800a48e:	2100      	movs	r1, #0
 800a490:	f7f9 f81f 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a49a:	2358      	movs	r3, #88	; 0x58
 800a49c:	2200      	movs	r2, #0
 800a49e:	2180      	movs	r1, #128	; 0x80
 800a4a0:	f7f9 f817 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a4aa:	23c0      	movs	r3, #192	; 0xc0
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2181      	movs	r1, #129	; 0x81
 800a4b0:	f7f9 f80f 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a4ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	f7f9 f806 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a4cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2182      	movs	r1, #130	; 0x82
 800a4d4:	f7f8 fffd 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	2000130c 	.word	0x2000130c
 800a4e8:	40005c00 	.word	0x40005c00

0800a4ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a502:	4618      	mov	r0, r3
 800a504:	f7f7 fca3 	bl	8001e4e <HAL_PCD_Start>
 800a508:	4603      	mov	r3, r0
 800a50a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 f980 	bl	800a814 <USBD_Get_USB_Status>
 800a514:	4603      	mov	r3, r0
 800a516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a518:	7bbb      	ldrb	r3, [r7, #14]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	4608      	mov	r0, r1
 800a52c:	4611      	mov	r1, r2
 800a52e:	461a      	mov	r2, r3
 800a530:	4603      	mov	r3, r0
 800a532:	70fb      	strb	r3, [r7, #3]
 800a534:	460b      	mov	r3, r1
 800a536:	70bb      	strb	r3, [r7, #2]
 800a538:	4613      	mov	r3, r2
 800a53a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a54a:	78bb      	ldrb	r3, [r7, #2]
 800a54c:	883a      	ldrh	r2, [r7, #0]
 800a54e:	78f9      	ldrb	r1, [r7, #3]
 800a550:	f7f7 fe12 	bl	8002178 <HAL_PCD_EP_Open>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 f95a 	bl	800a814 <USBD_Get_USB_Status>
 800a560:	4603      	mov	r3, r0
 800a562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a564:	7bbb      	ldrb	r3, [r7, #14]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	460b      	mov	r3, r1
 800a578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a588:	78fa      	ldrb	r2, [r7, #3]
 800a58a:	4611      	mov	r1, r2
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7f7 fe59 	bl	8002244 <HAL_PCD_EP_Close>
 800a592:	4603      	mov	r3, r0
 800a594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a596:	7bfb      	ldrb	r3, [r7, #15]
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 f93b 	bl	800a814 <USBD_Get_USB_Status>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a5c6:	78fa      	ldrb	r2, [r7, #3]
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7f7 ff1a 	bl	8002404 <HAL_PCD_EP_SetStall>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 f91c 	bl	800a814 <USBD_Get_USB_Status>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a604:	78fa      	ldrb	r2, [r7, #3]
 800a606:	4611      	mov	r1, r2
 800a608:	4618      	mov	r0, r3
 800a60a:	f7f7 ff4d 	bl	80024a8 <HAL_PCD_EP_ClrStall>
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	4618      	mov	r0, r3
 800a616:	f000 f8fd 	bl	800a814 <USBD_Get_USB_Status>
 800a61a:	4603      	mov	r3, r0
 800a61c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a63a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a63c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a640:	2b00      	cmp	r3, #0
 800a642:	da0c      	bge.n	800a65e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a644:	78fb      	ldrb	r3, [r7, #3]
 800a646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a64a:	68f9      	ldr	r1, [r7, #12]
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	4613      	mov	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4413      	add	r3, r2
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	440b      	add	r3, r1
 800a658:	3302      	adds	r3, #2
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	e00b      	b.n	800a676 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a65e:	78fb      	ldrb	r3, [r7, #3]
 800a660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a664:	68f9      	ldr	r1, [r7, #12]
 800a666:	4613      	mov	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	440b      	add	r3, r1
 800a670:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a674:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a69c:	78fa      	ldrb	r2, [r7, #3]
 800a69e:	4611      	mov	r1, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7f7 fd44 	bl	800212e <HAL_PCD_SetAddress>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 f8b1 	bl	800a814 <USBD_Get_USB_Status>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	607a      	str	r2, [r7, #4]
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a6de:	7af9      	ldrb	r1, [r7, #11]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	f7f7 fe4b 	bl	800237e <HAL_PCD_EP_Transmit>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 f890 	bl	800a814 <USBD_Get_USB_Status>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b086      	sub	sp, #24
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
 800a70e:	460b      	mov	r3, r1
 800a710:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a720:	7af9      	ldrb	r1, [r7, #11]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	f7f7 fdd5 	bl	80022d4 <HAL_PCD_EP_Receive>
 800a72a:	4603      	mov	r3, r0
 800a72c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	4618      	mov	r0, r3
 800a732:	f000 f86f 	bl	800a814 <USBD_Get_USB_Status>
 800a736:	4603      	mov	r3, r0
 800a738:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a73a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a756:	78fa      	ldrb	r2, [r7, #3]
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7f7 fdf7 	bl	800234e <HAL_PCD_EP_GetRxCount>
 800a760:	4603      	mov	r3, r0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d002      	beq.n	800a784 <HAL_PCDEx_LPM_Callback+0x18>
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d013      	beq.n	800a7aa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a782:	e023      	b.n	800a7cc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d007      	beq.n	800a79c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a78c:	f000 f83c 	bl	800a808 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a790:	4b10      	ldr	r3, [pc, #64]	; (800a7d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	4a0f      	ldr	r2, [pc, #60]	; (800a7d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a796:	f023 0306 	bic.w	r3, r3, #6
 800a79a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe fcac 	bl	8009100 <USBD_LL_Resume>
    break;
 800a7a8:	e010      	b.n	800a7cc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fe fc8f 	bl	80090d4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d005      	beq.n	800a7ca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7be:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	4a04      	ldr	r2, [pc, #16]	; (800a7d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a7c4:	f043 0306 	orr.w	r3, r3, #6
 800a7c8:	6113      	str	r3, [r2, #16]
    break;
 800a7ca:	bf00      	nop
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	e000ed00 	.word	0xe000ed00

0800a7d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7e0:	4b03      	ldr	r3, [pc, #12]	; (800a7f0 <USBD_static_malloc+0x18>)
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	200001d4 	.word	0x200001d4

0800a7f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]

}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a80c:	f7f5 feb6 	bl	800057c <SystemClock_Config>
}
 800a810:	bf00      	nop
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	2b03      	cmp	r3, #3
 800a826:	d817      	bhi.n	800a858 <USBD_Get_USB_Status+0x44>
 800a828:	a201      	add	r2, pc, #4	; (adr r2, 800a830 <USBD_Get_USB_Status+0x1c>)
 800a82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82e:	bf00      	nop
 800a830:	0800a841 	.word	0x0800a841
 800a834:	0800a847 	.word	0x0800a847
 800a838:	0800a84d 	.word	0x0800a84d
 800a83c:	0800a853 	.word	0x0800a853
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	73fb      	strb	r3, [r7, #15]
    break;
 800a844:	e00b      	b.n	800a85e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a846:	2303      	movs	r3, #3
 800a848:	73fb      	strb	r3, [r7, #15]
    break;
 800a84a:	e008      	b.n	800a85e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a84c:	2301      	movs	r3, #1
 800a84e:	73fb      	strb	r3, [r7, #15]
    break;
 800a850:	e005      	b.n	800a85e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a852:	2303      	movs	r3, #3
 800a854:	73fb      	strb	r3, [r7, #15]
    break;
 800a856:	e002      	b.n	800a85e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a858:	2303      	movs	r3, #3
 800a85a:	73fb      	strb	r3, [r7, #15]
    break;
 800a85c:	bf00      	nop
  }
  return usb_status;
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <__libc_init_array>:
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	4d0d      	ldr	r5, [pc, #52]	; (800a8a4 <__libc_init_array+0x38>)
 800a870:	4c0d      	ldr	r4, [pc, #52]	; (800a8a8 <__libc_init_array+0x3c>)
 800a872:	1b64      	subs	r4, r4, r5
 800a874:	10a4      	asrs	r4, r4, #2
 800a876:	2600      	movs	r6, #0
 800a878:	42a6      	cmp	r6, r4
 800a87a:	d109      	bne.n	800a890 <__libc_init_array+0x24>
 800a87c:	4d0b      	ldr	r5, [pc, #44]	; (800a8ac <__libc_init_array+0x40>)
 800a87e:	4c0c      	ldr	r4, [pc, #48]	; (800a8b0 <__libc_init_array+0x44>)
 800a880:	f000 f82e 	bl	800a8e0 <_init>
 800a884:	1b64      	subs	r4, r4, r5
 800a886:	10a4      	asrs	r4, r4, #2
 800a888:	2600      	movs	r6, #0
 800a88a:	42a6      	cmp	r6, r4
 800a88c:	d105      	bne.n	800a89a <__libc_init_array+0x2e>
 800a88e:	bd70      	pop	{r4, r5, r6, pc}
 800a890:	f855 3b04 	ldr.w	r3, [r5], #4
 800a894:	4798      	blx	r3
 800a896:	3601      	adds	r6, #1
 800a898:	e7ee      	b.n	800a878 <__libc_init_array+0xc>
 800a89a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a89e:	4798      	blx	r3
 800a8a0:	3601      	adds	r6, #1
 800a8a2:	e7f2      	b.n	800a88a <__libc_init_array+0x1e>
 800a8a4:	0800a950 	.word	0x0800a950
 800a8a8:	0800a950 	.word	0x0800a950
 800a8ac:	0800a950 	.word	0x0800a950
 800a8b0:	0800a954 	.word	0x0800a954

0800a8b4 <memcpy>:
 800a8b4:	440a      	add	r2, r1
 800a8b6:	4291      	cmp	r1, r2
 800a8b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8bc:	d100      	bne.n	800a8c0 <memcpy+0xc>
 800a8be:	4770      	bx	lr
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ca:	4291      	cmp	r1, r2
 800a8cc:	d1f9      	bne.n	800a8c2 <memcpy+0xe>
 800a8ce:	bd10      	pop	{r4, pc}

0800a8d0 <memset>:
 800a8d0:	4402      	add	r2, r0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d100      	bne.n	800a8da <memset+0xa>
 800a8d8:	4770      	bx	lr
 800a8da:	f803 1b01 	strb.w	r1, [r3], #1
 800a8de:	e7f9      	b.n	800a8d4 <memset+0x4>

0800a8e0 <_init>:
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	bf00      	nop
 800a8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8e6:	bc08      	pop	{r3}
 800a8e8:	469e      	mov	lr, r3
 800a8ea:	4770      	bx	lr

0800a8ec <_fini>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr
